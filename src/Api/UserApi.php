<?php
/**
 * UserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ZSGF\Client\ApiException;
use ZSGF\Client\Configuration;
use ZSGF\Client\HeaderSelector;
use ZSGF\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'user' => [
            'application/json',
        ],
        'userClear' => [
            'application/json',
        ],
        'userCommonInterests' => [
            'application/json',
        ],
        'userDelete' => [
            'application/json',
        ],
        'userEmailSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userEmailSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userExport' => [
            'application/json',
        ],
        'userFollowUser' => [
            'application/json',
        ],
        'userFollowerPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userFollowers' => [
            'application/json',
        ],
        'userFollowing' => [
            'application/json',
        ],
        'userFriendsNearBy' => [
            'application/json',
        ],
        'userImport' => [
            'multipart/form-data',
        ],
        'userLocation' => [
            'application/json',
        ],
        'userLocationDelete' => [
            'application/json',
        ],
        'userLocationPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userLocationPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userLocations' => [
            'application/json',
        ],
        'userMutualFollowers' => [
            'application/json',
        ],
        'userMutualFollowings' => [
            'application/json',
        ],
        'userOAuthAccountBind' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userOAuthAccountSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userOAuthAccounts' => [
            'application/json',
        ],
        'userOAuthAccountsPutBind' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userOAuthAccountsUnBind' => [
            'application/json',
        ],
        'userPhoneSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userPhoneSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userProfile' => [
            'application/json',
        ],
        'userPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userQRCodePreSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userQRCodeScan' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userQRCodeSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userQRCodeSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userResetPwd' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSendEmailCode' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSendSMSCode' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userTwoFactorAuth' => [
            'application/json',
        ],
        'userUnfollowUser' => [
            'application/json',
        ],
        'userUnionIDSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userUnionIDSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userUpdateProfile' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'users' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation user
     *
     * 用户详情
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['user'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function user($id, $app_key, string $contentType = self::contentTypes['user'][0])
    {
        list($response) = $this->userWithHttpInfo($id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userWithHttpInfo
     *
     * 用户详情
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['user'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['user'][0])
    {
        $request = $this->userRequest($id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userAsync
     *
     * 用户详情
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['user'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userAsync($id, $app_key, string $contentType = self::contentTypes['user'][0])
    {
        return $this->userAsyncWithHttpInfo($id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userAsyncWithHttpInfo
     *
     * 用户详情
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['user'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userAsyncWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['user'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userRequest($id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'user'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['user'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userRequest($id, $app_key, string $contentType = self::contentTypes['user'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling user'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling user'
            );
        }


        $resourcePath = '/User/{appKey}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userClear
     *
     * 清空用户数据
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userClear'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userClear($app_key, string $contentType = self::contentTypes['userClear'][0])
    {
        list($response) = $this->userClearWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userClearWithHttpInfo
     *
     * 清空用户数据
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userClear'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userClearWithHttpInfo($app_key, string $contentType = self::contentTypes['userClear'][0])
    {
        $request = $this->userClearRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userClearAsync
     *
     * 清空用户数据
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userClear'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userClearAsync($app_key, string $contentType = self::contentTypes['userClear'][0])
    {
        return $this->userClearAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userClearAsyncWithHttpInfo
     *
     * 清空用户数据
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userClear'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userClearAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userClear'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userClearRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userClear'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userClear'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userClearRequest($app_key, string $contentType = self::contentTypes['userClear'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userClear'
            );
        }


        $resourcePath = '/User/{appKey}/Clear';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCommonInterests
     *
     * 有共同爱好的用户推荐
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $tag  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userCommonInterests($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        list($response) = $this->userCommonInterestsWithHttpInfo($app_key, $tag, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userCommonInterestsWithHttpInfo
     *
     * 有共同爱好的用户推荐
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCommonInterestsWithHttpInfo($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        $request = $this->userCommonInterestsRequest($app_key, $tag, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCommonInterestsAsync
     *
     * 有共同爱好的用户推荐
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCommonInterestsAsync($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        return $this->userCommonInterestsAsyncWithHttpInfo($app_key, $tag, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCommonInterestsAsyncWithHttpInfo
     *
     * 有共同爱好的用户推荐
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCommonInterestsAsyncWithHttpInfo($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userCommonInterestsRequest($app_key, $tag, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCommonInterests'
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userCommonInterestsRequest($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userCommonInterests'
            );
        }





        $resourcePath = '/User/{appKey}/Friends/CommonInterests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDelete
     *
     * 删除用户
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userDelete($id, $app_key, string $contentType = self::contentTypes['userDelete'][0])
    {
        list($response) = $this->userDeleteWithHttpInfo($id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userDeleteWithHttpInfo
     *
     * 删除用户
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDeleteWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userDelete'][0])
    {
        $request = $this->userDeleteRequest($id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDeleteAsync
     *
     * 删除用户
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteAsync($id, $app_key, string $contentType = self::contentTypes['userDelete'][0])
    {
        return $this->userDeleteAsyncWithHttpInfo($id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDeleteAsyncWithHttpInfo
     *
     * 删除用户
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeleteAsyncWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userDelete'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userDeleteRequest($id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDelete'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userDeleteRequest($id, $app_key, string $contentType = self::contentTypes['userDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userDelete'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userDelete'
            );
        }


        $resourcePath = '/User/{appKey}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userEmailSignIn
     *
     * 邮箱登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userEmailSignIn($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        list($response) = $this->userEmailSignInWithHttpInfo($app_key, $email_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userEmailSignInWithHttpInfo
     *
     * 邮箱登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userEmailSignInWithHttpInfo($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        $request = $this->userEmailSignInRequest($app_key, $email_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userEmailSignInAsync
     *
     * 邮箱登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignInAsync($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        return $this->userEmailSignInAsyncWithHttpInfo($app_key, $email_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userEmailSignInAsyncWithHttpInfo
     *
     * 邮箱登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignInAsyncWithHttpInfo($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userEmailSignInRequest($app_key, $email_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userEmailSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userEmailSignInRequest($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userEmailSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/EmailSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email_sign_in_request));
            } else {
                $httpBody = $email_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userEmailSignUp
     *
     * 邮箱注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userEmailSignUp($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        list($response) = $this->userEmailSignUpWithHttpInfo($app_key, $email_sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userEmailSignUpWithHttpInfo
     *
     * 邮箱注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userEmailSignUpWithHttpInfo($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        $request = $this->userEmailSignUpRequest($app_key, $email_sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userEmailSignUpAsync
     *
     * 邮箱注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignUpAsync($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        return $this->userEmailSignUpAsyncWithHttpInfo($app_key, $email_sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userEmailSignUpAsyncWithHttpInfo
     *
     * 邮箱注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignUpAsyncWithHttpInfo($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userEmailSignUpRequest($app_key, $email_sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userEmailSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userEmailSignUpRequest($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userEmailSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/EmailSignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email_sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email_sign_up_request));
            } else {
                $httpBody = $email_sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userExport
     *
     * 导出用户数据
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userExport'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function userExport($app_key, string $contentType = self::contentTypes['userExport'][0])
    {
        list($response) = $this->userExportWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userExportWithHttpInfo
     *
     * 导出用户数据
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userExport'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function userExportWithHttpInfo($app_key, string $contentType = self::contentTypes['userExport'][0])
    {
        $request = $this->userExportRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userExportAsync
     *
     * 导出用户数据
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userExport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userExportAsync($app_key, string $contentType = self::contentTypes['userExport'][0])
    {
        return $this->userExportAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userExportAsyncWithHttpInfo
     *
     * 导出用户数据
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userExport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userExportAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userExport'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->userExportRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userExport'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userExport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userExportRequest($app_key, string $contentType = self::contentTypes['userExport'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userExport'
            );
        }


        $resourcePath = '/User/{appKey}/Export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/vnd.openxmlformats-officedocument.spreadsheetml.sheet', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowUser
     *
     * 关注用户
     *
     * @param  int $user_id  (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userFollowUser($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        list($response) = $this->userFollowUserWithHttpInfo($user_id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userFollowUserWithHttpInfo
     *
     * 关注用户
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowUserWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        $request = $this->userFollowUserRequest($user_id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowUserAsync
     *
     * 关注用户
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowUserAsync($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        return $this->userFollowUserAsyncWithHttpInfo($user_id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowUserAsyncWithHttpInfo
     *
     * 关注用户
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowUserAsyncWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userFollowUserRequest($user_id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowUser'
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowUserRequest($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userFollowUser'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowUser'
            );
        }


        $resourcePath = '/User/{appKey}/Follower/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowerPut
     *
     * 更新粉丝
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userFollowerPut($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        list($response) = $this->userFollowerPutWithHttpInfo($id, $app_key, $follower_put_model, $contentType);
        return $response;
    }

    /**
     * Operation userFollowerPutWithHttpInfo
     *
     * 更新粉丝
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowerPutWithHttpInfo($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        $request = $this->userFollowerPutRequest($id, $app_key, $follower_put_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowerPutAsync
     *
     * 更新粉丝
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowerPutAsync($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        return $this->userFollowerPutAsyncWithHttpInfo($id, $app_key, $follower_put_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowerPutAsyncWithHttpInfo
     *
     * 更新粉丝
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowerPutAsyncWithHttpInfo($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userFollowerPutRequest($id, $app_key, $follower_put_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowerPut'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowerPutRequest($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userFollowerPut'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowerPut'
            );
        }



        $resourcePath = '/User/{appKey}/Follower/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($follower_put_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($follower_put_model));
            } else {
                $httpBody = $follower_put_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowers
     *
     * 我的粉丝
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userFollowers($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        list($response) = $this->userFollowersWithHttpInfo($app_key, $tag, $status, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userFollowersWithHttpInfo
     *
     * 我的粉丝
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowersWithHttpInfo($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        $request = $this->userFollowersRequest($app_key, $tag, $status, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowersAsync
     *
     * 我的粉丝
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowersAsync($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        return $this->userFollowersAsyncWithHttpInfo($app_key, $tag, $status, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowersAsyncWithHttpInfo
     *
     * 我的粉丝
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowersAsyncWithHttpInfo($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userFollowersRequest($app_key, $tag, $status, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowers'
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowersRequest($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowers'
            );
        }






        $resourcePath = '/User/{appKey}/Followers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowing
     *
     * 我的关注
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userFollowing($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowing'][0])
    {
        list($response) = $this->userFollowingWithHttpInfo($app_key, $tag, $status, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userFollowingWithHttpInfo
     *
     * 我的关注
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowingWithHttpInfo($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowing'][0])
    {
        $request = $this->userFollowingRequest($app_key, $tag, $status, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowingAsync
     *
     * 我的关注
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowingAsync($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowing'][0])
    {
        return $this->userFollowingAsyncWithHttpInfo($app_key, $tag, $status, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowingAsyncWithHttpInfo
     *
     * 我的关注
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowingAsyncWithHttpInfo($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowing'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userFollowingRequest($app_key, $tag, $status, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowing'
     *
     * @param  string $app_key (required)
     * @param  string|null $tag  (optional)
     * @param  string|null $status  (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowingRequest($app_key, $tag = null, $status = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowing'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowing'
            );
        }






        $resourcePath = '/User/{appKey}/Following';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFriendsNearBy
     *
     * 附近的用户推荐
     *
     * @param  float $x 纬度 (required)
     * @param  float $y 经度 (required)
     * @param  int $distance 附近距离，单位：米 (required)
     * @param  string $app_key app_key (required)
     * @param  string|null $gender 性别 (optional)
     * @param  int|null $age_s 年龄段 (optional)
     * @param  int|null $age_e 年龄段 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userFriendsNearBy($x, $y, $distance, $app_key, $gender = null, $age_s = null, $age_e = null, $tag = null, $type = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        list($response) = $this->userFriendsNearByWithHttpInfo($x, $y, $distance, $app_key, $gender, $age_s, $age_e, $tag, $type, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userFriendsNearByWithHttpInfo
     *
     * 附近的用户推荐
     *
     * @param  float $x 纬度 (required)
     * @param  float $y 经度 (required)
     * @param  int $distance 附近距离，单位：米 (required)
     * @param  string $app_key (required)
     * @param  string|null $gender 性别 (optional)
     * @param  int|null $age_s 年龄段 (optional)
     * @param  int|null $age_e 年龄段 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFriendsNearByWithHttpInfo($x, $y, $distance, $app_key, $gender = null, $age_s = null, $age_e = null, $tag = null, $type = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        $request = $this->userFriendsNearByRequest($x, $y, $distance, $app_key, $gender, $age_s, $age_e, $tag, $type, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFriendsNearByAsync
     *
     * 附近的用户推荐
     *
     * @param  float $x 纬度 (required)
     * @param  float $y 经度 (required)
     * @param  int $distance 附近距离，单位：米 (required)
     * @param  string $app_key (required)
     * @param  string|null $gender 性别 (optional)
     * @param  int|null $age_s 年龄段 (optional)
     * @param  int|null $age_e 年龄段 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFriendsNearByAsync($x, $y, $distance, $app_key, $gender = null, $age_s = null, $age_e = null, $tag = null, $type = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        return $this->userFriendsNearByAsyncWithHttpInfo($x, $y, $distance, $app_key, $gender, $age_s, $age_e, $tag, $type, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFriendsNearByAsyncWithHttpInfo
     *
     * 附近的用户推荐
     *
     * @param  float $x 纬度 (required)
     * @param  float $y 经度 (required)
     * @param  int $distance 附近距离，单位：米 (required)
     * @param  string $app_key (required)
     * @param  string|null $gender 性别 (optional)
     * @param  int|null $age_s 年龄段 (optional)
     * @param  int|null $age_e 年龄段 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFriendsNearByAsyncWithHttpInfo($x, $y, $distance, $app_key, $gender = null, $age_s = null, $age_e = null, $tag = null, $type = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userFriendsNearByRequest($x, $y, $distance, $app_key, $gender, $age_s, $age_e, $tag, $type, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFriendsNearBy'
     *
     * @param  float $x 纬度 (required)
     * @param  float $y 经度 (required)
     * @param  int $distance 附近距离，单位：米 (required)
     * @param  string $app_key (required)
     * @param  string|null $gender 性别 (optional)
     * @param  int|null $age_s 年龄段 (optional)
     * @param  int|null $age_e 年龄段 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFriendsNearByRequest($x, $y, $distance, $app_key, $gender = null, $age_s = null, $age_e = null, $tag = null, $type = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {

        // verify the required parameter 'x' is set
        if ($x === null || (is_array($x) && count($x) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x when calling userFriendsNearBy'
            );
        }

        // verify the required parameter 'y' is set
        if ($y === null || (is_array($y) && count($y) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $y when calling userFriendsNearBy'
            );
        }

        // verify the required parameter 'distance' is set
        if ($distance === null || (is_array($distance) && count($distance) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $distance when calling userFriendsNearBy'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFriendsNearBy'
            );
        }









        $resourcePath = '/User/{appKey}/Friends/NearBy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender,
            'gender', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $age_s,
            'ageS', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $age_e,
            'ageE', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userImport
     *
     * 导入用户数据
     *
     * @param  string $app_key app_key (required)
     * @param  bool|null $check  (optional)
     * @param  \SplFileObject|null $file  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userImport'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userImport($app_key, $check = null, $file = null, string $contentType = self::contentTypes['userImport'][0])
    {
        list($response) = $this->userImportWithHttpInfo($app_key, $check, $file, $contentType);
        return $response;
    }

    /**
     * Operation userImportWithHttpInfo
     *
     * 导入用户数据
     *
     * @param  string $app_key (required)
     * @param  bool|null $check  (optional)
     * @param  \SplFileObject|null $file  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userImport'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userImportWithHttpInfo($app_key, $check = null, $file = null, string $contentType = self::contentTypes['userImport'][0])
    {
        $request = $this->userImportRequest($app_key, $check, $file, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userImportAsync
     *
     * 导入用户数据
     *
     * @param  string $app_key (required)
     * @param  bool|null $check  (optional)
     * @param  \SplFileObject|null $file  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userImportAsync($app_key, $check = null, $file = null, string $contentType = self::contentTypes['userImport'][0])
    {
        return $this->userImportAsyncWithHttpInfo($app_key, $check, $file, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userImportAsyncWithHttpInfo
     *
     * 导入用户数据
     *
     * @param  string $app_key (required)
     * @param  bool|null $check  (optional)
     * @param  \SplFileObject|null $file  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userImportAsyncWithHttpInfo($app_key, $check = null, $file = null, string $contentType = self::contentTypes['userImport'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userImportRequest($app_key, $check, $file, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userImport'
     *
     * @param  string $app_key (required)
     * @param  bool|null $check  (optional)
     * @param  \SplFileObject|null $file  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userImport'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userImportRequest($app_key, $check = null, $file = null, string $contentType = self::contentTypes['userImport'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userImport'
            );
        }




        $resourcePath = '/User/{appKey}/Import';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check,
            'check', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }

        // form params
        if ($file !== null) {
            $multipart = true;
            $formParams['file'] = [];
            $paramFiles = is_array($file) ? $file : [$file];
            foreach ($paramFiles as $paramFile) {
                $formParams['file'][] = \GuzzleHttp\Psr7\Utils::tryFopen(
                    ObjectSerializer::toFormValue($paramFile),
                    'rb'
                );
            }
        }

        $multipart = true;
        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userLocation
     *
     * 位置详情
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocation'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userLocation($id, $app_key, string $contentType = self::contentTypes['userLocation'][0])
    {
        list($response) = $this->userLocationWithHttpInfo($id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userLocationWithHttpInfo
     *
     * 位置详情
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocation'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userLocationWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userLocation'][0])
    {
        $request = $this->userLocationRequest($id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userLocationAsync
     *
     * 位置详情
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationAsync($id, $app_key, string $contentType = self::contentTypes['userLocation'][0])
    {
        return $this->userLocationAsyncWithHttpInfo($id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userLocationAsyncWithHttpInfo
     *
     * 位置详情
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationAsyncWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userLocation'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userLocationRequest($id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userLocation'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocation'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userLocationRequest($id, $app_key, string $contentType = self::contentTypes['userLocation'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userLocation'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userLocation'
            );
        }


        $resourcePath = '/User/{appKey}/Location/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userLocationDelete
     *
     * 删除位置
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userLocationDelete($id, $app_key, string $contentType = self::contentTypes['userLocationDelete'][0])
    {
        list($response) = $this->userLocationDeleteWithHttpInfo($id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userLocationDeleteWithHttpInfo
     *
     * 删除位置
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userLocationDeleteWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userLocationDelete'][0])
    {
        $request = $this->userLocationDeleteRequest($id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userLocationDeleteAsync
     *
     * 删除位置
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationDeleteAsync($id, $app_key, string $contentType = self::contentTypes['userLocationDelete'][0])
    {
        return $this->userLocationDeleteAsyncWithHttpInfo($id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userLocationDeleteAsyncWithHttpInfo
     *
     * 删除位置
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationDeleteAsyncWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userLocationDelete'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userLocationDeleteRequest($id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userLocationDelete'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userLocationDeleteRequest($id, $app_key, string $contentType = self::contentTypes['userLocationDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userLocationDelete'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userLocationDelete'
            );
        }


        $resourcePath = '/User/{appKey}/Location/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userLocationPost
     *
     * 添加位置
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userLocationPost($app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPost'][0])
    {
        list($response) = $this->userLocationPostWithHttpInfo($app_key, $geo_location_model, $contentType);
        return $response;
    }

    /**
     * Operation userLocationPostWithHttpInfo
     *
     * 添加位置
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userLocationPostWithHttpInfo($app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPost'][0])
    {
        $request = $this->userLocationPostRequest($app_key, $geo_location_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userLocationPostAsync
     *
     * 添加位置
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationPostAsync($app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPost'][0])
    {
        return $this->userLocationPostAsyncWithHttpInfo($app_key, $geo_location_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userLocationPostAsyncWithHttpInfo
     *
     * 添加位置
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationPostAsyncWithHttpInfo($app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPost'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userLocationPostRequest($app_key, $geo_location_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userLocationPost'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userLocationPostRequest($app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPost'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userLocationPost'
            );
        }



        $resourcePath = '/User/{appKey}/Location';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($geo_location_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($geo_location_model));
            } else {
                $httpBody = $geo_location_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userLocationPut
     *
     * 更新位置
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userLocationPut($id, $app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPut'][0])
    {
        list($response) = $this->userLocationPutWithHttpInfo($id, $app_key, $geo_location_model, $contentType);
        return $response;
    }

    /**
     * Operation userLocationPutWithHttpInfo
     *
     * 更新位置
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userLocationPutWithHttpInfo($id, $app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPut'][0])
    {
        $request = $this->userLocationPutRequest($id, $app_key, $geo_location_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userLocationPutAsync
     *
     * 更新位置
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationPutAsync($id, $app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPut'][0])
    {
        return $this->userLocationPutAsyncWithHttpInfo($id, $app_key, $geo_location_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userLocationPutAsyncWithHttpInfo
     *
     * 更新位置
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationPutAsyncWithHttpInfo($id, $app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userLocationPutRequest($id, $app_key, $geo_location_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userLocationPut'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\GeoLocationModel|null $geo_location_model  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocationPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userLocationPutRequest($id, $app_key, $geo_location_model = null, string $contentType = self::contentTypes['userLocationPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userLocationPut'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userLocationPut'
            );
        }



        $resourcePath = '/User/{appKey}/Location/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($geo_location_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($geo_location_model));
            } else {
                $httpBody = $geo_location_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userLocations
     *
     * 位置列表
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  float|null $x 纬度 (optional)
     * @param  float|null $y 经度 (optional)
     * @param  int|null $sphere 附近距离，单位：米 (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocations'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userLocations($app_key, $tag = null, $type = null, $x = null, $y = null, $sphere = null, $skip = null, $take = 10, string $contentType = self::contentTypes['userLocations'][0])
    {
        list($response) = $this->userLocationsWithHttpInfo($app_key, $tag, $type, $x, $y, $sphere, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userLocationsWithHttpInfo
     *
     * 位置列表
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  float|null $x 纬度 (optional)
     * @param  float|null $y 经度 (optional)
     * @param  int|null $sphere 附近距离，单位：米 (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocations'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userLocationsWithHttpInfo($app_key, $tag = null, $type = null, $x = null, $y = null, $sphere = null, $skip = null, $take = 10, string $contentType = self::contentTypes['userLocations'][0])
    {
        $request = $this->userLocationsRequest($app_key, $tag, $type, $x, $y, $sphere, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userLocationsAsync
     *
     * 位置列表
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  float|null $x 纬度 (optional)
     * @param  float|null $y 经度 (optional)
     * @param  int|null $sphere 附近距离，单位：米 (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationsAsync($app_key, $tag = null, $type = null, $x = null, $y = null, $sphere = null, $skip = null, $take = 10, string $contentType = self::contentTypes['userLocations'][0])
    {
        return $this->userLocationsAsyncWithHttpInfo($app_key, $tag, $type, $x, $y, $sphere, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userLocationsAsyncWithHttpInfo
     *
     * 位置列表
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  float|null $x 纬度 (optional)
     * @param  float|null $y 经度 (optional)
     * @param  int|null $sphere 附近距离，单位：米 (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userLocationsAsyncWithHttpInfo($app_key, $tag = null, $type = null, $x = null, $y = null, $sphere = null, $skip = null, $take = 10, string $contentType = self::contentTypes['userLocations'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userLocationsRequest($app_key, $tag, $type, $x, $y, $sphere, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userLocations'
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $type 分类 (optional)
     * @param  float|null $x 纬度 (optional)
     * @param  float|null $y 经度 (optional)
     * @param  int|null $sphere 附近距离，单位：米 (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userLocations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userLocationsRequest($app_key, $tag = null, $type = null, $x = null, $y = null, $sphere = null, $skip = null, $take = 10, string $contentType = self::contentTypes['userLocations'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userLocations'
            );
        }









        $resourcePath = '/User/{appKey}/Locations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $x,
            'x', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $y,
            'y', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $sphere,
            'sphere', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userMutualFollowers
     *
     * 有共同粉丝的用户推荐
     *
     * @param  string $app_key app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userMutualFollowers($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        list($response) = $this->userMutualFollowersWithHttpInfo($app_key, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userMutualFollowersWithHttpInfo
     *
     * 有共同粉丝的用户推荐
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userMutualFollowersWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        $request = $this->userMutualFollowersRequest($app_key, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userMutualFollowersAsync
     *
     * 有共同粉丝的用户推荐
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowersAsync($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        return $this->userMutualFollowersAsyncWithHttpInfo($app_key, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userMutualFollowersAsyncWithHttpInfo
     *
     * 有共同粉丝的用户推荐
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowersAsyncWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userMutualFollowersRequest($app_key, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userMutualFollowers'
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userMutualFollowersRequest($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userMutualFollowers'
            );
        }




        $resourcePath = '/User/{appKey}/Friends/MutualFollowers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userMutualFollowings
     *
     * 有共同关注的用户推荐
     *
     * @param  string $app_key app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userMutualFollowings($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        list($response) = $this->userMutualFollowingsWithHttpInfo($app_key, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userMutualFollowingsWithHttpInfo
     *
     * 有共同关注的用户推荐
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userMutualFollowingsWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        $request = $this->userMutualFollowingsRequest($app_key, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userMutualFollowingsAsync
     *
     * 有共同关注的用户推荐
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowingsAsync($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        return $this->userMutualFollowingsAsyncWithHttpInfo($app_key, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userMutualFollowingsAsyncWithHttpInfo
     *
     * 有共同关注的用户推荐
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowingsAsyncWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userMutualFollowingsRequest($app_key, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userMutualFollowings'
     *
     * @param  string $app_key (required)
     * @param  int|null $skip  (optional, default to 0)
     * @param  int|null $take  (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userMutualFollowingsRequest($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userMutualFollowings'
            );
        }




        $resourcePath = '/User/{appKey}/Friends/MutualFollowings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userOAuthAccountBind
     *
     * 外部账号 绑定
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountBindRequest|null $o_auth_account_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountBind'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userOAuthAccountBind($app_key, $o_auth_account_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountBind'][0])
    {
        list($response) = $this->userOAuthAccountBindWithHttpInfo($app_key, $o_auth_account_bind_request, $contentType);
        return $response;
    }

    /**
     * Operation userOAuthAccountBindWithHttpInfo
     *
     * 外部账号 绑定
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountBindRequest|null $o_auth_account_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountBind'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userOAuthAccountBindWithHttpInfo($app_key, $o_auth_account_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountBind'][0])
    {
        $request = $this->userOAuthAccountBindRequest($app_key, $o_auth_account_bind_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userOAuthAccountBindAsync
     *
     * 外部账号 绑定
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountBindRequest|null $o_auth_account_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountBindAsync($app_key, $o_auth_account_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountBind'][0])
    {
        return $this->userOAuthAccountBindAsyncWithHttpInfo($app_key, $o_auth_account_bind_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userOAuthAccountBindAsyncWithHttpInfo
     *
     * 外部账号 绑定
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountBindRequest|null $o_auth_account_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountBindAsyncWithHttpInfo($app_key, $o_auth_account_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountBind'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userOAuthAccountBindRequest($app_key, $o_auth_account_bind_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userOAuthAccountBind'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountBindRequest|null $o_auth_account_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userOAuthAccountBindRequest($app_key, $o_auth_account_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountBind'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userOAuthAccountBind'
            );
        }



        $resourcePath = '/User/{appKey}/OAuthAccountBind';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($o_auth_account_bind_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($o_auth_account_bind_request));
            } else {
                $httpBody = $o_auth_account_bind_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userOAuthAccountSignIn
     *
     * 外部账号 登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountSignInRequest|null $o_auth_account_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userOAuthAccountSignIn($app_key, $o_auth_account_sign_in_request = null, string $contentType = self::contentTypes['userOAuthAccountSignIn'][0])
    {
        list($response) = $this->userOAuthAccountSignInWithHttpInfo($app_key, $o_auth_account_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userOAuthAccountSignInWithHttpInfo
     *
     * 外部账号 登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountSignInRequest|null $o_auth_account_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userOAuthAccountSignInWithHttpInfo($app_key, $o_auth_account_sign_in_request = null, string $contentType = self::contentTypes['userOAuthAccountSignIn'][0])
    {
        $request = $this->userOAuthAccountSignInRequest($app_key, $o_auth_account_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userOAuthAccountSignInAsync
     *
     * 外部账号 登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountSignInRequest|null $o_auth_account_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountSignInAsync($app_key, $o_auth_account_sign_in_request = null, string $contentType = self::contentTypes['userOAuthAccountSignIn'][0])
    {
        return $this->userOAuthAccountSignInAsyncWithHttpInfo($app_key, $o_auth_account_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userOAuthAccountSignInAsyncWithHttpInfo
     *
     * 外部账号 登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountSignInRequest|null $o_auth_account_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountSignInAsyncWithHttpInfo($app_key, $o_auth_account_sign_in_request = null, string $contentType = self::contentTypes['userOAuthAccountSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userOAuthAccountSignInRequest($app_key, $o_auth_account_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userOAuthAccountSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountSignInRequest|null $o_auth_account_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userOAuthAccountSignInRequest($app_key, $o_auth_account_sign_in_request = null, string $contentType = self::contentTypes['userOAuthAccountSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userOAuthAccountSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/OAuthAccountSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($o_auth_account_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($o_auth_account_sign_in_request));
            } else {
                $httpBody = $o_auth_account_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userOAuthAccounts
     *
     * 外部账号 绑定列表
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccounts'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userOAuthAccounts($app_key, string $contentType = self::contentTypes['userOAuthAccounts'][0])
    {
        list($response) = $this->userOAuthAccountsWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userOAuthAccountsWithHttpInfo
     *
     * 外部账号 绑定列表
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccounts'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userOAuthAccountsWithHttpInfo($app_key, string $contentType = self::contentTypes['userOAuthAccounts'][0])
    {
        $request = $this->userOAuthAccountsRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userOAuthAccountsAsync
     *
     * 外部账号 绑定列表
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountsAsync($app_key, string $contentType = self::contentTypes['userOAuthAccounts'][0])
    {
        return $this->userOAuthAccountsAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userOAuthAccountsAsyncWithHttpInfo
     *
     * 外部账号 绑定列表
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountsAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userOAuthAccounts'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userOAuthAccountsRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userOAuthAccounts'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccounts'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userOAuthAccountsRequest($app_key, string $contentType = self::contentTypes['userOAuthAccounts'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userOAuthAccounts'
            );
        }


        $resourcePath = '/User/{appKey}/OAuthAccounts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userOAuthAccountsPutBind
     *
     * 外部账号 更新绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountPutBindRequest|null $o_auth_account_put_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsPutBind'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userOAuthAccountsPutBind($id, $app_key, $o_auth_account_put_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountsPutBind'][0])
    {
        list($response) = $this->userOAuthAccountsPutBindWithHttpInfo($id, $app_key, $o_auth_account_put_bind_request, $contentType);
        return $response;
    }

    /**
     * Operation userOAuthAccountsPutBindWithHttpInfo
     *
     * 外部账号 更新绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountPutBindRequest|null $o_auth_account_put_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsPutBind'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userOAuthAccountsPutBindWithHttpInfo($id, $app_key, $o_auth_account_put_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountsPutBind'][0])
    {
        $request = $this->userOAuthAccountsPutBindRequest($id, $app_key, $o_auth_account_put_bind_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userOAuthAccountsPutBindAsync
     *
     * 外部账号 更新绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountPutBindRequest|null $o_auth_account_put_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsPutBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountsPutBindAsync($id, $app_key, $o_auth_account_put_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountsPutBind'][0])
    {
        return $this->userOAuthAccountsPutBindAsyncWithHttpInfo($id, $app_key, $o_auth_account_put_bind_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userOAuthAccountsPutBindAsyncWithHttpInfo
     *
     * 外部账号 更新绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountPutBindRequest|null $o_auth_account_put_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsPutBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountsPutBindAsyncWithHttpInfo($id, $app_key, $o_auth_account_put_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountsPutBind'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userOAuthAccountsPutBindRequest($id, $app_key, $o_auth_account_put_bind_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userOAuthAccountsPutBind'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\OAuthAccountPutBindRequest|null $o_auth_account_put_bind_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsPutBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userOAuthAccountsPutBindRequest($id, $app_key, $o_auth_account_put_bind_request = null, string $contentType = self::contentTypes['userOAuthAccountsPutBind'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userOAuthAccountsPutBind'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userOAuthAccountsPutBind'
            );
        }



        $resourcePath = '/User/{appKey}/OAuthAccounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($o_auth_account_put_bind_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($o_auth_account_put_bind_request));
            } else {
                $httpBody = $o_auth_account_put_bind_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userOAuthAccountsUnBind
     *
     * 外部账号 删除绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsUnBind'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userOAuthAccountsUnBind($id, $app_key, string $contentType = self::contentTypes['userOAuthAccountsUnBind'][0])
    {
        list($response) = $this->userOAuthAccountsUnBindWithHttpInfo($id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userOAuthAccountsUnBindWithHttpInfo
     *
     * 外部账号 删除绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsUnBind'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userOAuthAccountsUnBindWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userOAuthAccountsUnBind'][0])
    {
        $request = $this->userOAuthAccountsUnBindRequest($id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userOAuthAccountsUnBindAsync
     *
     * 外部账号 删除绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsUnBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountsUnBindAsync($id, $app_key, string $contentType = self::contentTypes['userOAuthAccountsUnBind'][0])
    {
        return $this->userOAuthAccountsUnBindAsyncWithHttpInfo($id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userOAuthAccountsUnBindAsyncWithHttpInfo
     *
     * 外部账号 删除绑定
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsUnBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userOAuthAccountsUnBindAsyncWithHttpInfo($id, $app_key, string $contentType = self::contentTypes['userOAuthAccountsUnBind'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userOAuthAccountsUnBindRequest($id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userOAuthAccountsUnBind'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userOAuthAccountsUnBind'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userOAuthAccountsUnBindRequest($id, $app_key, string $contentType = self::contentTypes['userOAuthAccountsUnBind'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userOAuthAccountsUnBind'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userOAuthAccountsUnBind'
            );
        }


        $resourcePath = '/User/{appKey}/OAuthAccounts/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userPhoneSignIn
     *
     * 手机登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userPhoneSignIn($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        list($response) = $this->userPhoneSignInWithHttpInfo($app_key, $phone_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userPhoneSignInWithHttpInfo
     *
     * 手机登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPhoneSignInWithHttpInfo($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        $request = $this->userPhoneSignInRequest($app_key, $phone_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userPhoneSignInAsync
     *
     * 手机登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignInAsync($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        return $this->userPhoneSignInAsyncWithHttpInfo($app_key, $phone_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userPhoneSignInAsyncWithHttpInfo
     *
     * 手机登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignInAsyncWithHttpInfo($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userPhoneSignInRequest($app_key, $phone_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userPhoneSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userPhoneSignInRequest($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userPhoneSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/PhoneSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_sign_in_request));
            } else {
                $httpBody = $phone_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userPhoneSignUp
     *
     * 手机注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userPhoneSignUp($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        list($response) = $this->userPhoneSignUpWithHttpInfo($app_key, $phone_sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userPhoneSignUpWithHttpInfo
     *
     * 手机注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPhoneSignUpWithHttpInfo($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        $request = $this->userPhoneSignUpRequest($app_key, $phone_sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userPhoneSignUpAsync
     *
     * 手机注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignUpAsync($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        return $this->userPhoneSignUpAsyncWithHttpInfo($app_key, $phone_sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userPhoneSignUpAsyncWithHttpInfo
     *
     * 手机注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignUpAsyncWithHttpInfo($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userPhoneSignUpRequest($app_key, $phone_sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userPhoneSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userPhoneSignUpRequest($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userPhoneSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/PhoneSignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_sign_up_request));
            } else {
                $httpBody = $phone_sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userProfile
     *
     * 获取个人资料
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userProfile($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        list($response) = $this->userProfileWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userProfileWithHttpInfo
     *
     * 获取个人资料
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userProfileWithHttpInfo($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        $request = $this->userProfileRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userProfileAsync
     *
     * 获取个人资料
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userProfileAsync($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        return $this->userProfileAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userProfileAsyncWithHttpInfo
     *
     * 获取个人资料
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userProfileAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userProfileRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userProfile'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userProfileRequest($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userProfile'
            );
        }


        $resourcePath = '/User/{appKey}/Profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userPut
     *
     * 更新用户
     *
     * @param  int $id  (required)
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\User|null $user  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userPut($id, $app_key, $user = null, string $contentType = self::contentTypes['userPut'][0])
    {
        list($response) = $this->userPutWithHttpInfo($id, $app_key, $user, $contentType);
        return $response;
    }

    /**
     * Operation userPutWithHttpInfo
     *
     * 更新用户
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\User|null $user  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPutWithHttpInfo($id, $app_key, $user = null, string $contentType = self::contentTypes['userPut'][0])
    {
        $request = $this->userPutRequest($id, $app_key, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userPutAsync
     *
     * 更新用户
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\User|null $user  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPutAsync($id, $app_key, $user = null, string $contentType = self::contentTypes['userPut'][0])
    {
        return $this->userPutAsyncWithHttpInfo($id, $app_key, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userPutAsyncWithHttpInfo
     *
     * 更新用户
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\User|null $user  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPutAsyncWithHttpInfo($id, $app_key, $user = null, string $contentType = self::contentTypes['userPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userPutRequest($id, $app_key, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userPut'
     *
     * @param  int $id  (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\User|null $user  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userPutRequest($id, $app_key, $user = null, string $contentType = self::contentTypes['userPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userPut'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userPut'
            );
        }



        $resourcePath = '/User/{appKey}/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($user)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($user));
            } else {
                $httpBody = $user;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userQRCodePreSignIn
     *
     * 微信小程序 - 预登陆
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodePreSignInRequest|null $qr_code_pre_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodePreSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userQRCodePreSignIn($app_key, $qr_code_pre_sign_in_request = null, string $contentType = self::contentTypes['userQRCodePreSignIn'][0])
    {
        list($response) = $this->userQRCodePreSignInWithHttpInfo($app_key, $qr_code_pre_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userQRCodePreSignInWithHttpInfo
     *
     * 微信小程序 - 预登陆
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodePreSignInRequest|null $qr_code_pre_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodePreSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userQRCodePreSignInWithHttpInfo($app_key, $qr_code_pre_sign_in_request = null, string $contentType = self::contentTypes['userQRCodePreSignIn'][0])
    {
        $request = $this->userQRCodePreSignInRequest($app_key, $qr_code_pre_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userQRCodePreSignInAsync
     *
     * 微信小程序 - 预登陆
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodePreSignInRequest|null $qr_code_pre_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodePreSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodePreSignInAsync($app_key, $qr_code_pre_sign_in_request = null, string $contentType = self::contentTypes['userQRCodePreSignIn'][0])
    {
        return $this->userQRCodePreSignInAsyncWithHttpInfo($app_key, $qr_code_pre_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userQRCodePreSignInAsyncWithHttpInfo
     *
     * 微信小程序 - 预登陆
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodePreSignInRequest|null $qr_code_pre_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodePreSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodePreSignInAsyncWithHttpInfo($app_key, $qr_code_pre_sign_in_request = null, string $contentType = self::contentTypes['userQRCodePreSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userQRCodePreSignInRequest($app_key, $qr_code_pre_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userQRCodePreSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodePreSignInRequest|null $qr_code_pre_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodePreSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userQRCodePreSignInRequest($app_key, $qr_code_pre_sign_in_request = null, string $contentType = self::contentTypes['userQRCodePreSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userQRCodePreSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/QRCodePreSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($qr_code_pre_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($qr_code_pre_sign_in_request));
            } else {
                $httpBody = $qr_code_pre_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userQRCodeScan
     *
     * 微信小程序 - 扫码
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeScanRequest|null $qr_code_scan_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeScan'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userQRCodeScan($app_key, $qr_code_scan_request = null, string $contentType = self::contentTypes['userQRCodeScan'][0])
    {
        list($response) = $this->userQRCodeScanWithHttpInfo($app_key, $qr_code_scan_request, $contentType);
        return $response;
    }

    /**
     * Operation userQRCodeScanWithHttpInfo
     *
     * 微信小程序 - 扫码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeScanRequest|null $qr_code_scan_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeScan'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userQRCodeScanWithHttpInfo($app_key, $qr_code_scan_request = null, string $contentType = self::contentTypes['userQRCodeScan'][0])
    {
        $request = $this->userQRCodeScanRequest($app_key, $qr_code_scan_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userQRCodeScanAsync
     *
     * 微信小程序 - 扫码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeScanRequest|null $qr_code_scan_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeScan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodeScanAsync($app_key, $qr_code_scan_request = null, string $contentType = self::contentTypes['userQRCodeScan'][0])
    {
        return $this->userQRCodeScanAsyncWithHttpInfo($app_key, $qr_code_scan_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userQRCodeScanAsyncWithHttpInfo
     *
     * 微信小程序 - 扫码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeScanRequest|null $qr_code_scan_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeScan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodeScanAsyncWithHttpInfo($app_key, $qr_code_scan_request = null, string $contentType = self::contentTypes['userQRCodeScan'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userQRCodeScanRequest($app_key, $qr_code_scan_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userQRCodeScan'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeScanRequest|null $qr_code_scan_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeScan'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userQRCodeScanRequest($app_key, $qr_code_scan_request = null, string $contentType = self::contentTypes['userQRCodeScan'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userQRCodeScan'
            );
        }



        $resourcePath = '/User/{appKey}/QRCodeScan';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($qr_code_scan_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($qr_code_scan_request));
            } else {
                $httpBody = $qr_code_scan_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userQRCodeSignIn
     *
     * 微信小程序 - 网页登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignInRequest|null $qr_code_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userQRCodeSignIn($app_key, $qr_code_sign_in_request = null, string $contentType = self::contentTypes['userQRCodeSignIn'][0])
    {
        list($response) = $this->userQRCodeSignInWithHttpInfo($app_key, $qr_code_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userQRCodeSignInWithHttpInfo
     *
     * 微信小程序 - 网页登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignInRequest|null $qr_code_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userQRCodeSignInWithHttpInfo($app_key, $qr_code_sign_in_request = null, string $contentType = self::contentTypes['userQRCodeSignIn'][0])
    {
        $request = $this->userQRCodeSignInRequest($app_key, $qr_code_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userQRCodeSignInAsync
     *
     * 微信小程序 - 网页登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignInRequest|null $qr_code_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodeSignInAsync($app_key, $qr_code_sign_in_request = null, string $contentType = self::contentTypes['userQRCodeSignIn'][0])
    {
        return $this->userQRCodeSignInAsyncWithHttpInfo($app_key, $qr_code_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userQRCodeSignInAsyncWithHttpInfo
     *
     * 微信小程序 - 网页登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignInRequest|null $qr_code_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodeSignInAsyncWithHttpInfo($app_key, $qr_code_sign_in_request = null, string $contentType = self::contentTypes['userQRCodeSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userQRCodeSignInRequest($app_key, $qr_code_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userQRCodeSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignInRequest|null $qr_code_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userQRCodeSignInRequest($app_key, $qr_code_sign_in_request = null, string $contentType = self::contentTypes['userQRCodeSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userQRCodeSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/QRCodeSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($qr_code_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($qr_code_sign_in_request));
            } else {
                $httpBody = $qr_code_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userQRCodeSignUp
     *
     * 微信小程序 - 注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignUpRequest|null $qr_code_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userQRCodeSignUp($app_key, $qr_code_sign_up_request = null, string $contentType = self::contentTypes['userQRCodeSignUp'][0])
    {
        list($response) = $this->userQRCodeSignUpWithHttpInfo($app_key, $qr_code_sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userQRCodeSignUpWithHttpInfo
     *
     * 微信小程序 - 注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignUpRequest|null $qr_code_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userQRCodeSignUpWithHttpInfo($app_key, $qr_code_sign_up_request = null, string $contentType = self::contentTypes['userQRCodeSignUp'][0])
    {
        $request = $this->userQRCodeSignUpRequest($app_key, $qr_code_sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userQRCodeSignUpAsync
     *
     * 微信小程序 - 注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignUpRequest|null $qr_code_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodeSignUpAsync($app_key, $qr_code_sign_up_request = null, string $contentType = self::contentTypes['userQRCodeSignUp'][0])
    {
        return $this->userQRCodeSignUpAsyncWithHttpInfo($app_key, $qr_code_sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userQRCodeSignUpAsyncWithHttpInfo
     *
     * 微信小程序 - 注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignUpRequest|null $qr_code_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userQRCodeSignUpAsyncWithHttpInfo($app_key, $qr_code_sign_up_request = null, string $contentType = self::contentTypes['userQRCodeSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userQRCodeSignUpRequest($app_key, $qr_code_sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userQRCodeSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\QRCodeSignUpRequest|null $qr_code_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userQRCodeSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userQRCodeSignUpRequest($app_key, $qr_code_sign_up_request = null, string $contentType = self::contentTypes['userQRCodeSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userQRCodeSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/QRCodeSignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($qr_code_sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($qr_code_sign_up_request));
            } else {
                $httpBody = $qr_code_sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userResetPwd
     *
     * 重置密码
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userResetPwd($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        list($response) = $this->userResetPwdWithHttpInfo($app_key, $app_user_reset_pwd_request, $contentType);
        return $response;
    }

    /**
     * Operation userResetPwdWithHttpInfo
     *
     * 重置密码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userResetPwdWithHttpInfo($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        $request = $this->userResetPwdRequest($app_key, $app_user_reset_pwd_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userResetPwdAsync
     *
     * 重置密码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetPwdAsync($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        return $this->userResetPwdAsyncWithHttpInfo($app_key, $app_user_reset_pwd_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userResetPwdAsyncWithHttpInfo
     *
     * 重置密码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetPwdAsyncWithHttpInfo($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userResetPwdRequest($app_key, $app_user_reset_pwd_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userResetPwd'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userResetPwdRequest($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userResetPwd'
            );
        }



        $resourcePath = '/User/{appKey}/ResetPwd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($app_user_reset_pwd_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($app_user_reset_pwd_request));
            } else {
                $httpBody = $app_user_reset_pwd_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSendEmailCode
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userSendEmailCode($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        list($response) = $this->userSendEmailCodeWithHttpInfo($app_key, $send_email_code_request, $contentType);
        return $response;
    }

    /**
     * Operation userSendEmailCodeWithHttpInfo
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSendEmailCodeWithHttpInfo($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        $request = $this->userSendEmailCodeRequest($app_key, $send_email_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSendEmailCodeAsync
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendEmailCodeAsync($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        return $this->userSendEmailCodeAsyncWithHttpInfo($app_key, $send_email_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSendEmailCodeAsyncWithHttpInfo
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendEmailCodeAsyncWithHttpInfo($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userSendEmailCodeRequest($app_key, $send_email_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSendEmailCode'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSendEmailCodeRequest($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSendEmailCode'
            );
        }



        $resourcePath = '/User/{appKey}/SendEmailCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_email_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_email_code_request));
            } else {
                $httpBody = $send_email_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSendSMSCode
     *
     * 发送手机验证码
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userSendSMSCode($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        list($response) = $this->userSendSMSCodeWithHttpInfo($app_key, $send_sms_code_request, $contentType);
        return $response;
    }

    /**
     * Operation userSendSMSCodeWithHttpInfo
     *
     * 发送手机验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSendSMSCodeWithHttpInfo($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        $request = $this->userSendSMSCodeRequest($app_key, $send_sms_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSendSMSCodeAsync
     *
     * 发送手机验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendSMSCodeAsync($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        return $this->userSendSMSCodeAsyncWithHttpInfo($app_key, $send_sms_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSendSMSCodeAsyncWithHttpInfo
     *
     * 发送手机验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendSMSCodeAsyncWithHttpInfo($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userSendSMSCodeRequest($app_key, $send_sms_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSendSMSCode'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSendSMSCodeRequest($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSendSMSCode'
            );
        }



        $resourcePath = '/User/{appKey}/SendSMSCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_sms_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_sms_code_request));
            } else {
                $httpBody = $send_sms_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSignIn
     *
     * 账号密码 登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userSignIn($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        list($response) = $this->userSignInWithHttpInfo($app_key, $sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userSignInWithHttpInfo
     *
     * 账号密码 登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSignInWithHttpInfo($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        $request = $this->userSignInRequest($app_key, $sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSignInAsync
     *
     * 账号密码 登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignInAsync($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        return $this->userSignInAsyncWithHttpInfo($app_key, $sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSignInAsyncWithHttpInfo
     *
     * 账号密码 登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignInAsyncWithHttpInfo($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userSignInRequest($app_key, $sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSignInRequest($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/SignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sign_in_request));
            } else {
                $httpBody = $sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSignUp
     *
     * 账号密码 注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userSignUp($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        list($response) = $this->userSignUpWithHttpInfo($app_key, $sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userSignUpWithHttpInfo
     *
     * 账号密码 注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSignUpWithHttpInfo($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        $request = $this->userSignUpRequest($app_key, $sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSignUpAsync
     *
     * 账号密码 注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignUpAsync($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        return $this->userSignUpAsyncWithHttpInfo($app_key, $sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSignUpAsyncWithHttpInfo
     *
     * 账号密码 注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignUpAsyncWithHttpInfo($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userSignUpRequest($app_key, $sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSignUpRequest($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/SignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sign_up_request));
            } else {
                $httpBody = $sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userTwoFactorAuth
     *
     * 双因素验证
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userTwoFactorAuth($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        list($response) = $this->userTwoFactorAuthWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userTwoFactorAuthWithHttpInfo
     *
     * 双因素验证
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userTwoFactorAuthWithHttpInfo($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        $request = $this->userTwoFactorAuthRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userTwoFactorAuthAsync
     *
     * 双因素验证
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userTwoFactorAuthAsync($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        return $this->userTwoFactorAuthAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userTwoFactorAuthAsyncWithHttpInfo
     *
     * 双因素验证
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userTwoFactorAuthAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userTwoFactorAuthRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userTwoFactorAuth'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userTwoFactorAuthRequest($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userTwoFactorAuth'
            );
        }


        $resourcePath = '/User/{appKey}/TwoFactorAuth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUnfollowUser
     *
     * 取消关注
     *
     * @param  int $user_id  (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userUnfollowUser($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        list($response) = $this->userUnfollowUserWithHttpInfo($user_id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userUnfollowUserWithHttpInfo
     *
     * 取消关注
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUnfollowUserWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        $request = $this->userUnfollowUserRequest($user_id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUnfollowUserAsync
     *
     * 取消关注
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnfollowUserAsync($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        return $this->userUnfollowUserAsyncWithHttpInfo($user_id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUnfollowUserAsyncWithHttpInfo
     *
     * 取消关注
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnfollowUserAsyncWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userUnfollowUserRequest($user_id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUnfollowUser'
     *
     * @param  int $user_id  (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUnfollowUserRequest($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userUnfollowUser'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUnfollowUser'
            );
        }


        $resourcePath = '/User/{appKey}/Follower/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUnionIDSignIn
     *
     * UnionID登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userUnionIDSignIn($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        list($response) = $this->userUnionIDSignInWithHttpInfo($app_key, $union_id_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userUnionIDSignInWithHttpInfo
     *
     * UnionID登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUnionIDSignInWithHttpInfo($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        $request = $this->userUnionIDSignInRequest($app_key, $union_id_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUnionIDSignInAsync
     *
     * UnionID登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignInAsync($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        return $this->userUnionIDSignInAsyncWithHttpInfo($app_key, $union_id_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUnionIDSignInAsyncWithHttpInfo
     *
     * UnionID登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignInAsyncWithHttpInfo($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userUnionIDSignInRequest($app_key, $union_id_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUnionIDSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUnionIDSignInRequest($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUnionIDSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/UnionIDSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($union_id_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($union_id_sign_in_request));
            } else {
                $httpBody = $union_id_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUnionIDSignUp
     *
     * UnionID注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userUnionIDSignUp($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        list($response) = $this->userUnionIDSignUpWithHttpInfo($app_key, $union_id_sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userUnionIDSignUpWithHttpInfo
     *
     * UnionID注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUnionIDSignUpWithHttpInfo($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        $request = $this->userUnionIDSignUpRequest($app_key, $union_id_sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUnionIDSignUpAsync
     *
     * UnionID注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignUpAsync($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        return $this->userUnionIDSignUpAsyncWithHttpInfo($app_key, $union_id_sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUnionIDSignUpAsyncWithHttpInfo
     *
     * UnionID注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignUpAsyncWithHttpInfo($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userUnionIDSignUpRequest($app_key, $union_id_sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUnionIDSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUnionIDSignUpRequest($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUnionIDSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/UnionIDSignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($union_id_sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($union_id_sign_up_request));
            } else {
                $httpBody = $union_id_sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUpdateProfile
     *
     * 更新个人资料
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function userUpdateProfile($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        list($response) = $this->userUpdateProfileWithHttpInfo($app_key, $update_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation userUpdateProfileWithHttpInfo
     *
     * 更新个人资料
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUpdateProfileWithHttpInfo($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        $request = $this->userUpdateProfileRequest($app_key, $update_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUpdateProfileAsync
     *
     * 更新个人资料
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateProfileAsync($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        return $this->userUpdateProfileAsyncWithHttpInfo($app_key, $update_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUpdateProfileAsyncWithHttpInfo
     *
     * 更新个人资料
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateProfileAsyncWithHttpInfo($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->userUpdateProfileRequest($app_key, $update_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUpdateProfile'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUpdateProfileRequest($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUpdateProfile'
            );
        }



        $resourcePath = '/User/{appKey}/Profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_profile_request));
            } else {
                $httpBody = $update_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation users
     *
     * 用户列表
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $user_name  (optional)
     * @param  string|null $email  (optional)
     * @param  string|null $phone  (optional)
     * @param  string|null $platform  (optional)
     * @param  string|null $union_id  (optional)
     * @param  string|null $role  (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['users'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult
     */
    public function users($app_key, $user_name = null, $email = null, $phone = null, $platform = null, $union_id = null, $role = null, $skip = null, $take = null, string $contentType = self::contentTypes['users'][0])
    {
        list($response) = $this->usersWithHttpInfo($app_key, $user_name, $email, $phone, $platform, $union_id, $role, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation usersWithHttpInfo
     *
     * 用户列表
     *
     * @param  string $app_key (required)
     * @param  string|null $user_name  (optional)
     * @param  string|null $email  (optional)
     * @param  string|null $phone  (optional)
     * @param  string|null $platform  (optional)
     * @param  string|null $union_id  (optional)
     * @param  string|null $role  (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['users'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\JObjectApiResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function usersWithHttpInfo($app_key, $user_name = null, $email = null, $phone = null, $platform = null, $union_id = null, $role = null, $skip = null, $take = null, string $contentType = self::contentTypes['users'][0])
    {
        $request = $this->usersRequest($app_key, $user_name, $email, $phone, $platform, $union_id, $role, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation usersAsync
     *
     * 用户列表
     *
     * @param  string $app_key (required)
     * @param  string|null $user_name  (optional)
     * @param  string|null $email  (optional)
     * @param  string|null $phone  (optional)
     * @param  string|null $platform  (optional)
     * @param  string|null $union_id  (optional)
     * @param  string|null $role  (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['users'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAsync($app_key, $user_name = null, $email = null, $phone = null, $platform = null, $union_id = null, $role = null, $skip = null, $take = null, string $contentType = self::contentTypes['users'][0])
    {
        return $this->usersAsyncWithHttpInfo($app_key, $user_name, $email, $phone, $platform, $union_id, $role, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation usersAsyncWithHttpInfo
     *
     * 用户列表
     *
     * @param  string $app_key (required)
     * @param  string|null $user_name  (optional)
     * @param  string|null $email  (optional)
     * @param  string|null $phone  (optional)
     * @param  string|null $platform  (optional)
     * @param  string|null $union_id  (optional)
     * @param  string|null $role  (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['users'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function usersAsyncWithHttpInfo($app_key, $user_name = null, $email = null, $phone = null, $platform = null, $union_id = null, $role = null, $skip = null, $take = null, string $contentType = self::contentTypes['users'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\JObjectApiResult';
        $request = $this->usersRequest($app_key, $user_name, $email, $phone, $platform, $union_id, $role, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'users'
     *
     * @param  string $app_key (required)
     * @param  string|null $user_name  (optional)
     * @param  string|null $email  (optional)
     * @param  string|null $phone  (optional)
     * @param  string|null $platform  (optional)
     * @param  string|null $union_id  (optional)
     * @param  string|null $role  (optional)
     * @param  int|null $skip  (optional)
     * @param  int|null $take  (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['users'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function usersRequest($app_key, $user_name = null, $email = null, $phone = null, $platform = null, $union_id = null, $role = null, $skip = null, $take = null, string $contentType = self::contentTypes['users'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling users'
            );
        }










        $resourcePath = '/User/{appKey}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user_name,
            'userName', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $email,
            'email', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $phone,
            'phone', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $platform,
            'platform', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $union_id,
            'unionId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $role,
            'role', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
