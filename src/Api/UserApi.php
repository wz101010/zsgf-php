<?php
/**
 * UserApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ZSGF\Client\ApiException;
use ZSGF\Client\Configuration;
use ZSGF\Client\HeaderSelector;
use ZSGF\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'userDeactivateHard' => [
            'application/json',
        ],
        'userEmailSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userEmailSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userPhoneSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userPhoneSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userProfile' => [
            'application/json',
        ],
        'userResetEmail' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userResetPhone' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userResetPwd' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSendEmailCode' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSendSMSCode' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userTwoFactorAuth' => [
            'application/json',
        ],
        'userUnionIDSignIn' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userUnionIDSignUp' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userUpdateProfile' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation userDeactivateHard
     *
     * 注销账号
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDeactivateHard'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userDeactivateHard($app_key, string $contentType = self::contentTypes['userDeactivateHard'][0])
    {
        list($response) = $this->userDeactivateHardWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userDeactivateHardWithHttpInfo
     *
     * 注销账号
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDeactivateHard'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDeactivateHardWithHttpInfo($app_key, string $contentType = self::contentTypes['userDeactivateHard'][0])
    {
        $request = $this->userDeactivateHardRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDeactivateHardAsync
     *
     * 注销账号
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDeactivateHard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeactivateHardAsync($app_key, string $contentType = self::contentTypes['userDeactivateHard'][0])
    {
        return $this->userDeactivateHardAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDeactivateHardAsyncWithHttpInfo
     *
     * 注销账号
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDeactivateHard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDeactivateHardAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userDeactivateHard'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userDeactivateHardRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDeactivateHard'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userDeactivateHard'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userDeactivateHardRequest($app_key, string $contentType = self::contentTypes['userDeactivateHard'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userDeactivateHard'
            );
        }


        $resourcePath = '/User/{appKey}/DeactivateHard';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userEmailSignIn
     *
     * 邮箱登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userEmailSignIn($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        list($response) = $this->userEmailSignInWithHttpInfo($app_key, $email_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userEmailSignInWithHttpInfo
     *
     * 邮箱登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userEmailSignInWithHttpInfo($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        $request = $this->userEmailSignInRequest($app_key, $email_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userEmailSignInAsync
     *
     * 邮箱登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignInAsync($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        return $this->userEmailSignInAsyncWithHttpInfo($app_key, $email_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userEmailSignInAsyncWithHttpInfo
     *
     * 邮箱登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignInAsyncWithHttpInfo($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userEmailSignInRequest($app_key, $email_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userEmailSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignInRequest|null $email_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userEmailSignInRequest($app_key, $email_sign_in_request = null, string $contentType = self::contentTypes['userEmailSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userEmailSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/EmailSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email_sign_in_request));
            } else {
                $httpBody = $email_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userEmailSignUp
     *
     * 邮箱注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userEmailSignUp($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        list($response) = $this->userEmailSignUpWithHttpInfo($app_key, $email_sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userEmailSignUpWithHttpInfo
     *
     * 邮箱注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userEmailSignUpWithHttpInfo($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        $request = $this->userEmailSignUpRequest($app_key, $email_sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userEmailSignUpAsync
     *
     * 邮箱注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignUpAsync($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        return $this->userEmailSignUpAsyncWithHttpInfo($app_key, $email_sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userEmailSignUpAsyncWithHttpInfo
     *
     * 邮箱注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userEmailSignUpAsyncWithHttpInfo($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userEmailSignUpRequest($app_key, $email_sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userEmailSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\EmailSignUpRequest|null $email_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userEmailSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userEmailSignUpRequest($app_key, $email_sign_up_request = null, string $contentType = self::contentTypes['userEmailSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userEmailSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/EmailSignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($email_sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($email_sign_up_request));
            } else {
                $httpBody = $email_sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userPhoneSignIn
     *
     * 手机登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userPhoneSignIn($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        list($response) = $this->userPhoneSignInWithHttpInfo($app_key, $phone_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userPhoneSignInWithHttpInfo
     *
     * 手机登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPhoneSignInWithHttpInfo($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        $request = $this->userPhoneSignInRequest($app_key, $phone_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userPhoneSignInAsync
     *
     * 手机登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignInAsync($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        return $this->userPhoneSignInAsyncWithHttpInfo($app_key, $phone_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userPhoneSignInAsyncWithHttpInfo
     *
     * 手机登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignInAsyncWithHttpInfo($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userPhoneSignInRequest($app_key, $phone_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userPhoneSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignInRequest|null $phone_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userPhoneSignInRequest($app_key, $phone_sign_in_request = null, string $contentType = self::contentTypes['userPhoneSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userPhoneSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/PhoneSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_sign_in_request));
            } else {
                $httpBody = $phone_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userPhoneSignUp
     *
     * 手机注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userPhoneSignUp($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        list($response) = $this->userPhoneSignUpWithHttpInfo($app_key, $phone_sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userPhoneSignUpWithHttpInfo
     *
     * 手机注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userPhoneSignUpWithHttpInfo($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        $request = $this->userPhoneSignUpRequest($app_key, $phone_sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userPhoneSignUpAsync
     *
     * 手机注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignUpAsync($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        return $this->userPhoneSignUpAsyncWithHttpInfo($app_key, $phone_sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userPhoneSignUpAsyncWithHttpInfo
     *
     * 手机注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userPhoneSignUpAsyncWithHttpInfo($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userPhoneSignUpRequest($app_key, $phone_sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userPhoneSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\PhoneSignUpRequest|null $phone_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userPhoneSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userPhoneSignUpRequest($app_key, $phone_sign_up_request = null, string $contentType = self::contentTypes['userPhoneSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userPhoneSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/PhoneSignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_sign_up_request));
            } else {
                $httpBody = $phone_sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userProfile
     *
     * 获取个人资料
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse
     */
    public function userProfile($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        list($response) = $this->userProfileWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userProfileWithHttpInfo
     *
     * 获取个人资料
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userProfileWithHttpInfo($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        $request = $this->userProfileRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userProfileAsync
     *
     * 获取个人资料
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userProfileAsync($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        return $this->userProfileAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userProfileAsyncWithHttpInfo
     *
     * 获取个人资料
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userProfileAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserProfileResultApiResponse';
        $request = $this->userProfileRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userProfile'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userProfileRequest($app_key, string $contentType = self::contentTypes['userProfile'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userProfile'
            );
        }


        $resourcePath = '/User/{appKey}/Profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userResetEmail
     *
     * 重置邮箱
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetEmailRequest|null $app_user_reset_email_request 重置邮箱的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetEmail'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userResetEmail($app_key, $app_user_reset_email_request = null, string $contentType = self::contentTypes['userResetEmail'][0])
    {
        list($response) = $this->userResetEmailWithHttpInfo($app_key, $app_user_reset_email_request, $contentType);
        return $response;
    }

    /**
     * Operation userResetEmailWithHttpInfo
     *
     * 重置邮箱
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetEmailRequest|null $app_user_reset_email_request 重置邮箱的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetEmail'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userResetEmailWithHttpInfo($app_key, $app_user_reset_email_request = null, string $contentType = self::contentTypes['userResetEmail'][0])
    {
        $request = $this->userResetEmailRequest($app_key, $app_user_reset_email_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userResetEmailAsync
     *
     * 重置邮箱
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetEmailRequest|null $app_user_reset_email_request 重置邮箱的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetEmailAsync($app_key, $app_user_reset_email_request = null, string $contentType = self::contentTypes['userResetEmail'][0])
    {
        return $this->userResetEmailAsyncWithHttpInfo($app_key, $app_user_reset_email_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userResetEmailAsyncWithHttpInfo
     *
     * 重置邮箱
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetEmailRequest|null $app_user_reset_email_request 重置邮箱的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetEmailAsyncWithHttpInfo($app_key, $app_user_reset_email_request = null, string $contentType = self::contentTypes['userResetEmail'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userResetEmailRequest($app_key, $app_user_reset_email_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userResetEmail'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetEmailRequest|null $app_user_reset_email_request 重置邮箱的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetEmail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userResetEmailRequest($app_key, $app_user_reset_email_request = null, string $contentType = self::contentTypes['userResetEmail'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userResetEmail'
            );
        }



        $resourcePath = '/User/{appKey}/ResetEmail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($app_user_reset_email_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($app_user_reset_email_request));
            } else {
                $httpBody = $app_user_reset_email_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userResetPhone
     *
     * 重置手机号
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPhoneRequest|null $app_user_reset_phone_request 重置手机号的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPhone'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userResetPhone($app_key, $app_user_reset_phone_request = null, string $contentType = self::contentTypes['userResetPhone'][0])
    {
        list($response) = $this->userResetPhoneWithHttpInfo($app_key, $app_user_reset_phone_request, $contentType);
        return $response;
    }

    /**
     * Operation userResetPhoneWithHttpInfo
     *
     * 重置手机号
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPhoneRequest|null $app_user_reset_phone_request 重置手机号的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPhone'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userResetPhoneWithHttpInfo($app_key, $app_user_reset_phone_request = null, string $contentType = self::contentTypes['userResetPhone'][0])
    {
        $request = $this->userResetPhoneRequest($app_key, $app_user_reset_phone_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userResetPhoneAsync
     *
     * 重置手机号
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPhoneRequest|null $app_user_reset_phone_request 重置手机号的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetPhoneAsync($app_key, $app_user_reset_phone_request = null, string $contentType = self::contentTypes['userResetPhone'][0])
    {
        return $this->userResetPhoneAsyncWithHttpInfo($app_key, $app_user_reset_phone_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userResetPhoneAsyncWithHttpInfo
     *
     * 重置手机号
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPhoneRequest|null $app_user_reset_phone_request 重置手机号的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetPhoneAsyncWithHttpInfo($app_key, $app_user_reset_phone_request = null, string $contentType = self::contentTypes['userResetPhone'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userResetPhoneRequest($app_key, $app_user_reset_phone_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userResetPhone'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPhoneRequest|null $app_user_reset_phone_request 重置手机号的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userResetPhoneRequest($app_key, $app_user_reset_phone_request = null, string $contentType = self::contentTypes['userResetPhone'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userResetPhone'
            );
        }



        $resourcePath = '/User/{appKey}/ResetPhone';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($app_user_reset_phone_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($app_user_reset_phone_request));
            } else {
                $httpBody = $app_user_reset_phone_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userResetPwd
     *
     * 重置密码
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request 重置密码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userResetPwd($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        list($response) = $this->userResetPwdWithHttpInfo($app_key, $app_user_reset_pwd_request, $contentType);
        return $response;
    }

    /**
     * Operation userResetPwdWithHttpInfo
     *
     * 重置密码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request 重置密码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userResetPwdWithHttpInfo($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        $request = $this->userResetPwdRequest($app_key, $app_user_reset_pwd_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userResetPwdAsync
     *
     * 重置密码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request 重置密码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetPwdAsync($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        return $this->userResetPwdAsyncWithHttpInfo($app_key, $app_user_reset_pwd_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userResetPwdAsyncWithHttpInfo
     *
     * 重置密码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request 重置密码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userResetPwdAsyncWithHttpInfo($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userResetPwdRequest($app_key, $app_user_reset_pwd_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userResetPwd'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AppUserResetPwdRequest|null $app_user_reset_pwd_request 重置密码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userResetPwd'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userResetPwdRequest($app_key, $app_user_reset_pwd_request = null, string $contentType = self::contentTypes['userResetPwd'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userResetPwd'
            );
        }



        $resourcePath = '/User/{appKey}/ResetPwd';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($app_user_reset_pwd_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($app_user_reset_pwd_request));
            } else {
                $httpBody = $app_user_reset_pwd_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSendEmailCode
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request 发送邮箱验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userSendEmailCode($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        list($response) = $this->userSendEmailCodeWithHttpInfo($app_key, $send_email_code_request, $contentType);
        return $response;
    }

    /**
     * Operation userSendEmailCodeWithHttpInfo
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request 发送邮箱验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSendEmailCodeWithHttpInfo($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        $request = $this->userSendEmailCodeRequest($app_key, $send_email_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSendEmailCodeAsync
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request 发送邮箱验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendEmailCodeAsync($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        return $this->userSendEmailCodeAsyncWithHttpInfo($app_key, $send_email_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSendEmailCodeAsyncWithHttpInfo
     *
     * 发送邮箱验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request 发送邮箱验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendEmailCodeAsyncWithHttpInfo($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userSendEmailCodeRequest($app_key, $send_email_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSendEmailCode'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendEmailCodeRequest|null $send_email_code_request 发送邮箱验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendEmailCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSendEmailCodeRequest($app_key, $send_email_code_request = null, string $contentType = self::contentTypes['userSendEmailCode'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSendEmailCode'
            );
        }



        $resourcePath = '/User/{appKey}/SendEmailCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_email_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_email_code_request));
            } else {
                $httpBody = $send_email_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSendSMSCode
     *
     * 发送手机验证码
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request 发送手机验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userSendSMSCode($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        list($response) = $this->userSendSMSCodeWithHttpInfo($app_key, $send_sms_code_request, $contentType);
        return $response;
    }

    /**
     * Operation userSendSMSCodeWithHttpInfo
     *
     * 发送手机验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request 发送手机验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSendSMSCodeWithHttpInfo($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        $request = $this->userSendSMSCodeRequest($app_key, $send_sms_code_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSendSMSCodeAsync
     *
     * 发送手机验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request 发送手机验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendSMSCodeAsync($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        return $this->userSendSMSCodeAsyncWithHttpInfo($app_key, $send_sms_code_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSendSMSCodeAsyncWithHttpInfo
     *
     * 发送手机验证码
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request 发送手机验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendSMSCodeAsyncWithHttpInfo($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userSendSMSCodeRequest($app_key, $send_sms_code_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSendSMSCode'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SendSMSCodeRequest|null $send_sms_code_request 发送手机验证码的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSendSMSCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSendSMSCodeRequest($app_key, $send_sms_code_request = null, string $contentType = self::contentTypes['userSendSMSCode'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSendSMSCode'
            );
        }



        $resourcePath = '/User/{appKey}/SendSMSCode';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_sms_code_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_sms_code_request));
            } else {
                $httpBody = $send_sms_code_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSignIn
     *
     * 密码登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userSignIn($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        list($response) = $this->userSignInWithHttpInfo($app_key, $sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userSignInWithHttpInfo
     *
     * 密码登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSignInWithHttpInfo($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        $request = $this->userSignInRequest($app_key, $sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSignInAsync
     *
     * 密码登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignInAsync($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        return $this->userSignInAsyncWithHttpInfo($app_key, $sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSignInAsyncWithHttpInfo
     *
     * 密码登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignInAsyncWithHttpInfo($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userSignInRequest($app_key, $sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignInRequest|null $sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSignInRequest($app_key, $sign_in_request = null, string $contentType = self::contentTypes['userSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/SignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sign_in_request));
            } else {
                $httpBody = $sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSignUp
     *
     * 账号注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userSignUp($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        list($response) = $this->userSignUpWithHttpInfo($app_key, $sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userSignUpWithHttpInfo
     *
     * 账号注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSignUpWithHttpInfo($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        $request = $this->userSignUpRequest($app_key, $sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSignUpAsync
     *
     * 账号注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignUpAsync($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        return $this->userSignUpAsyncWithHttpInfo($app_key, $sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSignUpAsyncWithHttpInfo
     *
     * 账号注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSignUpAsyncWithHttpInfo($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userSignUpRequest($app_key, $sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\SignUpRequest|null $sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userSignUpRequest($app_key, $sign_up_request = null, string $contentType = self::contentTypes['userSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/SignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($sign_up_request));
            } else {
                $httpBody = $sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userTwoFactorAuth
     *
     * 二次验证
     *
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse
     */
    public function userTwoFactorAuth($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        list($response) = $this->userTwoFactorAuthWithHttpInfo($app_key, $contentType);
        return $response;
    }

    /**
     * Operation userTwoFactorAuthWithHttpInfo
     *
     * 二次验证
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userTwoFactorAuthWithHttpInfo($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        $request = $this->userTwoFactorAuthRequest($app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userTwoFactorAuthAsync
     *
     * 二次验证
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userTwoFactorAuthAsync($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        return $this->userTwoFactorAuthAsyncWithHttpInfo($app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userTwoFactorAuthAsyncWithHttpInfo
     *
     * 二次验证
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userTwoFactorAuthAsyncWithHttpInfo($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\SetupCodeApiResponse';
        $request = $this->userTwoFactorAuthRequest($app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userTwoFactorAuth'
     *
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userTwoFactorAuth'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userTwoFactorAuthRequest($app_key, string $contentType = self::contentTypes['userTwoFactorAuth'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userTwoFactorAuth'
            );
        }


        $resourcePath = '/User/{appKey}/TwoFactorAuth';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUnionIDSignIn
     *
     * UnionID登录
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userUnionIDSignIn($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        list($response) = $this->userUnionIDSignInWithHttpInfo($app_key, $union_id_sign_in_request, $contentType);
        return $response;
    }

    /**
     * Operation userUnionIDSignInWithHttpInfo
     *
     * UnionID登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUnionIDSignInWithHttpInfo($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        $request = $this->userUnionIDSignInRequest($app_key, $union_id_sign_in_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUnionIDSignInAsync
     *
     * UnionID登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignInAsync($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        return $this->userUnionIDSignInAsyncWithHttpInfo($app_key, $union_id_sign_in_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUnionIDSignInAsyncWithHttpInfo
     *
     * UnionID登录
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignInAsyncWithHttpInfo($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userUnionIDSignInRequest($app_key, $union_id_sign_in_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUnionIDSignIn'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignInRequest|null $union_id_sign_in_request 登录请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignIn'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUnionIDSignInRequest($app_key, $union_id_sign_in_request = null, string $contentType = self::contentTypes['userUnionIDSignIn'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUnionIDSignIn'
            );
        }



        $resourcePath = '/User/{appKey}/UnionIDSignIn';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($union_id_sign_in_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($union_id_sign_in_request));
            } else {
                $httpBody = $union_id_sign_in_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUnionIDSignUp
     *
     * UnionID注册
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse
     */
    public function userUnionIDSignUp($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        list($response) = $this->userUnionIDSignUpWithHttpInfo($app_key, $union_id_sign_up_request, $contentType);
        return $response;
    }

    /**
     * Operation userUnionIDSignUpWithHttpInfo
     *
     * UnionID注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUnionIDSignUpWithHttpInfo($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        $request = $this->userUnionIDSignUpRequest($app_key, $union_id_sign_up_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUnionIDSignUpAsync
     *
     * UnionID注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignUpAsync($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        return $this->userUnionIDSignUpAsyncWithHttpInfo($app_key, $union_id_sign_up_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUnionIDSignUpAsyncWithHttpInfo
     *
     * UnionID注册
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnionIDSignUpAsyncWithHttpInfo($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\TokenModelApiResponse';
        $request = $this->userUnionIDSignUpRequest($app_key, $union_id_sign_up_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUnionIDSignUp'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UnionIDSignUpRequest|null $union_id_sign_up_request 注册请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnionIDSignUp'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUnionIDSignUpRequest($app_key, $union_id_sign_up_request = null, string $contentType = self::contentTypes['userUnionIDSignUp'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUnionIDSignUp'
            );
        }



        $resourcePath = '/User/{appKey}/UnionIDSignUp';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($union_id_sign_up_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($union_id_sign_up_request));
            } else {
                $httpBody = $union_id_sign_up_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUpdateProfile
     *
     * 更新个人资料
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request 更新个人资料的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userUpdateProfile($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        list($response) = $this->userUpdateProfileWithHttpInfo($app_key, $update_profile_request, $contentType);
        return $response;
    }

    /**
     * Operation userUpdateProfileWithHttpInfo
     *
     * 更新个人资料
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request 更新个人资料的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUpdateProfileWithHttpInfo($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        $request = $this->userUpdateProfileRequest($app_key, $update_profile_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUpdateProfileAsync
     *
     * 更新个人资料
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request 更新个人资料的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateProfileAsync($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        return $this->userUpdateProfileAsyncWithHttpInfo($app_key, $update_profile_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUpdateProfileAsyncWithHttpInfo
     *
     * 更新个人资料
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request 更新个人资料的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateProfileAsyncWithHttpInfo($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userUpdateProfileRequest($app_key, $update_profile_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUpdateProfile'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\UpdateProfileRequest|null $update_profile_request 更新个人资料的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUpdateProfile'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUpdateProfileRequest($app_key, $update_profile_request = null, string $contentType = self::contentTypes['userUpdateProfile'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUpdateProfile'
            );
        }



        $resourcePath = '/User/{appKey}/Profile';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($update_profile_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($update_profile_request));
            } else {
                $httpBody = $update_profile_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
