<?php
/**
 * UserFriendsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ZSGF\Client\ApiException;
use ZSGF\Client\Configuration;
use ZSGF\Client\HeaderSelector;
use ZSGF\Client\ObjectSerializer;

/**
 * UserFriendsApi Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class UserFriendsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'userCommonInterests' => [
            'application/json',
        ],
        'userFollowUser' => [
            'application/json',
        ],
        'userFollowerPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'userFollowers' => [
            'application/json',
        ],
        'userFollowing' => [
            'application/json',
        ],
        'userFriendsNearBy' => [
            'application/json',
        ],
        'userMutualFollowers' => [
            'application/json',
        ],
        'userMutualFollowings' => [
            'application/json',
        ],
        'userProfileById' => [
            'application/json',
        ],
        'userUnfollowUser' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation userCommonInterests
     *
     * 推荐相似兴趣用户
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $tag 兴趣标签 (optional)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse
     */
    public function userCommonInterests($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        list($response) = $this->userCommonInterestsWithHttpInfo($app_key, $tag, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userCommonInterestsWithHttpInfo
     *
     * 推荐相似兴趣用户
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 兴趣标签 (optional)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCommonInterestsWithHttpInfo($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        $request = $this->userCommonInterestsRequest($app_key, $tag, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCommonInterestsAsync
     *
     * 推荐相似兴趣用户
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 兴趣标签 (optional)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCommonInterestsAsync($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        return $this->userCommonInterestsAsyncWithHttpInfo($app_key, $tag, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCommonInterestsAsyncWithHttpInfo
     *
     * 推荐相似兴趣用户
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 兴趣标签 (optional)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCommonInterestsAsyncWithHttpInfo($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserCommonInterestsResultApiResponse';
        $request = $this->userCommonInterestsRequest($app_key, $tag, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCommonInterests'
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 兴趣标签 (optional)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userCommonInterests'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userCommonInterestsRequest($app_key, $tag = null, $skip = 0, $take = 10, string $contentType = self::contentTypes['userCommonInterests'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userCommonInterests'
            );
        }





        $resourcePath = '/UserFriends/{appKey}/CommonInterests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowUser
     *
     * 添加关注
     *
     * @param  int $user_id 要关注的用户ID (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userFollowUser($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        list($response) = $this->userFollowUserWithHttpInfo($user_id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userFollowUserWithHttpInfo
     *
     * 添加关注
     *
     * @param  int $user_id 要关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowUserWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        $request = $this->userFollowUserRequest($user_id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowUserAsync
     *
     * 添加关注
     *
     * @param  int $user_id 要关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowUserAsync($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        return $this->userFollowUserAsyncWithHttpInfo($user_id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowUserAsyncWithHttpInfo
     *
     * 添加关注
     *
     * @param  int $user_id 要关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowUserAsyncWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userFollowUserRequest($user_id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowUser'
     *
     * @param  int $user_id 要关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowUserRequest($user_id, $app_key, string $contentType = self::contentTypes['userFollowUser'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userFollowUser'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowUser'
            );
        }


        $resourcePath = '/UserFriends/{appKey}/Follower/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowerPut
     *
     * 刷新粉丝数据
     *
     * @param  int $id 粉丝ID (required)
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model 更新粉丝的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userFollowerPut($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        list($response) = $this->userFollowerPutWithHttpInfo($id, $app_key, $follower_put_model, $contentType);
        return $response;
    }

    /**
     * Operation userFollowerPutWithHttpInfo
     *
     * 刷新粉丝数据
     *
     * @param  int $id 粉丝ID (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model 更新粉丝的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowerPutWithHttpInfo($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        $request = $this->userFollowerPutRequest($id, $app_key, $follower_put_model, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowerPutAsync
     *
     * 刷新粉丝数据
     *
     * @param  int $id 粉丝ID (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model 更新粉丝的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowerPutAsync($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        return $this->userFollowerPutAsyncWithHttpInfo($id, $app_key, $follower_put_model, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowerPutAsyncWithHttpInfo
     *
     * 刷新粉丝数据
     *
     * @param  int $id 粉丝ID (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model 更新粉丝的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowerPutAsyncWithHttpInfo($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userFollowerPutRequest($id, $app_key, $follower_put_model, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowerPut'
     *
     * @param  int $id 粉丝ID (required)
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\FollowerPutModel|null $follower_put_model 更新粉丝的请求参数 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowerPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowerPutRequest($id, $app_key, $follower_put_model = null, string $contentType = self::contentTypes['userFollowerPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userFollowerPut'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowerPut'
            );
        }



        $resourcePath = '/UserFriends/{appKey}/Follower/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($follower_put_model)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($follower_put_model));
            } else {
                $httpBody = $follower_put_model;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowers
     *
     * 获取粉丝列表
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $status 状态 (optional)
     * @param  int|null $target_user_id 指定用户的粉丝 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse
     */
    public function userFollowers($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        list($response) = $this->userFollowersWithHttpInfo($app_key, $tag, $status, $target_user_id, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userFollowersWithHttpInfo
     *
     * 获取粉丝列表
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $status 状态 (optional)
     * @param  int|null $target_user_id 指定用户的粉丝 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowersWithHttpInfo($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        $request = $this->userFollowersRequest($app_key, $tag, $status, $target_user_id, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowersAsync
     *
     * 获取粉丝列表
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $status 状态 (optional)
     * @param  int|null $target_user_id 指定用户的粉丝 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowersAsync($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        return $this->userFollowersAsyncWithHttpInfo($app_key, $tag, $status, $target_user_id, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowersAsyncWithHttpInfo
     *
     * 获取粉丝列表
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $status 状态 (optional)
     * @param  int|null $target_user_id 指定用户的粉丝 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowersAsyncWithHttpInfo($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserFollowersResultApiResponse';
        $request = $this->userFollowersRequest($app_key, $tag, $status, $target_user_id, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowers'
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $status 状态 (optional)
     * @param  int|null $target_user_id 指定用户的粉丝 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowersRequest($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFollowers'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowers'
            );
        }







        $resourcePath = '/UserFriends/{appKey}/Followers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_user_id,
            'targetUserId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFollowing
     *
     * 获取关注列表 / 判断是否关注
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $tag 用于过滤关注列表的标签（可选）。 (optional)
     * @param  string|null $status 用于过滤关注列表的状态（可选）。 (optional)
     * @param  int|null $target_user_id 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
     * @param  int|null $take 获取的记录数，用于分页（默认10）。 (optional, default to 10)
     * @param  int|null $check_user_id 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
     * @param  bool|null $only_ids 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userFollowing($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, $check_user_id = null, $only_ids = false, string $contentType = self::contentTypes['userFollowing'][0])
    {
        list($response) = $this->userFollowingWithHttpInfo($app_key, $tag, $status, $target_user_id, $skip, $take, $check_user_id, $only_ids, $contentType);
        return $response;
    }

    /**
     * Operation userFollowingWithHttpInfo
     *
     * 获取关注列表 / 判断是否关注
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 用于过滤关注列表的标签（可选）。 (optional)
     * @param  string|null $status 用于过滤关注列表的状态（可选）。 (optional)
     * @param  int|null $target_user_id 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
     * @param  int|null $take 获取的记录数，用于分页（默认10）。 (optional, default to 10)
     * @param  int|null $check_user_id 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
     * @param  bool|null $only_ids 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFollowingWithHttpInfo($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, $check_user_id = null, $only_ids = false, string $contentType = self::contentTypes['userFollowing'][0])
    {
        $request = $this->userFollowingRequest($app_key, $tag, $status, $target_user_id, $skip, $take, $check_user_id, $only_ids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFollowingAsync
     *
     * 获取关注列表 / 判断是否关注
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 用于过滤关注列表的标签（可选）。 (optional)
     * @param  string|null $status 用于过滤关注列表的状态（可选）。 (optional)
     * @param  int|null $target_user_id 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
     * @param  int|null $take 获取的记录数，用于分页（默认10）。 (optional, default to 10)
     * @param  int|null $check_user_id 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
     * @param  bool|null $only_ids 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowingAsync($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, $check_user_id = null, $only_ids = false, string $contentType = self::contentTypes['userFollowing'][0])
    {
        return $this->userFollowingAsyncWithHttpInfo($app_key, $tag, $status, $target_user_id, $skip, $take, $check_user_id, $only_ids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFollowingAsyncWithHttpInfo
     *
     * 获取关注列表 / 判断是否关注
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 用于过滤关注列表的标签（可选）。 (optional)
     * @param  string|null $status 用于过滤关注列表的状态（可选）。 (optional)
     * @param  int|null $target_user_id 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
     * @param  int|null $take 获取的记录数，用于分页（默认10）。 (optional, default to 10)
     * @param  int|null $check_user_id 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
     * @param  bool|null $only_ids 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFollowingAsyncWithHttpInfo($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, $check_user_id = null, $only_ids = false, string $contentType = self::contentTypes['userFollowing'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userFollowingRequest($app_key, $tag, $status, $target_user_id, $skip, $take, $check_user_id, $only_ids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFollowing'
     *
     * @param  string $app_key (required)
     * @param  string|null $tag 用于过滤关注列表的标签（可选）。 (optional)
     * @param  string|null $status 用于过滤关注列表的状态（可选）。 (optional)
     * @param  int|null $target_user_id 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
     * @param  int|null $skip 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
     * @param  int|null $take 获取的记录数，用于分页（默认10）。 (optional, default to 10)
     * @param  int|null $check_user_id 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
     * @param  bool|null $only_ids 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFollowingRequest($app_key, $tag = null, $status = null, $target_user_id = 0, $skip = 0, $take = 10, $check_user_id = null, $only_ids = false, string $contentType = self::contentTypes['userFollowing'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFollowing'
            );
        }









        $resourcePath = '/UserFriends/{appKey}/Following';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $status,
            'status', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $target_user_id,
            'targetUserId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $check_user_id,
            'checkUserId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $only_ids,
            'onlyIDs', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userFriendsNearBy
     *
     * 推荐附近用户
     *
     * @param  float $longitude 当前用户经度坐标(WGS84坐标系) (required)
     * @param  float $latitude 当前用户纬度坐标(WGS84坐标系) (required)
     * @param  string $app_key app_key (required)
     * @param  string|null $country 国家过滤条件（精确匹配） (optional)
     * @param  string|null $state 省份过滤条件（精确匹配） (optional)
     * @param  string|null $city 城市过滤条件（精确匹配） (optional)
     * @param  string|null $district 区县过滤条件（精确匹配） (optional)
     * @param  string|null $gender 性别过滤条件（可选值示例：Male/Female/Other） (optional)
     * @param  int|null $age_s 年龄起始范围（包含，0表示不限制） (optional)
     * @param  int|null $age_e 年龄结束范围（包含，0表示不限制） (optional)
     * @param  string|null $tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
     * @param  int|null $distance 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
     * @param  int|null $skip 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
     * @param  int|null $take 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse
     */
    public function userFriendsNearBy($longitude, $latitude, $app_key, $country = null, $state = null, $city = null, $district = null, $gender = null, $age_s = null, $age_e = null, $tag = null, $distance = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        list($response) = $this->userFriendsNearByWithHttpInfo($longitude, $latitude, $app_key, $country, $state, $city, $district, $gender, $age_s, $age_e, $tag, $distance, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userFriendsNearByWithHttpInfo
     *
     * 推荐附近用户
     *
     * @param  float $longitude 当前用户经度坐标(WGS84坐标系) (required)
     * @param  float $latitude 当前用户纬度坐标(WGS84坐标系) (required)
     * @param  string $app_key (required)
     * @param  string|null $country 国家过滤条件（精确匹配） (optional)
     * @param  string|null $state 省份过滤条件（精确匹配） (optional)
     * @param  string|null $city 城市过滤条件（精确匹配） (optional)
     * @param  string|null $district 区县过滤条件（精确匹配） (optional)
     * @param  string|null $gender 性别过滤条件（可选值示例：Male/Female/Other） (optional)
     * @param  int|null $age_s 年龄起始范围（包含，0表示不限制） (optional)
     * @param  int|null $age_e 年龄结束范围（包含，0表示不限制） (optional)
     * @param  string|null $tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
     * @param  int|null $distance 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
     * @param  int|null $skip 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
     * @param  int|null $take 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userFriendsNearByWithHttpInfo($longitude, $latitude, $app_key, $country = null, $state = null, $city = null, $district = null, $gender = null, $age_s = null, $age_e = null, $tag = null, $distance = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        $request = $this->userFriendsNearByRequest($longitude, $latitude, $app_key, $country, $state, $city, $district, $gender, $age_s, $age_e, $tag, $distance, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userFriendsNearByAsync
     *
     * 推荐附近用户
     *
     * @param  float $longitude 当前用户经度坐标(WGS84坐标系) (required)
     * @param  float $latitude 当前用户纬度坐标(WGS84坐标系) (required)
     * @param  string $app_key (required)
     * @param  string|null $country 国家过滤条件（精确匹配） (optional)
     * @param  string|null $state 省份过滤条件（精确匹配） (optional)
     * @param  string|null $city 城市过滤条件（精确匹配） (optional)
     * @param  string|null $district 区县过滤条件（精确匹配） (optional)
     * @param  string|null $gender 性别过滤条件（可选值示例：Male/Female/Other） (optional)
     * @param  int|null $age_s 年龄起始范围（包含，0表示不限制） (optional)
     * @param  int|null $age_e 年龄结束范围（包含，0表示不限制） (optional)
     * @param  string|null $tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
     * @param  int|null $distance 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
     * @param  int|null $skip 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
     * @param  int|null $take 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFriendsNearByAsync($longitude, $latitude, $app_key, $country = null, $state = null, $city = null, $district = null, $gender = null, $age_s = null, $age_e = null, $tag = null, $distance = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        return $this->userFriendsNearByAsyncWithHttpInfo($longitude, $latitude, $app_key, $country, $state, $city, $district, $gender, $age_s, $age_e, $tag, $distance, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userFriendsNearByAsyncWithHttpInfo
     *
     * 推荐附近用户
     *
     * @param  float $longitude 当前用户经度坐标(WGS84坐标系) (required)
     * @param  float $latitude 当前用户纬度坐标(WGS84坐标系) (required)
     * @param  string $app_key (required)
     * @param  string|null $country 国家过滤条件（精确匹配） (optional)
     * @param  string|null $state 省份过滤条件（精确匹配） (optional)
     * @param  string|null $city 城市过滤条件（精确匹配） (optional)
     * @param  string|null $district 区县过滤条件（精确匹配） (optional)
     * @param  string|null $gender 性别过滤条件（可选值示例：Male/Female/Other） (optional)
     * @param  int|null $age_s 年龄起始范围（包含，0表示不限制） (optional)
     * @param  int|null $age_e 年龄结束范围（包含，0表示不限制） (optional)
     * @param  string|null $tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
     * @param  int|null $distance 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
     * @param  int|null $skip 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
     * @param  int|null $take 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userFriendsNearByAsyncWithHttpInfo($longitude, $latitude, $app_key, $country = null, $state = null, $city = null, $district = null, $gender = null, $age_s = null, $age_e = null, $tag = null, $distance = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserFriendsNearByResultApiResponse';
        $request = $this->userFriendsNearByRequest($longitude, $latitude, $app_key, $country, $state, $city, $district, $gender, $age_s, $age_e, $tag, $distance, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userFriendsNearBy'
     *
     * @param  float $longitude 当前用户经度坐标(WGS84坐标系) (required)
     * @param  float $latitude 当前用户纬度坐标(WGS84坐标系) (required)
     * @param  string $app_key (required)
     * @param  string|null $country 国家过滤条件（精确匹配） (optional)
     * @param  string|null $state 省份过滤条件（精确匹配） (optional)
     * @param  string|null $city 城市过滤条件（精确匹配） (optional)
     * @param  string|null $district 区县过滤条件（精确匹配） (optional)
     * @param  string|null $gender 性别过滤条件（可选值示例：Male/Female/Other） (optional)
     * @param  int|null $age_s 年龄起始范围（包含，0表示不限制） (optional)
     * @param  int|null $age_e 年龄结束范围（包含，0表示不限制） (optional)
     * @param  string|null $tag 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
     * @param  int|null $distance 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
     * @param  int|null $skip 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
     * @param  int|null $take 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userFriendsNearBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userFriendsNearByRequest($longitude, $latitude, $app_key, $country = null, $state = null, $city = null, $district = null, $gender = null, $age_s = null, $age_e = null, $tag = null, $distance = 0, $skip = 0, $take = 10, string $contentType = self::contentTypes['userFriendsNearBy'][0])
    {

        // verify the required parameter 'longitude' is set
        if ($longitude === null || (is_array($longitude) && count($longitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $longitude when calling userFriendsNearBy'
            );
        }

        // verify the required parameter 'latitude' is set
        if ($latitude === null || (is_array($latitude) && count($latitude) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $latitude when calling userFriendsNearBy'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userFriendsNearBy'
            );
        }













        $resourcePath = '/UserFriends/{appKey}/NearBy';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $longitude,
            'longitude', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $latitude,
            'latitude', // param base name
            'number', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $country,
            'country', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $city,
            'city', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $district,
            'district', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $gender,
            'gender', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $age_s,
            'ageS', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $age_e,
            'ageE', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $distance,
            'distance', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userMutualFollowers
     *
     * 推荐共同粉丝用户
     *
     * @param  string $app_key app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse
     */
    public function userMutualFollowers($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        list($response) = $this->userMutualFollowersWithHttpInfo($app_key, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userMutualFollowersWithHttpInfo
     *
     * 推荐共同粉丝用户
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userMutualFollowersWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        $request = $this->userMutualFollowersRequest($app_key, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userMutualFollowersAsync
     *
     * 推荐共同粉丝用户
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowersAsync($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        return $this->userMutualFollowersAsyncWithHttpInfo($app_key, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userMutualFollowersAsyncWithHttpInfo
     *
     * 推荐共同粉丝用户
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowersAsyncWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowersResultApiResponse';
        $request = $this->userMutualFollowersRequest($app_key, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userMutualFollowers'
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userMutualFollowersRequest($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowers'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userMutualFollowers'
            );
        }




        $resourcePath = '/UserFriends/{appKey}/MutualFollowers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userMutualFollowings
     *
     * 推荐共同关注用户
     *
     * @param  string $app_key app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse
     */
    public function userMutualFollowings($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        list($response) = $this->userMutualFollowingsWithHttpInfo($app_key, $skip, $take, $contentType);
        return $response;
    }

    /**
     * Operation userMutualFollowingsWithHttpInfo
     *
     * 推荐共同关注用户
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userMutualFollowingsWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        $request = $this->userMutualFollowingsRequest($app_key, $skip, $take, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userMutualFollowingsAsync
     *
     * 推荐共同关注用户
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowingsAsync($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        return $this->userMutualFollowingsAsyncWithHttpInfo($app_key, $skip, $take, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userMutualFollowingsAsyncWithHttpInfo
     *
     * 推荐共同关注用户
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userMutualFollowingsAsyncWithHttpInfo($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\UserMutualFollowingsResultApiResponse';
        $request = $this->userMutualFollowingsRequest($app_key, $skip, $take, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userMutualFollowings'
     *
     * @param  string $app_key (required)
     * @param  int|null $skip 跳过的记录数 (optional, default to 0)
     * @param  int|null $take 获取的记录数 (optional, default to 10)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userMutualFollowings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userMutualFollowingsRequest($app_key, $skip = 0, $take = 10, string $contentType = self::contentTypes['userMutualFollowings'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userMutualFollowings'
            );
        }




        $resourcePath = '/UserFriends/{appKey}/MutualFollowings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip,
            'skip', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $take,
            'take', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userProfileById
     *
     * 获取用户资料
     *
     * @param  int $user_id 用户ID (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfileById'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse
     */
    public function userProfileById($user_id, $app_key, string $contentType = self::contentTypes['userProfileById'][0])
    {
        list($response) = $this->userProfileByIdWithHttpInfo($user_id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userProfileByIdWithHttpInfo
     *
     * 获取用户资料
     *
     * @param  int $user_id 用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfileById'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userProfileByIdWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userProfileById'][0])
    {
        $request = $this->userProfileByIdRequest($user_id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userProfileByIdAsync
     *
     * 获取用户资料
     *
     * @param  int $user_id 用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfileById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userProfileByIdAsync($user_id, $app_key, string $contentType = self::contentTypes['userProfileById'][0])
    {
        return $this->userProfileByIdAsyncWithHttpInfo($user_id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userProfileByIdAsyncWithHttpInfo
     *
     * 获取用户资料
     *
     * @param  int $user_id 用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfileById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userProfileByIdAsyncWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userProfileById'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\GetUserProfileResultApiResponse';
        $request = $this->userProfileByIdRequest($user_id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userProfileById'
     *
     * @param  int $user_id 用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userProfileById'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userProfileByIdRequest($user_id, $app_key, string $contentType = self::contentTypes['userProfileById'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userProfileById'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userProfileById'
            );
        }


        $resourcePath = '/UserFriends/{appKey}/Profile/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUnfollowUser
     *
     * 取消关注
     *
     * @param  int $user_id 要取消关注的用户ID (required)
     * @param  string $app_key app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function userUnfollowUser($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        list($response) = $this->userUnfollowUserWithHttpInfo($user_id, $app_key, $contentType);
        return $response;
    }

    /**
     * Operation userUnfollowUserWithHttpInfo
     *
     * 取消关注
     *
     * @param  int $user_id 要取消关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUnfollowUserWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        $request = $this->userUnfollowUserRequest($user_id, $app_key, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUnfollowUserAsync
     *
     * 取消关注
     *
     * @param  int $user_id 要取消关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnfollowUserAsync($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        return $this->userUnfollowUserAsyncWithHttpInfo($user_id, $app_key, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUnfollowUserAsyncWithHttpInfo
     *
     * 取消关注
     *
     * @param  int $user_id 要取消关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUnfollowUserAsyncWithHttpInfo($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->userUnfollowUserRequest($user_id, $app_key, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUnfollowUser'
     *
     * @param  int $user_id 要取消关注的用户ID (required)
     * @param  string $app_key (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['userUnfollowUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function userUnfollowUserRequest($user_id, $app_key, string $contentType = self::contentTypes['userUnfollowUser'][0])
    {

        // verify the required parameter 'user_id' is set
        if ($user_id === null || (is_array($user_id) && count($user_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userUnfollowUser'
            );
        }

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling userUnfollowUser'
            );
        }


        $resourcePath = '/UserFriends/{appKey}/Follower/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
