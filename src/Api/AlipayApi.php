<?php
/**
 * AlipayApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ZSGF\Client\ApiException;
use ZSGF\Client\Configuration;
use ZSGF\Client\HeaderSelector;
use ZSGF\Client\ObjectSerializer;

/**
 * AlipayApi Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class AlipayApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'alipayCreateOrder' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'alipayCreateOrderPagePay' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'alipayCreateOrderWapPay' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'alipayOrderDetail' => [
            'application/json',
        ],
        'alipayOrderRefund' => [
            'application/json',
        ],
        'alipayReturnPageNotify' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation alipayCreateOrder
     *
     * 创建当面付订单
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderRequest|null $alipay_create_order_request alipay_create_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrder'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\StringApiResponse
     */
    public function alipayCreateOrder($app_key, $alipay_create_order_request = null, string $contentType = self::contentTypes['alipayCreateOrder'][0])
    {
        list($response) = $this->alipayCreateOrderWithHttpInfo($app_key, $alipay_create_order_request, $contentType);
        return $response;
    }

    /**
     * Operation alipayCreateOrderWithHttpInfo
     *
     * 创建当面付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderRequest|null $alipay_create_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrder'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\StringApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function alipayCreateOrderWithHttpInfo($app_key, $alipay_create_order_request = null, string $contentType = self::contentTypes['alipayCreateOrder'][0])
    {
        $request = $this->alipayCreateOrderRequest($app_key, $alipay_create_order_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\StringApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\StringApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alipayCreateOrderAsync
     *
     * 创建当面付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderRequest|null $alipay_create_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayCreateOrderAsync($app_key, $alipay_create_order_request = null, string $contentType = self::contentTypes['alipayCreateOrder'][0])
    {
        return $this->alipayCreateOrderAsyncWithHttpInfo($app_key, $alipay_create_order_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alipayCreateOrderAsyncWithHttpInfo
     *
     * 创建当面付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderRequest|null $alipay_create_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayCreateOrderAsyncWithHttpInfo($app_key, $alipay_create_order_request = null, string $contentType = self::contentTypes['alipayCreateOrder'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse';
        $request = $this->alipayCreateOrderRequest($app_key, $alipay_create_order_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alipayCreateOrder'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderRequest|null $alipay_create_order_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrder'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alipayCreateOrderRequest($app_key, $alipay_create_order_request = null, string $contentType = self::contentTypes['alipayCreateOrder'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling alipayCreateOrder'
            );
        }



        $resourcePath = '/Alipay/{appKey}/CreateOrder';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alipay_create_order_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alipay_create_order_request));
            } else {
                $httpBody = $alipay_create_order_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alipayCreateOrderPagePay
     *
     * 创建PC支付订单
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderPagePayRequest|null $alipay_create_order_page_pay_request alipay_create_order_page_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderPagePay'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\StringApiResponse
     */
    public function alipayCreateOrderPagePay($app_key, $alipay_create_order_page_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderPagePay'][0])
    {
        list($response) = $this->alipayCreateOrderPagePayWithHttpInfo($app_key, $alipay_create_order_page_pay_request, $contentType);
        return $response;
    }

    /**
     * Operation alipayCreateOrderPagePayWithHttpInfo
     *
     * 创建PC支付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderPagePayRequest|null $alipay_create_order_page_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderPagePay'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\StringApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function alipayCreateOrderPagePayWithHttpInfo($app_key, $alipay_create_order_page_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderPagePay'][0])
    {
        $request = $this->alipayCreateOrderPagePayRequest($app_key, $alipay_create_order_page_pay_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\StringApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\StringApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alipayCreateOrderPagePayAsync
     *
     * 创建PC支付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderPagePayRequest|null $alipay_create_order_page_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderPagePay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayCreateOrderPagePayAsync($app_key, $alipay_create_order_page_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderPagePay'][0])
    {
        return $this->alipayCreateOrderPagePayAsyncWithHttpInfo($app_key, $alipay_create_order_page_pay_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alipayCreateOrderPagePayAsyncWithHttpInfo
     *
     * 创建PC支付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderPagePayRequest|null $alipay_create_order_page_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderPagePay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayCreateOrderPagePayAsyncWithHttpInfo($app_key, $alipay_create_order_page_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderPagePay'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse';
        $request = $this->alipayCreateOrderPagePayRequest($app_key, $alipay_create_order_page_pay_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alipayCreateOrderPagePay'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderPagePayRequest|null $alipay_create_order_page_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderPagePay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alipayCreateOrderPagePayRequest($app_key, $alipay_create_order_page_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderPagePay'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling alipayCreateOrderPagePay'
            );
        }



        $resourcePath = '/Alipay/{appKey}/CreateOrderPagePay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alipay_create_order_page_pay_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alipay_create_order_page_pay_request));
            } else {
                $httpBody = $alipay_create_order_page_pay_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alipayCreateOrderWapPay
     *
     * 创建WAP支付订单
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderWapPayRequest|null $alipay_create_order_wap_pay_request alipay_create_order_wap_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderWapPay'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\StringApiResponse
     */
    public function alipayCreateOrderWapPay($app_key, $alipay_create_order_wap_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderWapPay'][0])
    {
        list($response) = $this->alipayCreateOrderWapPayWithHttpInfo($app_key, $alipay_create_order_wap_pay_request, $contentType);
        return $response;
    }

    /**
     * Operation alipayCreateOrderWapPayWithHttpInfo
     *
     * 创建WAP支付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderWapPayRequest|null $alipay_create_order_wap_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderWapPay'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\StringApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function alipayCreateOrderWapPayWithHttpInfo($app_key, $alipay_create_order_wap_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderWapPay'][0])
    {
        $request = $this->alipayCreateOrderWapPayRequest($app_key, $alipay_create_order_wap_pay_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\StringApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\StringApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alipayCreateOrderWapPayAsync
     *
     * 创建WAP支付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderWapPayRequest|null $alipay_create_order_wap_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderWapPay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayCreateOrderWapPayAsync($app_key, $alipay_create_order_wap_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderWapPay'][0])
    {
        return $this->alipayCreateOrderWapPayAsyncWithHttpInfo($app_key, $alipay_create_order_wap_pay_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alipayCreateOrderWapPayAsyncWithHttpInfo
     *
     * 创建WAP支付订单
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderWapPayRequest|null $alipay_create_order_wap_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderWapPay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayCreateOrderWapPayAsyncWithHttpInfo($app_key, $alipay_create_order_wap_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderWapPay'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\StringApiResponse';
        $request = $this->alipayCreateOrderWapPayRequest($app_key, $alipay_create_order_wap_pay_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alipayCreateOrderWapPay'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\AlipayCreateOrderWapPayRequest|null $alipay_create_order_wap_pay_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayCreateOrderWapPay'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alipayCreateOrderWapPayRequest($app_key, $alipay_create_order_wap_pay_request = null, string $contentType = self::contentTypes['alipayCreateOrderWapPay'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling alipayCreateOrderWapPay'
            );
        }



        $resourcePath = '/Alipay/{appKey}/CreateOrderWapPay';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($alipay_create_order_wap_pay_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($alipay_create_order_wap_pay_request));
            } else {
                $httpBody = $alipay_create_order_wap_pay_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alipayOrderDetail
     *
     * 获取订单详情
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderDetail'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse
     */
    public function alipayOrderDetail($app_key, $order_no = null, string $contentType = self::contentTypes['alipayOrderDetail'][0])
    {
        list($response) = $this->alipayOrderDetailWithHttpInfo($app_key, $order_no, $contentType);
        return $response;
    }

    /**
     * Operation alipayOrderDetailWithHttpInfo
     *
     * 获取订单详情
     *
     * @param  string $app_key (required)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderDetail'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function alipayOrderDetailWithHttpInfo($app_key, $order_no = null, string $contentType = self::contentTypes['alipayOrderDetail'][0])
    {
        $request = $this->alipayOrderDetailRequest($app_key, $order_no, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alipayOrderDetailAsync
     *
     * 获取订单详情
     *
     * @param  string $app_key (required)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayOrderDetailAsync($app_key, $order_no = null, string $contentType = self::contentTypes['alipayOrderDetail'][0])
    {
        return $this->alipayOrderDetailAsyncWithHttpInfo($app_key, $order_no, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alipayOrderDetailAsyncWithHttpInfo
     *
     * 获取订单详情
     *
     * @param  string $app_key (required)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayOrderDetailAsyncWithHttpInfo($app_key, $order_no = null, string $contentType = self::contentTypes['alipayOrderDetail'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeQueryResponseApiResponse';
        $request = $this->alipayOrderDetailRequest($app_key, $order_no, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alipayOrderDetail'
     *
     * @param  string $app_key (required)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderDetail'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alipayOrderDetailRequest($app_key, $order_no = null, string $contentType = self::contentTypes['alipayOrderDetail'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling alipayOrderDetail'
            );
        }



        $resourcePath = '/Alipay/{appKey}/OrderDetail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_no,
            'orderNo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alipayOrderRefund
     *
     * 发起订单退款
     *
     * @param  string $app_key app_key (required)
     * @param  string|null $amount 退款金额 (optional)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderRefund'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse
     */
    public function alipayOrderRefund($app_key, $amount = null, $order_no = null, string $contentType = self::contentTypes['alipayOrderRefund'][0])
    {
        list($response) = $this->alipayOrderRefundWithHttpInfo($app_key, $amount, $order_no, $contentType);
        return $response;
    }

    /**
     * Operation alipayOrderRefundWithHttpInfo
     *
     * 发起订单退款
     *
     * @param  string $app_key (required)
     * @param  string|null $amount 退款金额 (optional)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderRefund'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function alipayOrderRefundWithHttpInfo($app_key, $amount = null, $order_no = null, string $contentType = self::contentTypes['alipayOrderRefund'][0])
    {
        $request = $this->alipayOrderRefundRequest($app_key, $amount, $order_no, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alipayOrderRefundAsync
     *
     * 发起订单退款
     *
     * @param  string $app_key (required)
     * @param  string|null $amount 退款金额 (optional)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayOrderRefundAsync($app_key, $amount = null, $order_no = null, string $contentType = self::contentTypes['alipayOrderRefund'][0])
    {
        return $this->alipayOrderRefundAsyncWithHttpInfo($app_key, $amount, $order_no, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alipayOrderRefundAsyncWithHttpInfo
     *
     * 发起订单退款
     *
     * @param  string $app_key (required)
     * @param  string|null $amount 退款金额 (optional)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayOrderRefundAsyncWithHttpInfo($app_key, $amount = null, $order_no = null, string $contentType = self::contentTypes['alipayOrderRefund'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\AlipayTradeRefundResponseApiResponse';
        $request = $this->alipayOrderRefundRequest($app_key, $amount, $order_no, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alipayOrderRefund'
     *
     * @param  string $app_key (required)
     * @param  string|null $amount 退款金额 (optional)
     * @param  string|null $order_no 订单号 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayOrderRefund'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alipayOrderRefundRequest($app_key, $amount = null, $order_no = null, string $contentType = self::contentTypes['alipayOrderRefund'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling alipayOrderRefund'
            );
        }




        $resourcePath = '/Alipay/{appKey}/OrderRefund';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount,
            'amount', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_no,
            'orderNo', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation alipayReturnPageNotify
     *
     * 支付成功回调通知
     *
     * @param  string $app_key app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ReturnPageNotifyRequest|null $return_page_notify_request return_page_notify_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayReturnPageNotify'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function alipayReturnPageNotify($app_key, $return_page_notify_request = null, string $contentType = self::contentTypes['alipayReturnPageNotify'][0])
    {
        list($response) = $this->alipayReturnPageNotifyWithHttpInfo($app_key, $return_page_notify_request, $contentType);
        return $response;
    }

    /**
     * Operation alipayReturnPageNotifyWithHttpInfo
     *
     * 支付成功回调通知
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ReturnPageNotifyRequest|null $return_page_notify_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayReturnPageNotify'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function alipayReturnPageNotifyWithHttpInfo($app_key, $return_page_notify_request = null, string $contentType = self::contentTypes['alipayReturnPageNotify'][0])
    {
        $request = $this->alipayReturnPageNotifyRequest($app_key, $return_page_notify_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation alipayReturnPageNotifyAsync
     *
     * 支付成功回调通知
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ReturnPageNotifyRequest|null $return_page_notify_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayReturnPageNotify'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayReturnPageNotifyAsync($app_key, $return_page_notify_request = null, string $contentType = self::contentTypes['alipayReturnPageNotify'][0])
    {
        return $this->alipayReturnPageNotifyAsyncWithHttpInfo($app_key, $return_page_notify_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation alipayReturnPageNotifyAsyncWithHttpInfo
     *
     * 支付成功回调通知
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ReturnPageNotifyRequest|null $return_page_notify_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayReturnPageNotify'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function alipayReturnPageNotifyAsyncWithHttpInfo($app_key, $return_page_notify_request = null, string $contentType = self::contentTypes['alipayReturnPageNotify'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->alipayReturnPageNotifyRequest($app_key, $return_page_notify_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'alipayReturnPageNotify'
     *
     * @param  string $app_key (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ReturnPageNotifyRequest|null $return_page_notify_request (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['alipayReturnPageNotify'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function alipayReturnPageNotifyRequest($app_key, $return_page_notify_request = null, string $contentType = self::contentTypes['alipayReturnPageNotify'][0])
    {

        // verify the required parameter 'app_key' is set
        if ($app_key === null || (is_array($app_key) && count($app_key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $app_key when calling alipayReturnPageNotify'
            );
        }



        $resourcePath = '/Alipay/{appKey}/ReturnPageNotify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($app_key !== null) {
            $resourcePath = str_replace(
                '{' . 'appKey' . '}',
                ObjectSerializer::toPathValue($app_key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($return_page_notify_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($return_page_notify_request));
            } else {
                $httpBody = $return_page_notify_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
