<?php
/**
 * ServiceSettingApi
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use ZSGF\Client\ApiException;
use ZSGF\Client\Configuration;
use ZSGF\Client\HeaderSelector;
use ZSGF\Client\ObjectSerializer;

/**
 * ServiceSettingApi Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ServiceSettingApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'serviceSetting' => [
            'application/json',
        ],
        'serviceSettingDelete' => [
            'application/json',
        ],
        'serviceSettingGroup' => [
            'application/json',
        ],
        'serviceSettingGroupDelete' => [
            'application/json',
        ],
        'serviceSettingGroupPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettingGroupPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettingGroups' => [
            'application/json',
        ],
        'serviceSettingItem' => [
            'application/json',
        ],
        'serviceSettingItemDelete' => [
            'application/json',
        ],
        'serviceSettingItemPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettingItemPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettingItems' => [
            'application/json',
        ],
        'serviceSettingPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettingProvider' => [
            'application/json',
        ],
        'serviceSettingProviderDelete' => [
            'application/json',
        ],
        'serviceSettingProviderPost' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettingProviderPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettingProviders' => [
            'application/json',
        ],
        'serviceSettingPut' => [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/*+json',
        ],
        'serviceSettings' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation serviceSetting
     *
     * 获取配置详情
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSetting'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse
     */
    public function serviceSetting($id, string $contentType = self::contentTypes['serviceSetting'][0])
    {
        list($response) = $this->serviceSettingWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingWithHttpInfo
     *
     * 获取配置详情
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSetting'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingWithHttpInfo($id, string $contentType = self::contentTypes['serviceSetting'][0])
    {
        $request = $this->serviceSettingRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingAsync
     *
     * 获取配置详情
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSetting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingAsync($id, string $contentType = self::contentTypes['serviceSetting'][0])
    {
        return $this->serviceSettingAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingAsyncWithHttpInfo
     *
     * 获取配置详情
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSetting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSetting'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\SettingsApiResponse';
        $request = $this->serviceSettingRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSetting'
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSetting'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingRequest($id, string $contentType = self::contentTypes['serviceSetting'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSetting'
            );
        }


        $resourcePath = '/ServiceSetting/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingDelete
     *
     * 删除配置
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingDelete($id, string $contentType = self::contentTypes['serviceSettingDelete'][0])
    {
        list($response) = $this->serviceSettingDeleteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingDeleteWithHttpInfo
     *
     * 删除配置
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingDeleteWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingDelete'][0])
    {
        $request = $this->serviceSettingDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingDeleteAsync
     *
     * 删除配置
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingDeleteAsync($id, string $contentType = self::contentTypes['serviceSettingDelete'][0])
    {
        return $this->serviceSettingDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingDeleteAsyncWithHttpInfo
     *
     * 删除配置
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingDelete'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingDelete'
     *
     * @param  int $id 配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingDeleteRequest($id, string $contentType = self::contentTypes['serviceSettingDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingDelete'
            );
        }


        $resourcePath = '/ServiceSetting/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingGroup
     *
     * 获取服务分组详情
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroup'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse
     */
    public function serviceSettingGroup($id, string $contentType = self::contentTypes['serviceSettingGroup'][0])
    {
        list($response) = $this->serviceSettingGroupWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingGroupWithHttpInfo
     *
     * 获取服务分组详情
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroup'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingGroupWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingGroup'][0])
    {
        $request = $this->serviceSettingGroupRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingGroupAsync
     *
     * 获取服务分组详情
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupAsync($id, string $contentType = self::contentTypes['serviceSettingGroup'][0])
    {
        return $this->serviceSettingGroupAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingGroupAsyncWithHttpInfo
     *
     * 获取服务分组详情
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingGroup'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupApiResponse';
        $request = $this->serviceSettingGroupRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingGroup'
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingGroupRequest($id, string $contentType = self::contentTypes['serviceSettingGroup'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingGroup'
            );
        }


        $resourcePath = '/ServiceSetting/Groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingGroupDelete
     *
     * 删除服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingGroupDelete($id, string $contentType = self::contentTypes['serviceSettingGroupDelete'][0])
    {
        list($response) = $this->serviceSettingGroupDeleteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingGroupDeleteWithHttpInfo
     *
     * 删除服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingGroupDeleteWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingGroupDelete'][0])
    {
        $request = $this->serviceSettingGroupDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingGroupDeleteAsync
     *
     * 删除服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupDeleteAsync($id, string $contentType = self::contentTypes['serviceSettingGroupDelete'][0])
    {
        return $this->serviceSettingGroupDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingGroupDeleteAsyncWithHttpInfo
     *
     * 删除服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingGroupDelete'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingGroupDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingGroupDelete'
     *
     * @param  int $id 服务分组ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingGroupDeleteRequest($id, string $contentType = self::contentTypes['serviceSettingGroupDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingGroupDelete'
            );
        }


        $resourcePath = '/ServiceSetting/Groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingGroupPost
     *
     * 添加服务分组
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse
     */
    public function serviceSettingGroupPost($service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPost'][0])
    {
        list($response) = $this->serviceSettingGroupPostWithHttpInfo($service_group, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingGroupPostWithHttpInfo
     *
     * 添加服务分组
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingGroupPostWithHttpInfo($service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPost'][0])
    {
        $request = $this->serviceSettingGroupPostRequest($service_group, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingGroupPostAsync
     *
     * 添加服务分组
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupPostAsync($service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPost'][0])
    {
        return $this->serviceSettingGroupPostAsyncWithHttpInfo($service_group, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingGroupPostAsyncWithHttpInfo
     *
     * 添加服务分组
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupPostAsyncWithHttpInfo($service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPost'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingGroupPostResultApiResponse';
        $request = $this->serviceSettingGroupPostRequest($service_group, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingGroupPost'
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingGroupPostRequest($service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPost'][0])
    {



        $resourcePath = '/ServiceSetting/Groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($service_group)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($service_group));
            } else {
                $httpBody = $service_group;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingGroupPut
     *
     * 更新服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingGroupPut($id, $service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPut'][0])
    {
        list($response) = $this->serviceSettingGroupPutWithHttpInfo($id, $service_group, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingGroupPutWithHttpInfo
     *
     * 更新服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingGroupPutWithHttpInfo($id, $service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPut'][0])
    {
        $request = $this->serviceSettingGroupPutRequest($id, $service_group, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingGroupPutAsync
     *
     * 更新服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupPutAsync($id, $service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPut'][0])
    {
        return $this->serviceSettingGroupPutAsyncWithHttpInfo($id, $service_group, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingGroupPutAsyncWithHttpInfo
     *
     * 更新服务分组
     *
     * @param  int $id 服务分组ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupPutAsyncWithHttpInfo($id, $service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingGroupPutRequest($id, $service_group, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingGroupPut'
     *
     * @param  int $id 服务分组ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceGroup|null $service_group 服务分组实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroupPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingGroupPutRequest($id, $service_group = null, string $contentType = self::contentTypes['serviceSettingGroupPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingGroupPut'
            );
        }



        $resourcePath = '/ServiceSetting/Groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($service_group)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($service_group));
            } else {
                $httpBody = $service_group;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingGroups
     *
     * 获取服务分组列表
     *
     * @param  int|null $provider_id 服务商ID (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroups'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse
     */
    public function serviceSettingGroups($provider_id = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingGroups'][0])
    {
        list($response) = $this->serviceSettingGroupsWithHttpInfo($provider_id, $show_flag, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingGroupsWithHttpInfo
     *
     * 获取服务分组列表
     *
     * @param  int|null $provider_id 服务商ID (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroups'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingGroupsWithHttpInfo($provider_id = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingGroups'][0])
    {
        $request = $this->serviceSettingGroupsRequest($provider_id, $show_flag, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingGroupsAsync
     *
     * 获取服务分组列表
     *
     * @param  int|null $provider_id 服务商ID (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupsAsync($provider_id = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingGroups'][0])
    {
        return $this->serviceSettingGroupsAsyncWithHttpInfo($provider_id, $show_flag, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingGroupsAsyncWithHttpInfo
     *
     * 获取服务分组列表
     *
     * @param  int|null $provider_id 服务商ID (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingGroupsAsyncWithHttpInfo($provider_id = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingGroups'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceGroupListApiResponse';
        $request = $this->serviceSettingGroupsRequest($provider_id, $show_flag, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingGroups'
     *
     * @param  int|null $provider_id 服务商ID (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingGroupsRequest($provider_id = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingGroups'][0])
    {




        $resourcePath = '/ServiceSetting/Groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_id,
            'providerId', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_flag,
            'showFlag', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingItem
     *
     * 服务配置详情
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItem'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse
     */
    public function serviceSettingItem($id, string $contentType = self::contentTypes['serviceSettingItem'][0])
    {
        list($response) = $this->serviceSettingItemWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingItemWithHttpInfo
     *
     * 服务配置详情
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItem'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingItemWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingItem'][0])
    {
        $request = $this->serviceSettingItemRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingItemAsync
     *
     * 服务配置详情
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemAsync($id, string $contentType = self::contentTypes['serviceSettingItem'][0])
    {
        return $this->serviceSettingItemAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingItemAsyncWithHttpInfo
     *
     * 服务配置详情
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingItem'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceItemApiResponse';
        $request = $this->serviceSettingItemRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingItem'
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItem'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingItemRequest($id, string $contentType = self::contentTypes['serviceSettingItem'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingItem'
            );
        }


        $resourcePath = '/ServiceSetting/Items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingItemDelete
     *
     * 删除服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingItemDelete($id, string $contentType = self::contentTypes['serviceSettingItemDelete'][0])
    {
        list($response) = $this->serviceSettingItemDeleteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingItemDeleteWithHttpInfo
     *
     * 删除服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingItemDeleteWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingItemDelete'][0])
    {
        $request = $this->serviceSettingItemDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingItemDeleteAsync
     *
     * 删除服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemDeleteAsync($id, string $contentType = self::contentTypes['serviceSettingItemDelete'][0])
    {
        return $this->serviceSettingItemDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingItemDeleteAsyncWithHttpInfo
     *
     * 删除服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingItemDelete'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingItemDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingItemDelete'
     *
     * @param  int $id 服务配置ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingItemDeleteRequest($id, string $contentType = self::contentTypes['serviceSettingItemDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingItemDelete'
            );
        }


        $resourcePath = '/ServiceSetting/Items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingItemPost
     *
     * 添加服务配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse
     */
    public function serviceSettingItemPost($service_item = null, string $contentType = self::contentTypes['serviceSettingItemPost'][0])
    {
        list($response) = $this->serviceSettingItemPostWithHttpInfo($service_item, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingItemPostWithHttpInfo
     *
     * 添加服务配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingItemPostWithHttpInfo($service_item = null, string $contentType = self::contentTypes['serviceSettingItemPost'][0])
    {
        $request = $this->serviceSettingItemPostRequest($service_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingItemPostAsync
     *
     * 添加服务配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemPostAsync($service_item = null, string $contentType = self::contentTypes['serviceSettingItemPost'][0])
    {
        return $this->serviceSettingItemPostAsyncWithHttpInfo($service_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingItemPostAsyncWithHttpInfo
     *
     * 添加服务配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemPostAsyncWithHttpInfo($service_item = null, string $contentType = self::contentTypes['serviceSettingItemPost'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingItemPostResultApiResponse';
        $request = $this->serviceSettingItemPostRequest($service_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingItemPost'
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingItemPostRequest($service_item = null, string $contentType = self::contentTypes['serviceSettingItemPost'][0])
    {



        $resourcePath = '/ServiceSetting/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($service_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($service_item));
            } else {
                $httpBody = $service_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingItemPut
     *
     * 更新服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingItemPut($id, $service_item = null, string $contentType = self::contentTypes['serviceSettingItemPut'][0])
    {
        list($response) = $this->serviceSettingItemPutWithHttpInfo($id, $service_item, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingItemPutWithHttpInfo
     *
     * 更新服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingItemPutWithHttpInfo($id, $service_item = null, string $contentType = self::contentTypes['serviceSettingItemPut'][0])
    {
        $request = $this->serviceSettingItemPutRequest($id, $service_item, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingItemPutAsync
     *
     * 更新服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemPutAsync($id, $service_item = null, string $contentType = self::contentTypes['serviceSettingItemPut'][0])
    {
        return $this->serviceSettingItemPutAsyncWithHttpInfo($id, $service_item, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingItemPutAsyncWithHttpInfo
     *
     * 更新服务配置
     *
     * @param  int $id 服务配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemPutAsyncWithHttpInfo($id, $service_item = null, string $contentType = self::contentTypes['serviceSettingItemPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingItemPutRequest($id, $service_item, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingItemPut'
     *
     * @param  int $id 服务配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceItem|null $service_item 服务配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItemPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingItemPutRequest($id, $service_item = null, string $contentType = self::contentTypes['serviceSettingItemPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingItemPut'
            );
        }



        $resourcePath = '/ServiceSetting/Items/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($service_item)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($service_item));
            } else {
                $httpBody = $service_item;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingItems
     *
     * 服务配置列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItems'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse
     */
    public function serviceSettingItems($biz_code = null, $provider_code = null, $group_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingItems'][0])
    {
        list($response) = $this->serviceSettingItemsWithHttpInfo($biz_code, $provider_code, $group_code, $show_flag, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingItemsWithHttpInfo
     *
     * 服务配置列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItems'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingItemsWithHttpInfo($biz_code = null, $provider_code = null, $group_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingItems'][0])
    {
        $request = $this->serviceSettingItemsRequest($biz_code, $provider_code, $group_code, $show_flag, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingItemsAsync
     *
     * 服务配置列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemsAsync($biz_code = null, $provider_code = null, $group_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingItems'][0])
    {
        return $this->serviceSettingItemsAsyncWithHttpInfo($biz_code, $provider_code, $group_code, $show_flag, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingItemsAsyncWithHttpInfo
     *
     * 服务配置列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingItemsAsyncWithHttpInfo($biz_code = null, $provider_code = null, $group_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingItems'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceItemListApiResponse';
        $request = $this->serviceSettingItemsRequest($biz_code, $provider_code, $group_code, $show_flag, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingItems'
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingItems'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingItemsRequest($biz_code = null, $provider_code = null, $group_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingItems'][0])
    {






        $resourcePath = '/ServiceSetting/Items';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $biz_code,
            'bizCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_code,
            'providerCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group_code,
            'groupCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_flag,
            'showFlag', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingPost
     *
     * 增加配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse
     */
    public function serviceSettingPost($settings = null, string $contentType = self::contentTypes['serviceSettingPost'][0])
    {
        list($response) = $this->serviceSettingPostWithHttpInfo($settings, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingPostWithHttpInfo
     *
     * 增加配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingPostWithHttpInfo($settings = null, string $contentType = self::contentTypes['serviceSettingPost'][0])
    {
        $request = $this->serviceSettingPostRequest($settings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingPostAsync
     *
     * 增加配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingPostAsync($settings = null, string $contentType = self::contentTypes['serviceSettingPost'][0])
    {
        return $this->serviceSettingPostAsyncWithHttpInfo($settings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingPostAsyncWithHttpInfo
     *
     * 增加配置
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingPostAsyncWithHttpInfo($settings = null, string $contentType = self::contentTypes['serviceSettingPost'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingSettingPostResultApiResponse';
        $request = $this->serviceSettingPostRequest($settings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingPost'
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingPostRequest($settings = null, string $contentType = self::contentTypes['serviceSettingPost'][0])
    {



        $resourcePath = '/ServiceSetting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($settings)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($settings));
            } else {
                $httpBody = $settings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingProvider
     *
     * 获取服务商详情
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProvider'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse
     */
    public function serviceSettingProvider($id, string $contentType = self::contentTypes['serviceSettingProvider'][0])
    {
        list($response) = $this->serviceSettingProviderWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingProviderWithHttpInfo
     *
     * 获取服务商详情
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProvider'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingProviderWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingProvider'][0])
    {
        $request = $this->serviceSettingProviderRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingProviderAsync
     *
     * 获取服务商详情
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderAsync($id, string $contentType = self::contentTypes['serviceSettingProvider'][0])
    {
        return $this->serviceSettingProviderAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingProviderAsyncWithHttpInfo
     *
     * 获取服务商详情
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingProvider'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderApiResponse';
        $request = $this->serviceSettingProviderRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingProvider'
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProvider'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingProviderRequest($id, string $contentType = self::contentTypes['serviceSettingProvider'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingProvider'
            );
        }


        $resourcePath = '/ServiceSetting/Providers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingProviderDelete
     *
     * 删除服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingProviderDelete($id, string $contentType = self::contentTypes['serviceSettingProviderDelete'][0])
    {
        list($response) = $this->serviceSettingProviderDeleteWithHttpInfo($id, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingProviderDeleteWithHttpInfo
     *
     * 删除服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderDelete'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingProviderDeleteWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingProviderDelete'][0])
    {
        $request = $this->serviceSettingProviderDeleteRequest($id, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingProviderDeleteAsync
     *
     * 删除服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderDeleteAsync($id, string $contentType = self::contentTypes['serviceSettingProviderDelete'][0])
    {
        return $this->serviceSettingProviderDeleteAsyncWithHttpInfo($id, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingProviderDeleteAsyncWithHttpInfo
     *
     * 删除服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderDeleteAsyncWithHttpInfo($id, string $contentType = self::contentTypes['serviceSettingProviderDelete'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingProviderDeleteRequest($id, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingProviderDelete'
     *
     * @param  int $id 服务商ID (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingProviderDeleteRequest($id, string $contentType = self::contentTypes['serviceSettingProviderDelete'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingProviderDelete'
            );
        }


        $resourcePath = '/ServiceSetting/Providers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingProviderPost
     *
     * 添加服务商
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse
     */
    public function serviceSettingProviderPost($service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPost'][0])
    {
        list($response) = $this->serviceSettingProviderPostWithHttpInfo($service_provider, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingProviderPostWithHttpInfo
     *
     * 添加服务商
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPost'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingProviderPostWithHttpInfo($service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPost'][0])
    {
        $request = $this->serviceSettingProviderPostRequest($service_provider, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingProviderPostAsync
     *
     * 添加服务商
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderPostAsync($service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPost'][0])
    {
        return $this->serviceSettingProviderPostAsyncWithHttpInfo($service_provider, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingProviderPostAsyncWithHttpInfo
     *
     * 添加服务商
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderPostAsyncWithHttpInfo($service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPost'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceSettingProviderPostResultApiResponse';
        $request = $this->serviceSettingProviderPostRequest($service_provider, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingProviderPost'
     *
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingProviderPostRequest($service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPost'][0])
    {



        $resourcePath = '/ServiceSetting/Providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($service_provider)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($service_provider));
            } else {
                $httpBody = $service_provider;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingProviderPut
     *
     * 更新服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingProviderPut($id, $service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPut'][0])
    {
        list($response) = $this->serviceSettingProviderPutWithHttpInfo($id, $service_provider, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingProviderPutWithHttpInfo
     *
     * 更新服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingProviderPutWithHttpInfo($id, $service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPut'][0])
    {
        $request = $this->serviceSettingProviderPutRequest($id, $service_provider, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingProviderPutAsync
     *
     * 更新服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderPutAsync($id, $service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPut'][0])
    {
        return $this->serviceSettingProviderPutAsyncWithHttpInfo($id, $service_provider, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingProviderPutAsyncWithHttpInfo
     *
     * 更新服务商
     *
     * @param  int $id 服务商ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProviderPutAsyncWithHttpInfo($id, $service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingProviderPutRequest($id, $service_provider, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingProviderPut'
     *
     * @param  int $id 服务商ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\ServiceProvider|null $service_provider 服务商实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviderPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingProviderPutRequest($id, $service_provider = null, string $contentType = self::contentTypes['serviceSettingProviderPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingProviderPut'
            );
        }



        $resourcePath = '/ServiceSetting/Providers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($service_provider)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($service_provider));
            } else {
                $httpBody = $service_provider;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingProviders
     *
     * 获取服务商列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviders'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse
     */
    public function serviceSettingProviders($biz_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingProviders'][0])
    {
        list($response) = $this->serviceSettingProvidersWithHttpInfo($biz_code, $show_flag, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingProvidersWithHttpInfo
     *
     * 获取服务商列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviders'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingProvidersWithHttpInfo($biz_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingProviders'][0])
    {
        $request = $this->serviceSettingProvidersRequest($biz_code, $show_flag, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingProvidersAsync
     *
     * 获取服务商列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProvidersAsync($biz_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingProviders'][0])
    {
        return $this->serviceSettingProvidersAsyncWithHttpInfo($biz_code, $show_flag, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingProvidersAsyncWithHttpInfo
     *
     * 获取服务商列表
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingProvidersAsyncWithHttpInfo($biz_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingProviders'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\ServiceProviderListApiResponse';
        $request = $this->serviceSettingProvidersRequest($biz_code, $show_flag, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingProviders'
     *
     * @param  string|null $biz_code 业务代码 (optional)
     * @param  bool|null $show_flag 是否显示 (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingProviders'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingProvidersRequest($biz_code = null, $show_flag = false, string $contentType = self::contentTypes['serviceSettingProviders'][0])
    {




        $resourcePath = '/ServiceSetting/Providers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $biz_code,
            'bizCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $show_flag,
            'showFlag', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettingPut
     *
     * 更新配置
     *
     * @param  int $id 配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse
     */
    public function serviceSettingPut($id, $settings = null, string $contentType = self::contentTypes['serviceSettingPut'][0])
    {
        list($response) = $this->serviceSettingPutWithHttpInfo($id, $settings, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingPutWithHttpInfo
     *
     * 更新配置
     *
     * @param  int $id 配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPut'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingPutWithHttpInfo($id, $settings = null, string $contentType = self::contentTypes['serviceSettingPut'][0])
    {
        $request = $this->serviceSettingPutRequest($id, $settings, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingPutAsync
     *
     * 更新配置
     *
     * @param  int $id 配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingPutAsync($id, $settings = null, string $contentType = self::contentTypes['serviceSettingPut'][0])
    {
        return $this->serviceSettingPutAsyncWithHttpInfo($id, $settings, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingPutAsyncWithHttpInfo
     *
     * 更新配置
     *
     * @param  int $id 配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingPutAsyncWithHttpInfo($id, $settings = null, string $contentType = self::contentTypes['serviceSettingPut'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\BooleanApiResponse';
        $request = $this->serviceSettingPutRequest($id, $settings, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettingPut'
     *
     * @param  int $id 配置ID (required)
     * @param  \ZSGF\Client\ZSGF\Client\Model\Settings|null $settings 配置实体 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettingPut'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingPutRequest($id, $settings = null, string $contentType = self::contentTypes['serviceSettingPut'][0])
    {

        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serviceSettingPut'
            );
        }



        $resourcePath = '/ServiceSetting/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($settings)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($settings));
            } else {
                $httpBody = $settings;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serviceSettings
     *
     * 获取配置列表
     *
     * @param  string $biz_code 业务代码 (required)
     * @param  string $biz_id 业务标识 (required)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $code 配置项代码 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettings'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse
     */
    public function serviceSettings($biz_code, $biz_id, $provider_code = null, $group_code = null, $tag = null, $code = null, string $contentType = self::contentTypes['serviceSettings'][0])
    {
        list($response) = $this->serviceSettingsWithHttpInfo($biz_code, $biz_id, $provider_code, $group_code, $tag, $code, $contentType);
        return $response;
    }

    /**
     * Operation serviceSettingsWithHttpInfo
     *
     * 获取配置列表
     *
     * @param  string $biz_code 业务代码 (required)
     * @param  string $biz_id 业务标识 (required)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $code 配置项代码 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettings'] to see the possible values for this operation
     *
     * @throws \ZSGF\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function serviceSettingsWithHttpInfo($biz_code, $biz_id, $provider_code = null, $group_code = null, $tag = null, $code = null, string $contentType = self::contentTypes['serviceSettings'][0])
    {
        $request = $this->serviceSettingsRequest($biz_code, $biz_id, $provider_code, $group_code, $tag, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serviceSettingsAsync
     *
     * 获取配置列表
     *
     * @param  string $biz_code 业务代码 (required)
     * @param  string $biz_id 业务标识 (required)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $code 配置项代码 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingsAsync($biz_code, $biz_id, $provider_code = null, $group_code = null, $tag = null, $code = null, string $contentType = self::contentTypes['serviceSettings'][0])
    {
        return $this->serviceSettingsAsyncWithHttpInfo($biz_code, $biz_id, $provider_code, $group_code, $tag, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serviceSettingsAsyncWithHttpInfo
     *
     * 获取配置列表
     *
     * @param  string $biz_code 业务代码 (required)
     * @param  string $biz_id 业务标识 (required)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $code 配置项代码 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serviceSettingsAsyncWithHttpInfo($biz_code, $biz_id, $provider_code = null, $group_code = null, $tag = null, $code = null, string $contentType = self::contentTypes['serviceSettings'][0])
    {
        $returnType = '\ZSGF\Client\ZSGF\Client\Model\SettingsListApiResponse';
        $request = $this->serviceSettingsRequest($biz_code, $biz_id, $provider_code, $group_code, $tag, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serviceSettings'
     *
     * @param  string $biz_code 业务代码 (required)
     * @param  string $biz_id 业务标识 (required)
     * @param  string|null $provider_code 服务商代码 (optional)
     * @param  string|null $group_code 分组代码 (optional)
     * @param  string|null $tag 标签 (optional)
     * @param  string|null $code 配置项代码 (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['serviceSettings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function serviceSettingsRequest($biz_code, $biz_id, $provider_code = null, $group_code = null, $tag = null, $code = null, string $contentType = self::contentTypes['serviceSettings'][0])
    {

        // verify the required parameter 'biz_code' is set
        if ($biz_code === null || (is_array($biz_code) && count($biz_code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $biz_code when calling serviceSettings'
            );
        }

        // verify the required parameter 'biz_id' is set
        if ($biz_id === null || (is_array($biz_id) && count($biz_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $biz_id when calling serviceSettings'
            );
        }






        $resourcePath = '/ServiceSetting';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $biz_code,
            'bizCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $biz_id,
            'bizId', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $provider_code,
            'providerCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $group_code,
            'groupCode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $tag,
            'tag', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires Bearer authentication (access token)
        if (!empty($this->config->getAccessToken())) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
