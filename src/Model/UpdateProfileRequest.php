<?php
/**
 * UpdateProfileRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * UpdateProfileRequest Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UpdateProfileRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UpdateProfileRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'avatar' => 'string',
        'data' => 'string',
        'nick_name' => 'string',
        'interest_tags' => 'string',
        'biography' => 'string',
        'gender' => 'string',
        'birthday' => '\DateTime',
        'occupation' => 'string',
        'education' => 'string',
        'contact' => 'string',
        'languages' => 'string',
        'social_links' => 'string',
        'relationship_status' => 'string',
        'company' => 'string',
        'industry' => 'string',
        'company_position' => 'string',
        'private_settings' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'avatar' => null,
        'data' => null,
        'nick_name' => null,
        'interest_tags' => null,
        'biography' => null,
        'gender' => null,
        'birthday' => 'date-time',
        'occupation' => null,
        'education' => null,
        'contact' => null,
        'languages' => null,
        'social_links' => null,
        'relationship_status' => null,
        'company' => null,
        'industry' => null,
        'company_position' => null,
        'private_settings' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'avatar' => true,
        'data' => true,
        'nick_name' => true,
        'interest_tags' => true,
        'biography' => true,
        'gender' => true,
        'birthday' => true,
        'occupation' => true,
        'education' => true,
        'contact' => true,
        'languages' => true,
        'social_links' => true,
        'relationship_status' => true,
        'company' => true,
        'industry' => true,
        'company_position' => true,
        'private_settings' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'avatar' => 'avatar',
        'data' => 'data',
        'nick_name' => 'nickName',
        'interest_tags' => 'interestTags',
        'biography' => 'biography',
        'gender' => 'gender',
        'birthday' => 'birthday',
        'occupation' => 'occupation',
        'education' => 'education',
        'contact' => 'contact',
        'languages' => 'languages',
        'social_links' => 'socialLinks',
        'relationship_status' => 'relationshipStatus',
        'company' => 'company',
        'industry' => 'industry',
        'company_position' => 'companyPosition',
        'private_settings' => 'privateSettings'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'avatar' => 'setAvatar',
        'data' => 'setData',
        'nick_name' => 'setNickName',
        'interest_tags' => 'setInterestTags',
        'biography' => 'setBiography',
        'gender' => 'setGender',
        'birthday' => 'setBirthday',
        'occupation' => 'setOccupation',
        'education' => 'setEducation',
        'contact' => 'setContact',
        'languages' => 'setLanguages',
        'social_links' => 'setSocialLinks',
        'relationship_status' => 'setRelationshipStatus',
        'company' => 'setCompany',
        'industry' => 'setIndustry',
        'company_position' => 'setCompanyPosition',
        'private_settings' => 'setPrivateSettings'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'avatar' => 'getAvatar',
        'data' => 'getData',
        'nick_name' => 'getNickName',
        'interest_tags' => 'getInterestTags',
        'biography' => 'getBiography',
        'gender' => 'getGender',
        'birthday' => 'getBirthday',
        'occupation' => 'getOccupation',
        'education' => 'getEducation',
        'contact' => 'getContact',
        'languages' => 'getLanguages',
        'social_links' => 'getSocialLinks',
        'relationship_status' => 'getRelationshipStatus',
        'company' => 'getCompany',
        'industry' => 'getIndustry',
        'company_position' => 'getCompanyPosition',
        'private_settings' => 'getPrivateSettings'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('interest_tags', $data ?? [], null);
        $this->setIfExists('biography', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('occupation', $data ?? [], null);
        $this->setIfExists('education', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('social_links', $data ?? [], null);
        $this->setIfExists('relationship_status', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('industry', $data ?? [], null);
        $this->setIfExists('company_position', $data ?? [], null);
        $this->setIfExists('private_settings', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['avatar']) && (mb_strlen($this->container['avatar']) > 255)) {
            $invalidProperties[] = "invalid value for 'avatar', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['nick_name']) && (mb_strlen($this->container['nick_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'nick_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['biography']) && (mb_strlen($this->container['biography']) > 500)) {
            $invalidProperties[] = "invalid value for 'biography', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['gender']) && (mb_strlen($this->container['gender']) > 15)) {
            $invalidProperties[] = "invalid value for 'gender', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['occupation']) && (mb_strlen($this->container['occupation']) > 50)) {
            $invalidProperties[] = "invalid value for 'occupation', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['education']) && (mb_strlen($this->container['education']) > 50)) {
            $invalidProperties[] = "invalid value for 'education', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact']) && (mb_strlen($this->container['contact']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['languages']) && (mb_strlen($this->container['languages']) > 50)) {
            $invalidProperties[] = "invalid value for 'languages', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['social_links']) && (mb_strlen($this->container['social_links']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_links', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['relationship_status']) && (mb_strlen($this->container['relationship_status']) > 20)) {
            $invalidProperties[] = "invalid value for 'relationship_status', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 100)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['industry']) && (mb_strlen($this->container['industry']) > 50)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_position']) && (mb_strlen($this->container['company_position']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_position', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['private_settings']) && (mb_strlen($this->container['private_settings']) > 500)) {
            $invalidProperties[] = "invalid value for 'private_settings', the character length must be smaller than or equal to 500.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar 用户头像的链接或路径
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($avatar) && (mb_strlen($avatar) > 255)) {
            throw new \InvalidArgumentException('invalid length for $avatar when calling UpdateProfileRequest., must be smaller than or equal to 255.');
        }

        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data 用户的其他数据，可以是序列化后的对象或JSON字符串
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name 用户的昵称
     *
     * @return self
     */
    public function setNickName($nick_name)
    {
        if (is_null($nick_name)) {
            array_push($this->openAPINullablesSetToNull, 'nick_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nick_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nick_name) && (mb_strlen($nick_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $nick_name when calling UpdateProfileRequest., must be smaller than or equal to 50.');
        }

        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets interest_tags
     *
     * @return string|null
     */
    public function getInterestTags()
    {
        return $this->container['interest_tags'];
    }

    /**
     * Sets interest_tags
     *
     * @param string|null $interest_tags 兴趣标签
     *
     * @return self
     */
    public function setInterestTags($interest_tags)
    {
        if (is_null($interest_tags)) {
            array_push($this->openAPINullablesSetToNull, 'interest_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interest_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interest_tags'] = $interest_tags;

        return $this;
    }

    /**
     * Gets biography
     *
     * @return string|null
     */
    public function getBiography()
    {
        return $this->container['biography'];
    }

    /**
     * Sets biography
     *
     * @param string|null $biography 个人简介
     *
     * @return self
     */
    public function setBiography($biography)
    {
        if (is_null($biography)) {
            array_push($this->openAPINullablesSetToNull, 'biography');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('biography', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($biography) && (mb_strlen($biography) > 500)) {
            throw new \InvalidArgumentException('invalid length for $biography when calling UpdateProfileRequest., must be smaller than or equal to 500.');
        }

        $this->container['biography'] = $biography;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender 性别
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gender) && (mb_strlen($gender) > 15)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling UpdateProfileRequest., must be smaller than or equal to 15.');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday 生日
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            array_push($this->openAPINullablesSetToNull, 'birthday');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthday', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets occupation
     *
     * @return string|null
     */
    public function getOccupation()
    {
        return $this->container['occupation'];
    }

    /**
     * Sets occupation
     *
     * @param string|null $occupation 职业
     *
     * @return self
     */
    public function setOccupation($occupation)
    {
        if (is_null($occupation)) {
            array_push($this->openAPINullablesSetToNull, 'occupation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('occupation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($occupation) && (mb_strlen($occupation) > 50)) {
            throw new \InvalidArgumentException('invalid length for $occupation when calling UpdateProfileRequest., must be smaller than or equal to 50.');
        }

        $this->container['occupation'] = $occupation;

        return $this;
    }

    /**
     * Gets education
     *
     * @return string|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param string|null $education 学历
     *
     * @return self
     */
    public function setEducation($education)
    {
        if (is_null($education)) {
            array_push($this->openAPINullablesSetToNull, 'education');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('education', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($education) && (mb_strlen($education) > 50)) {
            throw new \InvalidArgumentException('invalid length for $education when calling UpdateProfileRequest., must be smaller than or equal to 50.');
        }

        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string|null $contact 联系方式
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            array_push($this->openAPINullablesSetToNull, 'contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact) && (mb_strlen($contact) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact when calling UpdateProfileRequest., must be smaller than or equal to 255.');
        }

        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string|null $languages 语言
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            array_push($this->openAPINullablesSetToNull, 'languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($languages) && (mb_strlen($languages) > 50)) {
            throw new \InvalidArgumentException('invalid length for $languages when calling UpdateProfileRequest., must be smaller than or equal to 50.');
        }

        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets social_links
     *
     * @return string|null
     */
    public function getSocialLinks()
    {
        return $this->container['social_links'];
    }

    /**
     * Sets social_links
     *
     * @param string|null $social_links 社交网络链接
     *
     * @return self
     */
    public function setSocialLinks($social_links)
    {
        if (is_null($social_links)) {
            array_push($this->openAPINullablesSetToNull, 'social_links');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('social_links', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($social_links) && (mb_strlen($social_links) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_links when calling UpdateProfileRequest., must be smaller than or equal to 255.');
        }

        $this->container['social_links'] = $social_links;

        return $this;
    }

    /**
     * Gets relationship_status
     *
     * @return string|null
     */
    public function getRelationshipStatus()
    {
        return $this->container['relationship_status'];
    }

    /**
     * Sets relationship_status
     *
     * @param string|null $relationship_status 婚姻状态
     *
     * @return self
     */
    public function setRelationshipStatus($relationship_status)
    {
        if (is_null($relationship_status)) {
            array_push($this->openAPINullablesSetToNull, 'relationship_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relationship_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($relationship_status) && (mb_strlen($relationship_status) > 20)) {
            throw new \InvalidArgumentException('invalid length for $relationship_status when calling UpdateProfileRequest., must be smaller than or equal to 20.');
        }

        $this->container['relationship_status'] = $relationship_status;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company 公司
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            array_push($this->openAPINullablesSetToNull, 'company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company) && (mb_strlen($company) > 100)) {
            throw new \InvalidArgumentException('invalid length for $company when calling UpdateProfileRequest., must be smaller than or equal to 100.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string|null
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string|null $industry 行业
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        if (is_null($industry)) {
            array_push($this->openAPINullablesSetToNull, 'industry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry) && (mb_strlen($industry) > 50)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling UpdateProfileRequest., must be smaller than or equal to 50.');
        }

        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets company_position
     *
     * @return string|null
     */
    public function getCompanyPosition()
    {
        return $this->container['company_position'];
    }

    /**
     * Sets company_position
     *
     * @param string|null $company_position 行业职位
     *
     * @return self
     */
    public function setCompanyPosition($company_position)
    {
        if (is_null($company_position)) {
            array_push($this->openAPINullablesSetToNull, 'company_position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company_position) && (mb_strlen($company_position) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_position when calling UpdateProfileRequest., must be smaller than or equal to 50.');
        }

        $this->container['company_position'] = $company_position;

        return $this;
    }

    /**
     * Gets private_settings
     *
     * @return string|null
     */
    public function getPrivateSettings()
    {
        return $this->container['private_settings'];
    }

    /**
     * Sets private_settings
     *
     * @param string|null $private_settings 私密设置
     *
     * @return self
     */
    public function setPrivateSettings($private_settings)
    {
        if (is_null($private_settings)) {
            array_push($this->openAPINullablesSetToNull, 'private_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('private_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($private_settings) && (mb_strlen($private_settings) > 500)) {
            throw new \InvalidArgumentException('invalid length for $private_settings when calling UpdateProfileRequest., must be smaller than or equal to 500.');
        }

        $this->container['private_settings'] = $private_settings;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


