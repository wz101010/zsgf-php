<?php
/**
 * User
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * User Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class User implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'User';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'platform' => 'string',
        'union_id' => 'string',
        'nick_name' => 'string',
        'avatar' => 'string',
        'data' => 'string',
        'user_name' => 'string',
        'pwd' => 'string',
        'email' => 'string',
        'email_is_valid' => 'bool',
        'phone' => 'string',
        'phone_is_valid' => 'bool',
        'relation_chain' => 'string',
        'interest_tags' => 'string',
        'biography' => 'string',
        'gender' => 'string',
        'birthday' => '\DateTime',
        'occupation' => 'string',
        'education' => 'string',
        'contact' => 'string',
        'languages' => 'string',
        'social_links' => 'string',
        'relationship_status' => 'string',
        'company' => 'string',
        'industry' => 'string',
        'company_position' => 'string',
        'private_settings' => 'string',
        'is_lock' => 'bool',
        'lock_until' => '\DateTime',
        'enable_user_name_sign_in' => 'bool',
        'enable_email_sign_in' => 'bool',
        'enable_phone_sign_in' => 'bool',
        'enable_union_id_sign_in' => 'bool',
        'enable_o_auth' => 'bool',
        'enable2_fa_auth' => 'bool',
        'create_date' => '\DateTime',
        'last_update' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'platform' => null,
        'union_id' => null,
        'nick_name' => null,
        'avatar' => null,
        'data' => null,
        'user_name' => null,
        'pwd' => null,
        'email' => null,
        'email_is_valid' => null,
        'phone' => null,
        'phone_is_valid' => null,
        'relation_chain' => null,
        'interest_tags' => null,
        'biography' => null,
        'gender' => null,
        'birthday' => 'date-time',
        'occupation' => null,
        'education' => null,
        'contact' => null,
        'languages' => null,
        'social_links' => null,
        'relationship_status' => null,
        'company' => null,
        'industry' => null,
        'company_position' => null,
        'private_settings' => null,
        'is_lock' => null,
        'lock_until' => 'date-time',
        'enable_user_name_sign_in' => null,
        'enable_email_sign_in' => null,
        'enable_phone_sign_in' => null,
        'enable_union_id_sign_in' => null,
        'enable_o_auth' => null,
        'enable2_fa_auth' => null,
        'create_date' => 'date-time',
        'last_update' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'platform' => true,
        'union_id' => true,
        'nick_name' => true,
        'avatar' => true,
        'data' => true,
        'user_name' => true,
        'pwd' => true,
        'email' => true,
        'email_is_valid' => false,
        'phone' => true,
        'phone_is_valid' => false,
        'relation_chain' => true,
        'interest_tags' => true,
        'biography' => true,
        'gender' => true,
        'birthday' => true,
        'occupation' => true,
        'education' => true,
        'contact' => true,
        'languages' => true,
        'social_links' => true,
        'relationship_status' => true,
        'company' => true,
        'industry' => true,
        'company_position' => true,
        'private_settings' => true,
        'is_lock' => false,
        'lock_until' => false,
        'enable_user_name_sign_in' => false,
        'enable_email_sign_in' => false,
        'enable_phone_sign_in' => false,
        'enable_union_id_sign_in' => false,
        'enable_o_auth' => false,
        'enable2_fa_auth' => false,
        'create_date' => false,
        'last_update' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'platform' => 'platform',
        'union_id' => 'unionID',
        'nick_name' => 'nickName',
        'avatar' => 'avatar',
        'data' => 'data',
        'user_name' => 'userName',
        'pwd' => 'pwd',
        'email' => 'email',
        'email_is_valid' => 'emailIsValid',
        'phone' => 'phone',
        'phone_is_valid' => 'phoneIsValid',
        'relation_chain' => 'relationChain',
        'interest_tags' => 'interestTags',
        'biography' => 'biography',
        'gender' => 'gender',
        'birthday' => 'birthday',
        'occupation' => 'occupation',
        'education' => 'education',
        'contact' => 'contact',
        'languages' => 'languages',
        'social_links' => 'socialLinks',
        'relationship_status' => 'relationshipStatus',
        'company' => 'company',
        'industry' => 'industry',
        'company_position' => 'companyPosition',
        'private_settings' => 'privateSettings',
        'is_lock' => 'isLock',
        'lock_until' => 'lockUntil',
        'enable_user_name_sign_in' => 'enableUserNameSignIn',
        'enable_email_sign_in' => 'enableEmailSignIn',
        'enable_phone_sign_in' => 'enablePhoneSignIn',
        'enable_union_id_sign_in' => 'enableUnionIDSignIn',
        'enable_o_auth' => 'enableOAuth',
        'enable2_fa_auth' => 'enable2FAAuth',
        'create_date' => 'createDate',
        'last_update' => 'lastUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'platform' => 'setPlatform',
        'union_id' => 'setUnionId',
        'nick_name' => 'setNickName',
        'avatar' => 'setAvatar',
        'data' => 'setData',
        'user_name' => 'setUserName',
        'pwd' => 'setPwd',
        'email' => 'setEmail',
        'email_is_valid' => 'setEmailIsValid',
        'phone' => 'setPhone',
        'phone_is_valid' => 'setPhoneIsValid',
        'relation_chain' => 'setRelationChain',
        'interest_tags' => 'setInterestTags',
        'biography' => 'setBiography',
        'gender' => 'setGender',
        'birthday' => 'setBirthday',
        'occupation' => 'setOccupation',
        'education' => 'setEducation',
        'contact' => 'setContact',
        'languages' => 'setLanguages',
        'social_links' => 'setSocialLinks',
        'relationship_status' => 'setRelationshipStatus',
        'company' => 'setCompany',
        'industry' => 'setIndustry',
        'company_position' => 'setCompanyPosition',
        'private_settings' => 'setPrivateSettings',
        'is_lock' => 'setIsLock',
        'lock_until' => 'setLockUntil',
        'enable_user_name_sign_in' => 'setEnableUserNameSignIn',
        'enable_email_sign_in' => 'setEnableEmailSignIn',
        'enable_phone_sign_in' => 'setEnablePhoneSignIn',
        'enable_union_id_sign_in' => 'setEnableUnionIdSignIn',
        'enable_o_auth' => 'setEnableOAuth',
        'enable2_fa_auth' => 'setEnable2FaAuth',
        'create_date' => 'setCreateDate',
        'last_update' => 'setLastUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'platform' => 'getPlatform',
        'union_id' => 'getUnionId',
        'nick_name' => 'getNickName',
        'avatar' => 'getAvatar',
        'data' => 'getData',
        'user_name' => 'getUserName',
        'pwd' => 'getPwd',
        'email' => 'getEmail',
        'email_is_valid' => 'getEmailIsValid',
        'phone' => 'getPhone',
        'phone_is_valid' => 'getPhoneIsValid',
        'relation_chain' => 'getRelationChain',
        'interest_tags' => 'getInterestTags',
        'biography' => 'getBiography',
        'gender' => 'getGender',
        'birthday' => 'getBirthday',
        'occupation' => 'getOccupation',
        'education' => 'getEducation',
        'contact' => 'getContact',
        'languages' => 'getLanguages',
        'social_links' => 'getSocialLinks',
        'relationship_status' => 'getRelationshipStatus',
        'company' => 'getCompany',
        'industry' => 'getIndustry',
        'company_position' => 'getCompanyPosition',
        'private_settings' => 'getPrivateSettings',
        'is_lock' => 'getIsLock',
        'lock_until' => 'getLockUntil',
        'enable_user_name_sign_in' => 'getEnableUserNameSignIn',
        'enable_email_sign_in' => 'getEnableEmailSignIn',
        'enable_phone_sign_in' => 'getEnablePhoneSignIn',
        'enable_union_id_sign_in' => 'getEnableUnionIdSignIn',
        'enable_o_auth' => 'getEnableOAuth',
        'enable2_fa_auth' => 'getEnable2FaAuth',
        'create_date' => 'getCreateDate',
        'last_update' => 'getLastUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('platform', $data ?? [], null);
        $this->setIfExists('union_id', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('pwd', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_is_valid', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('phone_is_valid', $data ?? [], null);
        $this->setIfExists('relation_chain', $data ?? [], null);
        $this->setIfExists('interest_tags', $data ?? [], null);
        $this->setIfExists('biography', $data ?? [], null);
        $this->setIfExists('gender', $data ?? [], null);
        $this->setIfExists('birthday', $data ?? [], null);
        $this->setIfExists('occupation', $data ?? [], null);
        $this->setIfExists('education', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('languages', $data ?? [], null);
        $this->setIfExists('social_links', $data ?? [], null);
        $this->setIfExists('relationship_status', $data ?? [], null);
        $this->setIfExists('company', $data ?? [], null);
        $this->setIfExists('industry', $data ?? [], null);
        $this->setIfExists('company_position', $data ?? [], null);
        $this->setIfExists('private_settings', $data ?? [], null);
        $this->setIfExists('is_lock', $data ?? [], null);
        $this->setIfExists('lock_until', $data ?? [], null);
        $this->setIfExists('enable_user_name_sign_in', $data ?? [], null);
        $this->setIfExists('enable_email_sign_in', $data ?? [], null);
        $this->setIfExists('enable_phone_sign_in', $data ?? [], null);
        $this->setIfExists('enable_union_id_sign_in', $data ?? [], null);
        $this->setIfExists('enable_o_auth', $data ?? [], null);
        $this->setIfExists('enable2_fa_auth', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['platform']) && (mb_strlen($this->container['platform']) > 50)) {
            $invalidProperties[] = "invalid value for 'platform', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['union_id']) && (mb_strlen($this->container['union_id']) > 100)) {
            $invalidProperties[] = "invalid value for 'union_id', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['nick_name']) && (mb_strlen($this->container['nick_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'nick_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['avatar']) && (mb_strlen($this->container['avatar']) > 255)) {
            $invalidProperties[] = "invalid value for 'avatar', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['user_name']) && (mb_strlen($this->container['user_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['pwd']) && (mb_strlen($this->container['pwd']) > 255)) {
            $invalidProperties[] = "invalid value for 'pwd', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['email']) && (mb_strlen($this->container['email']) > 255)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['phone']) && (mb_strlen($this->container['phone']) > 20)) {
            $invalidProperties[] = "invalid value for 'phone', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['biography']) && (mb_strlen($this->container['biography']) > 500)) {
            $invalidProperties[] = "invalid value for 'biography', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['gender']) && (mb_strlen($this->container['gender']) > 15)) {
            $invalidProperties[] = "invalid value for 'gender', the character length must be smaller than or equal to 15.";
        }

        if (!is_null($this->container['occupation']) && (mb_strlen($this->container['occupation']) > 50)) {
            $invalidProperties[] = "invalid value for 'occupation', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['education']) && (mb_strlen($this->container['education']) > 50)) {
            $invalidProperties[] = "invalid value for 'education', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['contact']) && (mb_strlen($this->container['contact']) > 255)) {
            $invalidProperties[] = "invalid value for 'contact', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['languages']) && (mb_strlen($this->container['languages']) > 50)) {
            $invalidProperties[] = "invalid value for 'languages', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['social_links']) && (mb_strlen($this->container['social_links']) > 255)) {
            $invalidProperties[] = "invalid value for 'social_links', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['relationship_status']) && (mb_strlen($this->container['relationship_status']) > 20)) {
            $invalidProperties[] = "invalid value for 'relationship_status', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['company']) && (mb_strlen($this->container['company']) > 100)) {
            $invalidProperties[] = "invalid value for 'company', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['industry']) && (mb_strlen($this->container['industry']) > 50)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['company_position']) && (mb_strlen($this->container['company_position']) > 50)) {
            $invalidProperties[] = "invalid value for 'company_position', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['private_settings']) && (mb_strlen($this->container['private_settings']) > 500)) {
            $invalidProperties[] = "invalid value for 'private_settings', the character length must be smaller than or equal to 500.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string|null
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string|null $platform platform
     *
     * @return self
     */
    public function setPlatform($platform)
    {
        if (is_null($platform)) {
            array_push($this->openAPINullablesSetToNull, 'platform');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('platform', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($platform) && (mb_strlen($platform) > 50)) {
            throw new \InvalidArgumentException('invalid length for $platform when calling User., must be smaller than or equal to 50.');
        }

        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets union_id
     *
     * @return string|null
     */
    public function getUnionId()
    {
        return $this->container['union_id'];
    }

    /**
     * Sets union_id
     *
     * @param string|null $union_id union_id
     *
     * @return self
     */
    public function setUnionId($union_id)
    {
        if (is_null($union_id)) {
            array_push($this->openAPINullablesSetToNull, 'union_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('union_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($union_id) && (mb_strlen($union_id) > 100)) {
            throw new \InvalidArgumentException('invalid length for $union_id when calling User., must be smaller than or equal to 100.');
        }

        $this->container['union_id'] = $union_id;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name nick_name
     *
     * @return self
     */
    public function setNickName($nick_name)
    {
        if (is_null($nick_name)) {
            array_push($this->openAPINullablesSetToNull, 'nick_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nick_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nick_name) && (mb_strlen($nick_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $nick_name when calling User., must be smaller than or equal to 50.');
        }

        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar avatar
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($avatar) && (mb_strlen($avatar) > 255)) {
            throw new \InvalidArgumentException('invalid length for $avatar when calling User., must be smaller than or equal to 255.');
        }

        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data data
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            array_push($this->openAPINullablesSetToNull, 'user_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('user_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($user_name) && (mb_strlen($user_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling User., must be smaller than or equal to 50.');
        }

        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets pwd
     *
     * @return string|null
     */
    public function getPwd()
    {
        return $this->container['pwd'];
    }

    /**
     * Sets pwd
     *
     * @param string|null $pwd pwd
     *
     * @return self
     */
    public function setPwd($pwd)
    {
        if (is_null($pwd)) {
            array_push($this->openAPINullablesSetToNull, 'pwd');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pwd', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pwd) && (mb_strlen($pwd) > 255)) {
            throw new \InvalidArgumentException('invalid length for $pwd when calling User., must be smaller than or equal to 255.');
        }

        $this->container['pwd'] = $pwd;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email email
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($email) && (mb_strlen($email) > 255)) {
            throw new \InvalidArgumentException('invalid length for $email when calling User., must be smaller than or equal to 255.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_is_valid
     *
     * @return bool|null
     */
    public function getEmailIsValid()
    {
        return $this->container['email_is_valid'];
    }

    /**
     * Sets email_is_valid
     *
     * @param bool|null $email_is_valid email_is_valid
     *
     * @return self
     */
    public function setEmailIsValid($email_is_valid)
    {
        if (is_null($email_is_valid)) {
            throw new \InvalidArgumentException('non-nullable email_is_valid cannot be null');
        }
        $this->container['email_is_valid'] = $email_is_valid;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($phone) && (mb_strlen($phone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $phone when calling User., must be smaller than or equal to 20.');
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_is_valid
     *
     * @return bool|null
     */
    public function getPhoneIsValid()
    {
        return $this->container['phone_is_valid'];
    }

    /**
     * Sets phone_is_valid
     *
     * @param bool|null $phone_is_valid phone_is_valid
     *
     * @return self
     */
    public function setPhoneIsValid($phone_is_valid)
    {
        if (is_null($phone_is_valid)) {
            throw new \InvalidArgumentException('non-nullable phone_is_valid cannot be null');
        }
        $this->container['phone_is_valid'] = $phone_is_valid;

        return $this;
    }

    /**
     * Gets relation_chain
     *
     * @return string|null
     */
    public function getRelationChain()
    {
        return $this->container['relation_chain'];
    }

    /**
     * Sets relation_chain
     *
     * @param string|null $relation_chain relation_chain
     *
     * @return self
     */
    public function setRelationChain($relation_chain)
    {
        if (is_null($relation_chain)) {
            array_push($this->openAPINullablesSetToNull, 'relation_chain');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relation_chain', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['relation_chain'] = $relation_chain;

        return $this;
    }

    /**
     * Gets interest_tags
     *
     * @return string|null
     */
    public function getInterestTags()
    {
        return $this->container['interest_tags'];
    }

    /**
     * Sets interest_tags
     *
     * @param string|null $interest_tags interest_tags
     *
     * @return self
     */
    public function setInterestTags($interest_tags)
    {
        if (is_null($interest_tags)) {
            array_push($this->openAPINullablesSetToNull, 'interest_tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('interest_tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['interest_tags'] = $interest_tags;

        return $this;
    }

    /**
     * Gets biography
     *
     * @return string|null
     */
    public function getBiography()
    {
        return $this->container['biography'];
    }

    /**
     * Sets biography
     *
     * @param string|null $biography biography
     *
     * @return self
     */
    public function setBiography($biography)
    {
        if (is_null($biography)) {
            array_push($this->openAPINullablesSetToNull, 'biography');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('biography', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($biography) && (mb_strlen($biography) > 500)) {
            throw new \InvalidArgumentException('invalid length for $biography when calling User., must be smaller than or equal to 500.');
        }

        $this->container['biography'] = $biography;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return string|null
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param string|null $gender gender
     *
     * @return self
     */
    public function setGender($gender)
    {
        if (is_null($gender)) {
            array_push($this->openAPINullablesSetToNull, 'gender');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gender', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($gender) && (mb_strlen($gender) > 15)) {
            throw new \InvalidArgumentException('invalid length for $gender when calling User., must be smaller than or equal to 15.');
        }

        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets birthday
     *
     * @return \DateTime|null
     */
    public function getBirthday()
    {
        return $this->container['birthday'];
    }

    /**
     * Sets birthday
     *
     * @param \DateTime|null $birthday birthday
     *
     * @return self
     */
    public function setBirthday($birthday)
    {
        if (is_null($birthday)) {
            array_push($this->openAPINullablesSetToNull, 'birthday');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('birthday', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['birthday'] = $birthday;

        return $this;
    }

    /**
     * Gets occupation
     *
     * @return string|null
     */
    public function getOccupation()
    {
        return $this->container['occupation'];
    }

    /**
     * Sets occupation
     *
     * @param string|null $occupation occupation
     *
     * @return self
     */
    public function setOccupation($occupation)
    {
        if (is_null($occupation)) {
            array_push($this->openAPINullablesSetToNull, 'occupation');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('occupation', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($occupation) && (mb_strlen($occupation) > 50)) {
            throw new \InvalidArgumentException('invalid length for $occupation when calling User., must be smaller than or equal to 50.');
        }

        $this->container['occupation'] = $occupation;

        return $this;
    }

    /**
     * Gets education
     *
     * @return string|null
     */
    public function getEducation()
    {
        return $this->container['education'];
    }

    /**
     * Sets education
     *
     * @param string|null $education education
     *
     * @return self
     */
    public function setEducation($education)
    {
        if (is_null($education)) {
            array_push($this->openAPINullablesSetToNull, 'education');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('education', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($education) && (mb_strlen($education) > 50)) {
            throw new \InvalidArgumentException('invalid length for $education when calling User., must be smaller than or equal to 50.');
        }

        $this->container['education'] = $education;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return string|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param string|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            array_push($this->openAPINullablesSetToNull, 'contact');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('contact', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($contact) && (mb_strlen($contact) > 255)) {
            throw new \InvalidArgumentException('invalid length for $contact when calling User., must be smaller than or equal to 255.');
        }

        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string|null $languages languages
     *
     * @return self
     */
    public function setLanguages($languages)
    {
        if (is_null($languages)) {
            array_push($this->openAPINullablesSetToNull, 'languages');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('languages', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($languages) && (mb_strlen($languages) > 50)) {
            throw new \InvalidArgumentException('invalid length for $languages when calling User., must be smaller than or equal to 50.');
        }

        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets social_links
     *
     * @return string|null
     */
    public function getSocialLinks()
    {
        return $this->container['social_links'];
    }

    /**
     * Sets social_links
     *
     * @param string|null $social_links social_links
     *
     * @return self
     */
    public function setSocialLinks($social_links)
    {
        if (is_null($social_links)) {
            array_push($this->openAPINullablesSetToNull, 'social_links');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('social_links', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($social_links) && (mb_strlen($social_links) > 255)) {
            throw new \InvalidArgumentException('invalid length for $social_links when calling User., must be smaller than or equal to 255.');
        }

        $this->container['social_links'] = $social_links;

        return $this;
    }

    /**
     * Gets relationship_status
     *
     * @return string|null
     */
    public function getRelationshipStatus()
    {
        return $this->container['relationship_status'];
    }

    /**
     * Sets relationship_status
     *
     * @param string|null $relationship_status relationship_status
     *
     * @return self
     */
    public function setRelationshipStatus($relationship_status)
    {
        if (is_null($relationship_status)) {
            array_push($this->openAPINullablesSetToNull, 'relationship_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('relationship_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($relationship_status) && (mb_strlen($relationship_status) > 20)) {
            throw new \InvalidArgumentException('invalid length for $relationship_status when calling User., must be smaller than or equal to 20.');
        }

        $this->container['relationship_status'] = $relationship_status;

        return $this;
    }

    /**
     * Gets company
     *
     * @return string|null
     */
    public function getCompany()
    {
        return $this->container['company'];
    }

    /**
     * Sets company
     *
     * @param string|null $company company
     *
     * @return self
     */
    public function setCompany($company)
    {
        if (is_null($company)) {
            array_push($this->openAPINullablesSetToNull, 'company');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company) && (mb_strlen($company) > 100)) {
            throw new \InvalidArgumentException('invalid length for $company when calling User., must be smaller than or equal to 100.');
        }

        $this->container['company'] = $company;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string|null
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string|null $industry industry
     *
     * @return self
     */
    public function setIndustry($industry)
    {
        if (is_null($industry)) {
            array_push($this->openAPINullablesSetToNull, 'industry');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($industry) && (mb_strlen($industry) > 50)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling User., must be smaller than or equal to 50.');
        }

        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets company_position
     *
     * @return string|null
     */
    public function getCompanyPosition()
    {
        return $this->container['company_position'];
    }

    /**
     * Sets company_position
     *
     * @param string|null $company_position company_position
     *
     * @return self
     */
    public function setCompanyPosition($company_position)
    {
        if (is_null($company_position)) {
            array_push($this->openAPINullablesSetToNull, 'company_position');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('company_position', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($company_position) && (mb_strlen($company_position) > 50)) {
            throw new \InvalidArgumentException('invalid length for $company_position when calling User., must be smaller than or equal to 50.');
        }

        $this->container['company_position'] = $company_position;

        return $this;
    }

    /**
     * Gets private_settings
     *
     * @return string|null
     */
    public function getPrivateSettings()
    {
        return $this->container['private_settings'];
    }

    /**
     * Sets private_settings
     *
     * @param string|null $private_settings private_settings
     *
     * @return self
     */
    public function setPrivateSettings($private_settings)
    {
        if (is_null($private_settings)) {
            array_push($this->openAPINullablesSetToNull, 'private_settings');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('private_settings', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($private_settings) && (mb_strlen($private_settings) > 500)) {
            throw new \InvalidArgumentException('invalid length for $private_settings when calling User., must be smaller than or equal to 500.');
        }

        $this->container['private_settings'] = $private_settings;

        return $this;
    }

    /**
     * Gets is_lock
     *
     * @return bool|null
     */
    public function getIsLock()
    {
        return $this->container['is_lock'];
    }

    /**
     * Sets is_lock
     *
     * @param bool|null $is_lock is_lock
     *
     * @return self
     */
    public function setIsLock($is_lock)
    {
        if (is_null($is_lock)) {
            throw new \InvalidArgumentException('non-nullable is_lock cannot be null');
        }
        $this->container['is_lock'] = $is_lock;

        return $this;
    }

    /**
     * Gets lock_until
     *
     * @return \DateTime|null
     */
    public function getLockUntil()
    {
        return $this->container['lock_until'];
    }

    /**
     * Sets lock_until
     *
     * @param \DateTime|null $lock_until lock_until
     *
     * @return self
     */
    public function setLockUntil($lock_until)
    {
        if (is_null($lock_until)) {
            throw new \InvalidArgumentException('non-nullable lock_until cannot be null');
        }
        $this->container['lock_until'] = $lock_until;

        return $this;
    }

    /**
     * Gets enable_user_name_sign_in
     *
     * @return bool|null
     */
    public function getEnableUserNameSignIn()
    {
        return $this->container['enable_user_name_sign_in'];
    }

    /**
     * Sets enable_user_name_sign_in
     *
     * @param bool|null $enable_user_name_sign_in enable_user_name_sign_in
     *
     * @return self
     */
    public function setEnableUserNameSignIn($enable_user_name_sign_in)
    {
        if (is_null($enable_user_name_sign_in)) {
            throw new \InvalidArgumentException('non-nullable enable_user_name_sign_in cannot be null');
        }
        $this->container['enable_user_name_sign_in'] = $enable_user_name_sign_in;

        return $this;
    }

    /**
     * Gets enable_email_sign_in
     *
     * @return bool|null
     */
    public function getEnableEmailSignIn()
    {
        return $this->container['enable_email_sign_in'];
    }

    /**
     * Sets enable_email_sign_in
     *
     * @param bool|null $enable_email_sign_in enable_email_sign_in
     *
     * @return self
     */
    public function setEnableEmailSignIn($enable_email_sign_in)
    {
        if (is_null($enable_email_sign_in)) {
            throw new \InvalidArgumentException('non-nullable enable_email_sign_in cannot be null');
        }
        $this->container['enable_email_sign_in'] = $enable_email_sign_in;

        return $this;
    }

    /**
     * Gets enable_phone_sign_in
     *
     * @return bool|null
     */
    public function getEnablePhoneSignIn()
    {
        return $this->container['enable_phone_sign_in'];
    }

    /**
     * Sets enable_phone_sign_in
     *
     * @param bool|null $enable_phone_sign_in enable_phone_sign_in
     *
     * @return self
     */
    public function setEnablePhoneSignIn($enable_phone_sign_in)
    {
        if (is_null($enable_phone_sign_in)) {
            throw new \InvalidArgumentException('non-nullable enable_phone_sign_in cannot be null');
        }
        $this->container['enable_phone_sign_in'] = $enable_phone_sign_in;

        return $this;
    }

    /**
     * Gets enable_union_id_sign_in
     *
     * @return bool|null
     */
    public function getEnableUnionIdSignIn()
    {
        return $this->container['enable_union_id_sign_in'];
    }

    /**
     * Sets enable_union_id_sign_in
     *
     * @param bool|null $enable_union_id_sign_in enable_union_id_sign_in
     *
     * @return self
     */
    public function setEnableUnionIdSignIn($enable_union_id_sign_in)
    {
        if (is_null($enable_union_id_sign_in)) {
            throw new \InvalidArgumentException('non-nullable enable_union_id_sign_in cannot be null');
        }
        $this->container['enable_union_id_sign_in'] = $enable_union_id_sign_in;

        return $this;
    }

    /**
     * Gets enable_o_auth
     *
     * @return bool|null
     */
    public function getEnableOAuth()
    {
        return $this->container['enable_o_auth'];
    }

    /**
     * Sets enable_o_auth
     *
     * @param bool|null $enable_o_auth enable_o_auth
     *
     * @return self
     */
    public function setEnableOAuth($enable_o_auth)
    {
        if (is_null($enable_o_auth)) {
            throw new \InvalidArgumentException('non-nullable enable_o_auth cannot be null');
        }
        $this->container['enable_o_auth'] = $enable_o_auth;

        return $this;
    }

    /**
     * Gets enable2_fa_auth
     *
     * @return bool|null
     */
    public function getEnable2FaAuth()
    {
        return $this->container['enable2_fa_auth'];
    }

    /**
     * Sets enable2_fa_auth
     *
     * @param bool|null $enable2_fa_auth enable2_fa_auth
     *
     * @return self
     */
    public function setEnable2FaAuth($enable2_fa_auth)
    {
        if (is_null($enable2_fa_auth)) {
            throw new \InvalidArgumentException('non-nullable enable2_fa_auth cannot be null');
        }
        $this->container['enable2_fa_auth'] = $enable2_fa_auth;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date create_date
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update last_update
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


