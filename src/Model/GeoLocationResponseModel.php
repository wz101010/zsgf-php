<?php
/**
 * GeoLocationResponseModel
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * GeoLocationResponseModel Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class GeoLocationResponseModel implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'GeoLocationResponseModel';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'location_name' => 'string',
        'latitude' => 'float',
        'longitude' => 'float',
        'location_type' => 'string',
        'recipient_name' => 'string',
        'phone_number' => 'string',
        'email' => 'string',
        'country' => 'string',
        'state' => 'string',
        'city' => 'string',
        'district' => 'string',
        'street' => 'string',
        'zip_code' => 'string',
        'address' => 'string',
        'map_type' => 'string',
        'remark' => 'string',
        'tags' => 'string',
        'enable' => 'bool',
        'show_index' => 'int',
        'create_date' => '\DateTime',
        'last_update' => '\DateTime',
        'id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'location_name' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'location_type' => null,
        'recipient_name' => null,
        'phone_number' => 'tel',
        'email' => 'email',
        'country' => null,
        'state' => null,
        'city' => null,
        'district' => null,
        'street' => null,
        'zip_code' => null,
        'address' => null,
        'map_type' => null,
        'remark' => null,
        'tags' => null,
        'enable' => null,
        'show_index' => 'int32',
        'create_date' => 'date-time',
        'last_update' => 'date-time',
        'id' => 'int32'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'location_name' => true,
        'latitude' => false,
        'longitude' => false,
        'location_type' => false,
        'recipient_name' => true,
        'phone_number' => true,
        'email' => true,
        'country' => true,
        'state' => true,
        'city' => true,
        'district' => true,
        'street' => true,
        'zip_code' => true,
        'address' => true,
        'map_type' => true,
        'remark' => true,
        'tags' => true,
        'enable' => true,
        'show_index' => true,
        'create_date' => false,
        'last_update' => false,
        'id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'location_name' => 'locationName',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'location_type' => 'locationType',
        'recipient_name' => 'recipientName',
        'phone_number' => 'phoneNumber',
        'email' => 'email',
        'country' => 'country',
        'state' => 'state',
        'city' => 'city',
        'district' => 'district',
        'street' => 'street',
        'zip_code' => 'zipCode',
        'address' => 'address',
        'map_type' => 'mapType',
        'remark' => 'remark',
        'tags' => 'tags',
        'enable' => 'enable',
        'show_index' => 'showIndex',
        'create_date' => 'createDate',
        'last_update' => 'lastUpdate',
        'id' => 'id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'location_name' => 'setLocationName',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'location_type' => 'setLocationType',
        'recipient_name' => 'setRecipientName',
        'phone_number' => 'setPhoneNumber',
        'email' => 'setEmail',
        'country' => 'setCountry',
        'state' => 'setState',
        'city' => 'setCity',
        'district' => 'setDistrict',
        'street' => 'setStreet',
        'zip_code' => 'setZipCode',
        'address' => 'setAddress',
        'map_type' => 'setMapType',
        'remark' => 'setRemark',
        'tags' => 'setTags',
        'enable' => 'setEnable',
        'show_index' => 'setShowIndex',
        'create_date' => 'setCreateDate',
        'last_update' => 'setLastUpdate',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'location_name' => 'getLocationName',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'location_type' => 'getLocationType',
        'recipient_name' => 'getRecipientName',
        'phone_number' => 'getPhoneNumber',
        'email' => 'getEmail',
        'country' => 'getCountry',
        'state' => 'getState',
        'city' => 'getCity',
        'district' => 'getDistrict',
        'street' => 'getStreet',
        'zip_code' => 'getZipCode',
        'address' => 'getAddress',
        'map_type' => 'getMapType',
        'remark' => 'getRemark',
        'tags' => 'getTags',
        'enable' => 'getEnable',
        'show_index' => 'getShowIndex',
        'create_date' => 'getCreateDate',
        'last_update' => 'getLastUpdate',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('location_name', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('location_type', $data ?? [], null);
        $this->setIfExists('recipient_name', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('state', $data ?? [], null);
        $this->setIfExists('city', $data ?? [], null);
        $this->setIfExists('district', $data ?? [], null);
        $this->setIfExists('street', $data ?? [], null);
        $this->setIfExists('zip_code', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('map_type', $data ?? [], null);
        $this->setIfExists('remark', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('enable', $data ?? [], null);
        $this->setIfExists('show_index', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['location_name']) && (mb_strlen($this->container['location_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'location_name', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['latitude'] === null) {
            $invalidProperties[] = "'latitude' can't be null";
        }
        if ($this->container['longitude'] === null) {
            $invalidProperties[] = "'longitude' can't be null";
        }
        if ($this->container['location_type'] === null) {
            $invalidProperties[] = "'location_type' can't be null";
        }
        if ((mb_strlen($this->container['location_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'location_type', the character length must be smaller than or equal to 20.";
        }

        if ((mb_strlen($this->container['location_type']) < 1)) {
            $invalidProperties[] = "invalid value for 'location_type', the character length must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['recipient_name']) && (mb_strlen($this->container['recipient_name']) > 50)) {
            $invalidProperties[] = "invalid value for 'recipient_name', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['country']) && (mb_strlen($this->container['country']) > 20)) {
            $invalidProperties[] = "invalid value for 'country', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['state']) && (mb_strlen($this->container['state']) > 20)) {
            $invalidProperties[] = "invalid value for 'state', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['city']) && (mb_strlen($this->container['city']) > 20)) {
            $invalidProperties[] = "invalid value for 'city', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['district']) && (mb_strlen($this->container['district']) > 50)) {
            $invalidProperties[] = "invalid value for 'district', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['street']) && (mb_strlen($this->container['street']) > 255)) {
            $invalidProperties[] = "invalid value for 'street', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['zip_code']) && (mb_strlen($this->container['zip_code']) > 20)) {
            $invalidProperties[] = "invalid value for 'zip_code', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['address']) && (mb_strlen($this->container['address']) > 1000)) {
            $invalidProperties[] = "invalid value for 'address', the character length must be smaller than or equal to 1000.";
        }

        if (!is_null($this->container['map_type']) && (mb_strlen($this->container['map_type']) > 20)) {
            $invalidProperties[] = "invalid value for 'map_type', the character length must be smaller than or equal to 20.";
        }

        if (!is_null($this->container['remark']) && (mb_strlen($this->container['remark']) > 5000)) {
            $invalidProperties[] = "invalid value for 'remark', the character length must be smaller than or equal to 5000.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) > 1000)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be smaller than or equal to 1000.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets location_name
     *
     * @return string|null
     */
    public function getLocationName()
    {
        return $this->container['location_name'];
    }

    /**
     * Sets location_name
     *
     * @param string|null $location_name 地点的名称
     *
     * @return self
     */
    public function setLocationName($location_name)
    {
        if (is_null($location_name)) {
            array_push($this->openAPINullablesSetToNull, 'location_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('location_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($location_name) && (mb_strlen($location_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $location_name when calling GeoLocationResponseModel., must be smaller than or equal to 50.');
        }

        $this->container['location_name'] = $location_name;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float $latitude 纬度
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float $longitude 经度
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return string
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param string $location_type 地点的类型，如家庭、工作、学校等
     *
     * @return self
     */
    public function setLocationType($location_type)
    {
        if (is_null($location_type)) {
            throw new \InvalidArgumentException('non-nullable location_type cannot be null');
        }
        if ((mb_strlen($location_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $location_type when calling GeoLocationResponseModel., must be smaller than or equal to 20.');
        }
        if ((mb_strlen($location_type) < 1)) {
            throw new \InvalidArgumentException('invalid length for $location_type when calling GeoLocationResponseModel., must be bigger than or equal to 1.');
        }

        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets recipient_name
     *
     * @return string|null
     */
    public function getRecipientName()
    {
        return $this->container['recipient_name'];
    }

    /**
     * Sets recipient_name
     *
     * @param string|null $recipient_name 收货人姓名
     *
     * @return self
     */
    public function setRecipientName($recipient_name)
    {
        if (is_null($recipient_name)) {
            array_push($this->openAPINullablesSetToNull, 'recipient_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('recipient_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($recipient_name) && (mb_strlen($recipient_name) > 50)) {
            throw new \InvalidArgumentException('invalid length for $recipient_name when calling GeoLocationResponseModel., must be smaller than or equal to 50.');
        }

        $this->container['recipient_name'] = $recipient_name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return string|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param string|null $phone_number 收货人联系电话
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            array_push($this->openAPINullablesSetToNull, 'phone_number');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_number', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email 收货人电子邮件
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country 国家
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            array_push($this->openAPINullablesSetToNull, 'country');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('country', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($country) && (mb_strlen($country) > 20)) {
            throw new \InvalidArgumentException('invalid length for $country when calling GeoLocationResponseModel., must be smaller than or equal to 20.');
        }

        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string|null
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string|null $state 州/省
     *
     * @return self
     */
    public function setState($state)
    {
        if (is_null($state)) {
            array_push($this->openAPINullablesSetToNull, 'state');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('state', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($state) && (mb_strlen($state) > 20)) {
            throw new \InvalidArgumentException('invalid length for $state when calling GeoLocationResponseModel., must be smaller than or equal to 20.');
        }

        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string|null
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string|null $city 城市
     *
     * @return self
     */
    public function setCity($city)
    {
        if (is_null($city)) {
            array_push($this->openAPINullablesSetToNull, 'city');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('city', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($city) && (mb_strlen($city) > 20)) {
            throw new \InvalidArgumentException('invalid length for $city when calling GeoLocationResponseModel., must be smaller than or equal to 20.');
        }

        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets district
     *
     * @return string|null
     */
    public function getDistrict()
    {
        return $this->container['district'];
    }

    /**
     * Sets district
     *
     * @param string|null $district 区/县
     *
     * @return self
     */
    public function setDistrict($district)
    {
        if (is_null($district)) {
            array_push($this->openAPINullablesSetToNull, 'district');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('district', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($district) && (mb_strlen($district) > 50)) {
            throw new \InvalidArgumentException('invalid length for $district when calling GeoLocationResponseModel., must be smaller than or equal to 50.');
        }

        $this->container['district'] = $district;

        return $this;
    }

    /**
     * Gets street
     *
     * @return string|null
     */
    public function getStreet()
    {
        return $this->container['street'];
    }

    /**
     * Sets street
     *
     * @param string|null $street 街道
     *
     * @return self
     */
    public function setStreet($street)
    {
        if (is_null($street)) {
            array_push($this->openAPINullablesSetToNull, 'street');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('street', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($street) && (mb_strlen($street) > 255)) {
            throw new \InvalidArgumentException('invalid length for $street when calling GeoLocationResponseModel., must be smaller than or equal to 255.');
        }

        $this->container['street'] = $street;

        return $this;
    }

    /**
     * Gets zip_code
     *
     * @return string|null
     */
    public function getZipCode()
    {
        return $this->container['zip_code'];
    }

    /**
     * Sets zip_code
     *
     * @param string|null $zip_code 邮政编码
     *
     * @return self
     */
    public function setZipCode($zip_code)
    {
        if (is_null($zip_code)) {
            array_push($this->openAPINullablesSetToNull, 'zip_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('zip_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($zip_code) && (mb_strlen($zip_code) > 20)) {
            throw new \InvalidArgumentException('invalid length for $zip_code when calling GeoLocationResponseModel., must be smaller than or equal to 20.');
        }

        $this->container['zip_code'] = $zip_code;

        return $this;
    }

    /**
     * Gets address
     *
     * @return string|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param string|null $address 详细的地址信息
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            array_push($this->openAPINullablesSetToNull, 'address');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('address', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($address) && (mb_strlen($address) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $address when calling GeoLocationResponseModel., must be smaller than or equal to 1000.');
        }

        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets map_type
     *
     * @return string|null
     */
    public function getMapType()
    {
        return $this->container['map_type'];
    }

    /**
     * Sets map_type
     *
     * @param string|null $map_type 地址类型，百度、高德、谷歌
     *
     * @return self
     */
    public function setMapType($map_type)
    {
        if (is_null($map_type)) {
            array_push($this->openAPINullablesSetToNull, 'map_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('map_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($map_type) && (mb_strlen($map_type) > 20)) {
            throw new \InvalidArgumentException('invalid length for $map_type when calling GeoLocationResponseModel., must be smaller than or equal to 20.');
        }

        $this->container['map_type'] = $map_type;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string|null
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string|null $remark 备注
     *
     * @return self
     */
    public function setRemark($remark)
    {
        if (is_null($remark)) {
            array_push($this->openAPINullablesSetToNull, 'remark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remark) && (mb_strlen($remark) > 5000)) {
            throw new \InvalidArgumentException('invalid length for $remark when calling GeoLocationResponseModel., must be smaller than or equal to 5000.');
        }

        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags 标签
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tags) && (mb_strlen($tags) > 1000)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling GeoLocationResponseModel., must be smaller than or equal to 1000.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets enable
     *
     * @return bool|null
     */
    public function getEnable()
    {
        return $this->container['enable'];
    }

    /**
     * Sets enable
     *
     * @param bool|null $enable 启用
     *
     * @return self
     */
    public function setEnable($enable)
    {
        if (is_null($enable)) {
            array_push($this->openAPINullablesSetToNull, 'enable');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('enable', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['enable'] = $enable;

        return $this;
    }

    /**
     * Gets show_index
     *
     * @return int|null
     */
    public function getShowIndex()
    {
        return $this->container['show_index'];
    }

    /**
     * Sets show_index
     *
     * @param int|null $show_index 排序
     *
     * @return self
     */
    public function setShowIndex($show_index)
    {
        if (is_null($show_index)) {
            array_push($this->openAPINullablesSetToNull, 'show_index');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('show_index', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['show_index'] = $show_index;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date 创建时间
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update 最后更新的时间
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id ID
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


