<?php
/**
 * SignUpRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * SignUpRequest Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignUpRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignUpRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_name' => 'string',
        'pwd' => 'string',
        'nick_name' => 'string',
        'avatar' => 'string',
        'data' => 'string',
        'email' => 'string',
        'email_code' => 'string',
        'phone' => 'string',
        'phone_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_name' => null,
        'pwd' => null,
        'nick_name' => null,
        'avatar' => null,
        'data' => null,
        'email' => null,
        'email_code' => null,
        'phone' => null,
        'phone_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_name' => false,
        'pwd' => false,
        'nick_name' => true,
        'avatar' => true,
        'data' => true,
        'email' => true,
        'email_code' => true,
        'phone' => true,
        'phone_code' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_name' => 'userName',
        'pwd' => 'pwd',
        'nick_name' => 'nickName',
        'avatar' => 'avatar',
        'data' => 'data',
        'email' => 'email',
        'email_code' => 'emailCode',
        'phone' => 'phone',
        'phone_code' => 'phoneCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_name' => 'setUserName',
        'pwd' => 'setPwd',
        'nick_name' => 'setNickName',
        'avatar' => 'setAvatar',
        'data' => 'setData',
        'email' => 'setEmail',
        'email_code' => 'setEmailCode',
        'phone' => 'setPhone',
        'phone_code' => 'setPhoneCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_name' => 'getUserName',
        'pwd' => 'getPwd',
        'nick_name' => 'getNickName',
        'avatar' => 'getAvatar',
        'data' => 'getData',
        'email' => 'getEmail',
        'email_code' => 'getEmailCode',
        'phone' => 'getPhone',
        'phone_code' => 'getPhoneCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('pwd', $data ?? [], null);
        $this->setIfExists('nick_name', $data ?? [], null);
        $this->setIfExists('avatar', $data ?? [], null);
        $this->setIfExists('data', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('email_code', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('phone_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ((mb_strlen($this->container['user_name']) < 1)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['pwd'] === null) {
            $invalidProperties[] = "'pwd' can't be null";
        }
        if ((mb_strlen($this->container['pwd']) > 32)) {
            $invalidProperties[] = "invalid value for 'pwd', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['pwd']) < 6)) {
            $invalidProperties[] = "invalid value for 'pwd', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['nick_name']) && (mb_strlen($this->container['nick_name']) > 99)) {
            $invalidProperties[] = "invalid value for 'nick_name', the character length must be smaller than or equal to 99.";
        }

        if (!is_null($this->container['avatar']) && (mb_strlen($this->container['avatar']) > 999)) {
            $invalidProperties[] = "invalid value for 'avatar', the character length must be smaller than or equal to 999.";
        }

        if (!is_null($this->container['data']) && (mb_strlen($this->container['data']) > 9999)) {
            $invalidProperties[] = "invalid value for 'data', the character length must be smaller than or equal to 9999.";
        }

        if (!is_null($this->container['email']) && !preg_match("/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,5}$/", $this->container['email'])) {
            $invalidProperties[] = "invalid value for 'email', must be conform to the pattern /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,5}$/.";
        }

        if (!is_null($this->container['email_code']) && !preg_match("/\\d{4,8}$/", $this->container['email_code'])) {
            $invalidProperties[] = "invalid value for 'email_code', must be conform to the pattern /\\d{4,8}$/.";
        }

        if (!is_null($this->container['phone']) && !preg_match("/^(\\d{11})?$/", $this->container['phone'])) {
            $invalidProperties[] = "invalid value for 'phone', must be conform to the pattern /^(\\d{11})?$/.";
        }

        if (!is_null($this->container['phone_code']) && !preg_match("/\\d{4,8}$/", $this->container['phone_code'])) {
            $invalidProperties[] = "invalid value for 'phone_code', must be conform to the pattern /\\d{4,8}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name 登录账号，4~18位
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }

        if ((mb_strlen($user_name) < 1)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling SignUpRequest., must be bigger than or equal to 1.');
        }

        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets pwd
     *
     * @return string
     */
    public function getPwd()
    {
        return $this->container['pwd'];
    }

    /**
     * Sets pwd
     *
     * @param string $pwd 登录密码，6~32位
     *
     * @return self
     */
    public function setPwd($pwd)
    {
        if (is_null($pwd)) {
            throw new \InvalidArgumentException('non-nullable pwd cannot be null');
        }
        if ((mb_strlen($pwd) > 32)) {
            throw new \InvalidArgumentException('invalid length for $pwd when calling SignUpRequest., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($pwd) < 6)) {
            throw new \InvalidArgumentException('invalid length for $pwd when calling SignUpRequest., must be bigger than or equal to 6.');
        }

        $this->container['pwd'] = $pwd;

        return $this;
    }

    /**
     * Gets nick_name
     *
     * @return string|null
     */
    public function getNickName()
    {
        return $this->container['nick_name'];
    }

    /**
     * Sets nick_name
     *
     * @param string|null $nick_name 昵称
     *
     * @return self
     */
    public function setNickName($nick_name)
    {
        if (is_null($nick_name)) {
            array_push($this->openAPINullablesSetToNull, 'nick_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('nick_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($nick_name) && (mb_strlen($nick_name) > 99)) {
            throw new \InvalidArgumentException('invalid length for $nick_name when calling SignUpRequest., must be smaller than or equal to 99.');
        }

        $this->container['nick_name'] = $nick_name;

        return $this;
    }

    /**
     * Gets avatar
     *
     * @return string|null
     */
    public function getAvatar()
    {
        return $this->container['avatar'];
    }

    /**
     * Sets avatar
     *
     * @param string|null $avatar 头像
     *
     * @return self
     */
    public function setAvatar($avatar)
    {
        if (is_null($avatar)) {
            array_push($this->openAPINullablesSetToNull, 'avatar');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('avatar', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($avatar) && (mb_strlen($avatar) > 999)) {
            throw new \InvalidArgumentException('invalid length for $avatar when calling SignUpRequest., must be smaller than or equal to 999.');
        }

        $this->container['avatar'] = $avatar;

        return $this;
    }

    /**
     * Gets data
     *
     * @return string|null
     */
    public function getData()
    {
        return $this->container['data'];
    }

    /**
     * Sets data
     *
     * @param string|null $data 自定义数据
     *
     * @return self
     */
    public function setData($data)
    {
        if (is_null($data)) {
            array_push($this->openAPINullablesSetToNull, 'data');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('data', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($data) && (mb_strlen($data) > 9999)) {
            throw new \InvalidArgumentException('invalid length for $data when calling SignUpRequest., must be smaller than or equal to 9999.');
        }

        $this->container['data'] = $data;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email 邮箱
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            array_push($this->openAPINullablesSetToNull, 'email');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($email) && (!preg_match("/^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,5}$/", ObjectSerializer::toString($email)))) {
            throw new \InvalidArgumentException("invalid value for \$email when calling SignUpRequest., must conform to the pattern /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,5}$/.");
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets email_code
     *
     * @return string|null
     */
    public function getEmailCode()
    {
        return $this->container['email_code'];
    }

    /**
     * Sets email_code
     *
     * @param string|null $email_code 邮箱验证码（只有启用的邮箱验证码功能时，才需要传入）
     *
     * @return self
     */
    public function setEmailCode($email_code)
    {
        if (is_null($email_code)) {
            array_push($this->openAPINullablesSetToNull, 'email_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('email_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($email_code) && (!preg_match("/\\d{4,8}$/", ObjectSerializer::toString($email_code)))) {
            throw new \InvalidArgumentException("invalid value for \$email_code when calling SignUpRequest., must conform to the pattern /\\d{4,8}$/.");
        }

        $this->container['email_code'] = $email_code;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string|null $phone 手机号
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            array_push($this->openAPINullablesSetToNull, 'phone');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($phone) && (!preg_match("/^(\\d{11})?$/", ObjectSerializer::toString($phone)))) {
            throw new \InvalidArgumentException("invalid value for \$phone when calling SignUpRequest., must conform to the pattern /^(\\d{11})?$/.");
        }

        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets phone_code
     *
     * @return string|null
     */
    public function getPhoneCode()
    {
        return $this->container['phone_code'];
    }

    /**
     * Sets phone_code
     *
     * @param string|null $phone_code 手机验证码（只有启用的手机验证码功能时，才需要传入）
     *
     * @return self
     */
    public function setPhoneCode($phone_code)
    {
        if (is_null($phone_code)) {
            array_push($this->openAPINullablesSetToNull, 'phone_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('phone_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }

        if (!is_null($phone_code) && (!preg_match("/\\d{4,8}$/", ObjectSerializer::toString($phone_code)))) {
            throw new \InvalidArgumentException("invalid value for \$phone_code when calling SignUpRequest., must conform to the pattern /\\d{4,8}$/.");
        }

        $this->container['phone_code'] = $phone_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


