<?php
/**
 * App
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * App Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class App implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'App';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'user_id' => 'int',
        'project_id' => 'int',
        'website' => 'string',
        'name' => 'string',
        'logo' => 'string',
        'description' => 'string',
        'tags' => 'string',
        'app_key' => 'string',
        'app_secret' => 'string',
        'client_secret' => 'string',
        'ssh_publickey' => 'string',
        'share' => 'bool',
        'create_date' => '\DateTime',
        'last_update' => '\DateTime',
        'show' => 'bool',
        'show_index' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'user_id' => 'int64',
        'project_id' => 'int64',
        'website' => null,
        'name' => null,
        'logo' => null,
        'description' => null,
        'tags' => null,
        'app_key' => null,
        'app_secret' => null,
        'client_secret' => null,
        'ssh_publickey' => null,
        'share' => null,
        'create_date' => 'date-time',
        'last_update' => 'date-time',
        'show' => null,
        'show_index' => 'int64'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'user_id' => false,
        'project_id' => false,
        'website' => true,
        'name' => true,
        'logo' => true,
        'description' => true,
        'tags' => true,
        'app_key' => true,
        'app_secret' => true,
        'client_secret' => true,
        'ssh_publickey' => true,
        'share' => false,
        'create_date' => false,
        'last_update' => false,
        'show' => false,
        'show_index' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_id' => 'userID',
        'project_id' => 'projectID',
        'website' => 'website',
        'name' => 'name',
        'logo' => 'logo',
        'description' => 'description',
        'tags' => 'tags',
        'app_key' => 'appKey',
        'app_secret' => 'appSecret',
        'client_secret' => 'clientSecret',
        'ssh_publickey' => 'sshPublickey',
        'share' => 'share',
        'create_date' => 'createDate',
        'last_update' => 'lastUpdate',
        'show' => 'show',
        'show_index' => 'showIndex'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_id' => 'setUserId',
        'project_id' => 'setProjectId',
        'website' => 'setWebsite',
        'name' => 'setName',
        'logo' => 'setLogo',
        'description' => 'setDescription',
        'tags' => 'setTags',
        'app_key' => 'setAppKey',
        'app_secret' => 'setAppSecret',
        'client_secret' => 'setClientSecret',
        'ssh_publickey' => 'setSshPublickey',
        'share' => 'setShare',
        'create_date' => 'setCreateDate',
        'last_update' => 'setLastUpdate',
        'show' => 'setShow',
        'show_index' => 'setShowIndex'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_id' => 'getUserId',
        'project_id' => 'getProjectId',
        'website' => 'getWebsite',
        'name' => 'getName',
        'logo' => 'getLogo',
        'description' => 'getDescription',
        'tags' => 'getTags',
        'app_key' => 'getAppKey',
        'app_secret' => 'getAppSecret',
        'client_secret' => 'getClientSecret',
        'ssh_publickey' => 'getSshPublickey',
        'share' => 'getShare',
        'create_date' => 'getCreateDate',
        'last_update' => 'getLastUpdate',
        'show' => 'getShow',
        'show_index' => 'getShowIndex'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('project_id', $data ?? [], null);
        $this->setIfExists('website', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('logo', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('app_key', $data ?? [], null);
        $this->setIfExists('app_secret', $data ?? [], null);
        $this->setIfExists('client_secret', $data ?? [], null);
        $this->setIfExists('ssh_publickey', $data ?? [], null);
        $this->setIfExists('share', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
        $this->setIfExists('show', $data ?? [], null);
        $this->setIfExists('show_index', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) > 255)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['website']) && (mb_strlen($this->container['website']) < 0)) {
            $invalidProperties[] = "invalid value for 'website', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['logo']) && (mb_strlen($this->container['logo']) > 255)) {
            $invalidProperties[] = "invalid value for 'logo', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['logo']) && (mb_strlen($this->container['logo']) < 0)) {
            $invalidProperties[] = "invalid value for 'logo', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) > 255)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) < 0)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['app_key']) && (mb_strlen($this->container['app_key']) > 50)) {
            $invalidProperties[] = "invalid value for 'app_key', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['app_key']) && (mb_strlen($this->container['app_key']) < 0)) {
            $invalidProperties[] = "invalid value for 'app_key', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['app_secret']) && (mb_strlen($this->container['app_secret']) > 50)) {
            $invalidProperties[] = "invalid value for 'app_secret', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['app_secret']) && (mb_strlen($this->container['app_secret']) < 0)) {
            $invalidProperties[] = "invalid value for 'app_secret', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['client_secret']) && (mb_strlen($this->container['client_secret']) > 50)) {
            $invalidProperties[] = "invalid value for 'client_secret', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['client_secret']) && (mb_strlen($this->container['client_secret']) < 0)) {
            $invalidProperties[] = "invalid value for 'client_secret', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['ssh_publickey']) && (mb_strlen($this->container['ssh_publickey']) > 50)) {
            $invalidProperties[] = "invalid value for 'ssh_publickey', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['ssh_publickey']) && (mb_strlen($this->container['ssh_publickey']) < 0)) {
            $invalidProperties[] = "invalid value for 'ssh_publickey', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id user_id
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets project_id
     *
     * @return int|null
     */
    public function getProjectId()
    {
        return $this->container['project_id'];
    }

    /**
     * Sets project_id
     *
     * @param int|null $project_id project_id
     *
     * @return self
     */
    public function setProjectId($project_id)
    {
        if (is_null($project_id)) {
            throw new \InvalidArgumentException('non-nullable project_id cannot be null');
        }
        $this->container['project_id'] = $project_id;

        return $this;
    }

    /**
     * Gets website
     *
     * @return string|null
     */
    public function getWebsite()
    {
        return $this->container['website'];
    }

    /**
     * Sets website
     *
     * @param string|null $website website
     *
     * @return self
     */
    public function setWebsite($website)
    {
        if (is_null($website)) {
            array_push($this->openAPINullablesSetToNull, 'website');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('website', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($website) && (mb_strlen($website) > 255)) {
            throw new \InvalidArgumentException('invalid length for $website when calling App., must be smaller than or equal to 255.');
        }
        if (!is_null($website) && (mb_strlen($website) < 0)) {
            throw new \InvalidArgumentException('invalid length for $website when calling App., must be bigger than or equal to 0.');
        }

        $this->container['website'] = $website;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling App., must be smaller than or equal to 255.');
        }
        if (!is_null($name) && (mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling App., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets logo
     *
     * @return string|null
     */
    public function getLogo()
    {
        return $this->container['logo'];
    }

    /**
     * Sets logo
     *
     * @param string|null $logo logo
     *
     * @return self
     */
    public function setLogo($logo)
    {
        if (is_null($logo)) {
            array_push($this->openAPINullablesSetToNull, 'logo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('logo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($logo) && (mb_strlen($logo) > 255)) {
            throw new \InvalidArgumentException('invalid length for $logo when calling App., must be smaller than or equal to 255.');
        }
        if (!is_null($logo) && (mb_strlen($logo) < 0)) {
            throw new \InvalidArgumentException('invalid length for $logo when calling App., must be bigger than or equal to 0.');
        }

        $this->container['logo'] = $logo;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags tags
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tags) && (mb_strlen($tags) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling App., must be smaller than or equal to 255.');
        }
        if (!is_null($tags) && (mb_strlen($tags) < 0)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling App., must be bigger than or equal to 0.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets app_key
     *
     * @return string|null
     */
    public function getAppKey()
    {
        return $this->container['app_key'];
    }

    /**
     * Sets app_key
     *
     * @param string|null $app_key app_key
     *
     * @return self
     */
    public function setAppKey($app_key)
    {
        if (is_null($app_key)) {
            array_push($this->openAPINullablesSetToNull, 'app_key');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_key', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($app_key) && (mb_strlen($app_key) > 50)) {
            throw new \InvalidArgumentException('invalid length for $app_key when calling App., must be smaller than or equal to 50.');
        }
        if (!is_null($app_key) && (mb_strlen($app_key) < 0)) {
            throw new \InvalidArgumentException('invalid length for $app_key when calling App., must be bigger than or equal to 0.');
        }

        $this->container['app_key'] = $app_key;

        return $this;
    }

    /**
     * Gets app_secret
     *
     * @return string|null
     */
    public function getAppSecret()
    {
        return $this->container['app_secret'];
    }

    /**
     * Sets app_secret
     *
     * @param string|null $app_secret app_secret
     *
     * @return self
     */
    public function setAppSecret($app_secret)
    {
        if (is_null($app_secret)) {
            array_push($this->openAPINullablesSetToNull, 'app_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('app_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($app_secret) && (mb_strlen($app_secret) > 50)) {
            throw new \InvalidArgumentException('invalid length for $app_secret when calling App., must be smaller than or equal to 50.');
        }
        if (!is_null($app_secret) && (mb_strlen($app_secret) < 0)) {
            throw new \InvalidArgumentException('invalid length for $app_secret when calling App., must be bigger than or equal to 0.');
        }

        $this->container['app_secret'] = $app_secret;

        return $this;
    }

    /**
     * Gets client_secret
     *
     * @return string|null
     */
    public function getClientSecret()
    {
        return $this->container['client_secret'];
    }

    /**
     * Sets client_secret
     *
     * @param string|null $client_secret client_secret
     *
     * @return self
     */
    public function setClientSecret($client_secret)
    {
        if (is_null($client_secret)) {
            array_push($this->openAPINullablesSetToNull, 'client_secret');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('client_secret', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($client_secret) && (mb_strlen($client_secret) > 50)) {
            throw new \InvalidArgumentException('invalid length for $client_secret when calling App., must be smaller than or equal to 50.');
        }
        if (!is_null($client_secret) && (mb_strlen($client_secret) < 0)) {
            throw new \InvalidArgumentException('invalid length for $client_secret when calling App., must be bigger than or equal to 0.');
        }

        $this->container['client_secret'] = $client_secret;

        return $this;
    }

    /**
     * Gets ssh_publickey
     *
     * @return string|null
     */
    public function getSshPublickey()
    {
        return $this->container['ssh_publickey'];
    }

    /**
     * Sets ssh_publickey
     *
     * @param string|null $ssh_publickey ssh_publickey
     *
     * @return self
     */
    public function setSshPublickey($ssh_publickey)
    {
        if (is_null($ssh_publickey)) {
            array_push($this->openAPINullablesSetToNull, 'ssh_publickey');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ssh_publickey', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($ssh_publickey) && (mb_strlen($ssh_publickey) > 50)) {
            throw new \InvalidArgumentException('invalid length for $ssh_publickey when calling App., must be smaller than or equal to 50.');
        }
        if (!is_null($ssh_publickey) && (mb_strlen($ssh_publickey) < 0)) {
            throw new \InvalidArgumentException('invalid length for $ssh_publickey when calling App., must be bigger than or equal to 0.');
        }

        $this->container['ssh_publickey'] = $ssh_publickey;

        return $this;
    }

    /**
     * Gets share
     *
     * @return bool|null
     */
    public function getShare()
    {
        return $this->container['share'];
    }

    /**
     * Sets share
     *
     * @param bool|null $share share
     *
     * @return self
     */
    public function setShare($share)
    {
        if (is_null($share)) {
            throw new \InvalidArgumentException('non-nullable share cannot be null');
        }
        $this->container['share'] = $share;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date create_date
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update last_update
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }

    /**
     * Gets show
     *
     * @return bool|null
     */
    public function getShow()
    {
        return $this->container['show'];
    }

    /**
     * Sets show
     *
     * @param bool|null $show show
     *
     * @return self
     */
    public function setShow($show)
    {
        if (is_null($show)) {
            throw new \InvalidArgumentException('non-nullable show cannot be null');
        }
        $this->container['show'] = $show;

        return $this;
    }

    /**
     * Gets show_index
     *
     * @return int|null
     */
    public function getShowIndex()
    {
        return $this->container['show_index'];
    }

    /**
     * Sets show_index
     *
     * @param int|null $show_index show_index
     *
     * @return self
     */
    public function setShowIndex($show_index)
    {
        if (is_null($show_index)) {
            throw new \InvalidArgumentException('non-nullable show_index cannot be null');
        }
        $this->container['show_index'] = $show_index;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


