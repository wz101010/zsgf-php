<?php
/**
 * Order
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @description 订单实体，用于记录用户的订单信息。
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Order implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'user_id' => 'int',
        'pay_type' => 'string',
        'amount' => 'float',
        'order_no' => 'string',
        'trade_no' => 'string',
        'status' => 'string',
        'product_type' => 'string',
        'product_id' => 'string',
        'product_name' => 'string',
        'allow_refund' => 'bool',
        'allow_refund_until' => '\DateTime',
        'tags' => 'string',
        'remark' => 'string',
        'description' => 'string',
        'order_pay_time' => '\DateTime',
        'expire_time' => '\DateTime',
        'create_date' => '\DateTime',
        'last_update' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'user_id' => 'int64',
        'pay_type' => null,
        'amount' => 'double',
        'order_no' => null,
        'trade_no' => null,
        'status' => null,
        'product_type' => null,
        'product_id' => null,
        'product_name' => null,
        'allow_refund' => null,
        'allow_refund_until' => 'date-time',
        'tags' => null,
        'remark' => null,
        'description' => null,
        'order_pay_time' => 'date-time',
        'expire_time' => 'date-time',
        'create_date' => 'date-time',
        'last_update' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'user_id' => false,
        'pay_type' => true,
        'amount' => false,
        'order_no' => true,
        'trade_no' => true,
        'status' => true,
        'product_type' => true,
        'product_id' => true,
        'product_name' => true,
        'allow_refund' => false,
        'allow_refund_until' => false,
        'tags' => true,
        'remark' => true,
        'description' => true,
        'order_pay_time' => false,
        'expire_time' => false,
        'create_date' => false,
        'last_update' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'user_id' => 'userID',
        'pay_type' => 'payType',
        'amount' => 'amount',
        'order_no' => 'orderNo',
        'trade_no' => 'tradeNo',
        'status' => 'status',
        'product_type' => 'productType',
        'product_id' => 'productID',
        'product_name' => 'productName',
        'allow_refund' => 'allowRefund',
        'allow_refund_until' => 'allowRefundUntil',
        'tags' => 'tags',
        'remark' => 'remark',
        'description' => 'description',
        'order_pay_time' => 'orderPayTime',
        'expire_time' => 'expireTime',
        'create_date' => 'createDate',
        'last_update' => 'lastUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'user_id' => 'setUserId',
        'pay_type' => 'setPayType',
        'amount' => 'setAmount',
        'order_no' => 'setOrderNo',
        'trade_no' => 'setTradeNo',
        'status' => 'setStatus',
        'product_type' => 'setProductType',
        'product_id' => 'setProductId',
        'product_name' => 'setProductName',
        'allow_refund' => 'setAllowRefund',
        'allow_refund_until' => 'setAllowRefundUntil',
        'tags' => 'setTags',
        'remark' => 'setRemark',
        'description' => 'setDescription',
        'order_pay_time' => 'setOrderPayTime',
        'expire_time' => 'setExpireTime',
        'create_date' => 'setCreateDate',
        'last_update' => 'setLastUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'user_id' => 'getUserId',
        'pay_type' => 'getPayType',
        'amount' => 'getAmount',
        'order_no' => 'getOrderNo',
        'trade_no' => 'getTradeNo',
        'status' => 'getStatus',
        'product_type' => 'getProductType',
        'product_id' => 'getProductId',
        'product_name' => 'getProductName',
        'allow_refund' => 'getAllowRefund',
        'allow_refund_until' => 'getAllowRefundUntil',
        'tags' => 'getTags',
        'remark' => 'getRemark',
        'description' => 'getDescription',
        'order_pay_time' => 'getOrderPayTime',
        'expire_time' => 'getExpireTime',
        'create_date' => 'getCreateDate',
        'last_update' => 'getLastUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('pay_type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('order_no', $data ?? [], null);
        $this->setIfExists('trade_no', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('product_type', $data ?? [], null);
        $this->setIfExists('product_id', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('allow_refund', $data ?? [], null);
        $this->setIfExists('allow_refund_until', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('remark', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('order_pay_time', $data ?? [], null);
        $this->setIfExists('expire_time', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['pay_type']) && (mb_strlen($this->container['pay_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'pay_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['order_no']) && (mb_strlen($this->container['order_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'order_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['trade_no']) && (mb_strlen($this->container['trade_no']) > 50)) {
            $invalidProperties[] = "invalid value for 'trade_no', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 50)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['product_type']) && (mb_strlen($this->container['product_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'product_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['product_id']) && (mb_strlen($this->container['product_id']) > 50)) {
            $invalidProperties[] = "invalid value for 'product_id', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['product_name']) && (mb_strlen($this->container['product_name']) > 255)) {
            $invalidProperties[] = "invalid value for 'product_name', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) > 255)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['remark']) && (mb_strlen($this->container['remark']) > 255)) {
            $invalidProperties[] = "invalid value for 'remark', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 订单的唯一标识符。
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id 创建订单的用户ID。
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets pay_type
     *
     * @return string|null
     */
    public function getPayType()
    {
        return $this->container['pay_type'];
    }

    /**
     * Sets pay_type
     *
     * @param string|null $pay_type 订单的支付类型，例如 '信用卡', '支付宝', '微信支付' 等。
     *
     * @return self
     */
    public function setPayType($pay_type)
    {
        if (is_null($pay_type)) {
            array_push($this->openAPINullablesSetToNull, 'pay_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($pay_type) && (mb_strlen($pay_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $pay_type when calling Order., must be smaller than or equal to 50.');
        }

        $this->container['pay_type'] = $pay_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount 订单的总金额。
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets order_no
     *
     * @return string|null
     */
    public function getOrderNo()
    {
        return $this->container['order_no'];
    }

    /**
     * Sets order_no
     *
     * @param string|null $order_no 订单的唯一编号，通常由系统生成。
     *
     * @return self
     */
    public function setOrderNo($order_no)
    {
        if (is_null($order_no)) {
            array_push($this->openAPINullablesSetToNull, 'order_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('order_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($order_no) && (mb_strlen($order_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $order_no when calling Order., must be smaller than or equal to 50.');
        }

        $this->container['order_no'] = $order_no;

        return $this;
    }

    /**
     * Gets trade_no
     *
     * @return string|null
     */
    public function getTradeNo()
    {
        return $this->container['trade_no'];
    }

    /**
     * Sets trade_no
     *
     * @param string|null $trade_no 与订单关联的交易编号，通常由支付平台提供。
     *
     * @return self
     */
    public function setTradeNo($trade_no)
    {
        if (is_null($trade_no)) {
            array_push($this->openAPINullablesSetToNull, 'trade_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($trade_no) && (mb_strlen($trade_no) > 50)) {
            throw new \InvalidArgumentException('invalid length for $trade_no when calling Order., must be smaller than or equal to 50.');
        }

        $this->container['trade_no'] = $trade_no;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status 订单的当前状态，例如 '待支付', '已完成', '已取消' 等。
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($status) && (mb_strlen($status) > 50)) {
            throw new \InvalidArgumentException('invalid length for $status when calling Order., must be smaller than or equal to 50.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type 订单中商品的类型分类。
     *
     * @return self
     */
    public function setProductType($product_type)
    {
        if (is_null($product_type)) {
            array_push($this->openAPINullablesSetToNull, 'product_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_type) && (mb_strlen($product_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $product_type when calling Order., must be smaller than or equal to 50.');
        }

        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets product_id
     *
     * @return string|null
     */
    public function getProductId()
    {
        return $this->container['product_id'];
    }

    /**
     * Sets product_id
     *
     * @param string|null $product_id 订单中商品的唯一标识符。
     *
     * @return self
     */
    public function setProductId($product_id)
    {
        if (is_null($product_id)) {
            array_push($this->openAPINullablesSetToNull, 'product_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_id) && (mb_strlen($product_id) > 50)) {
            throw new \InvalidArgumentException('invalid length for $product_id when calling Order., must be smaller than or equal to 50.');
        }

        $this->container['product_id'] = $product_id;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name 订单中商品的名称。
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            array_push($this->openAPINullablesSetToNull, 'product_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($product_name) && (mb_strlen($product_name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $product_name when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets allow_refund
     *
     * @return bool|null
     */
    public function getAllowRefund()
    {
        return $this->container['allow_refund'];
    }

    /**
     * Sets allow_refund
     *
     * @param bool|null $allow_refund 指示订单是否允许进行退款操作。
     *
     * @return self
     */
    public function setAllowRefund($allow_refund)
    {
        if (is_null($allow_refund)) {
            throw new \InvalidArgumentException('non-nullable allow_refund cannot be null');
        }
        $this->container['allow_refund'] = $allow_refund;

        return $this;
    }

    /**
     * Gets allow_refund_until
     *
     * @return \DateTime|null
     */
    public function getAllowRefundUntil()
    {
        return $this->container['allow_refund_until'];
    }

    /**
     * Sets allow_refund_until
     *
     * @param \DateTime|null $allow_refund_until 订单允许进行退款操作的截止时间。
     *
     * @return self
     */
    public function setAllowRefundUntil($allow_refund_until)
    {
        if (is_null($allow_refund_until)) {
            throw new \InvalidArgumentException('non-nullable allow_refund_until cannot be null');
        }
        $this->container['allow_refund_until'] = $allow_refund_until;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags 用于分类或标记订单的标签。
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tags) && (mb_strlen($tags) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string|null
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string|null $remark 订单的额外备注信息。
     *
     * @return self
     */
    public function setRemark($remark)
    {
        if (is_null($remark)) {
            array_push($this->openAPINullablesSetToNull, 'remark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remark) && (mb_strlen($remark) > 255)) {
            throw new \InvalidArgumentException('invalid length for $remark when calling Order., must be smaller than or equal to 255.');
        }

        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 订单的详细描述信息。
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets order_pay_time
     *
     * @return \DateTime|null
     */
    public function getOrderPayTime()
    {
        return $this->container['order_pay_time'];
    }

    /**
     * Sets order_pay_time
     *
     * @param \DateTime|null $order_pay_time 订单完成支付的时间。
     *
     * @return self
     */
    public function setOrderPayTime($order_pay_time)
    {
        if (is_null($order_pay_time)) {
            throw new \InvalidArgumentException('non-nullable order_pay_time cannot be null');
        }
        $this->container['order_pay_time'] = $order_pay_time;

        return $this;
    }

    /**
     * Gets expire_time
     *
     * @return \DateTime|null
     */
    public function getExpireTime()
    {
        return $this->container['expire_time'];
    }

    /**
     * Sets expire_time
     *
     * @param \DateTime|null $expire_time 订单的过期时间，超过该时间订单将自动取消。
     *
     * @return self
     */
    public function setExpireTime($expire_time)
    {
        if (is_null($expire_time)) {
            throw new \InvalidArgumentException('non-nullable expire_time cannot be null');
        }
        $this->container['expire_time'] = $expire_time;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date 订单的创建时间，默认为当前时间。
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update 订单的最后更新时间，默认为当前时间。
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


