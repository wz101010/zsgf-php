<?php
/**
 * CurrencyTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * CurrencyTransaction Class Doc Comment
 *
 * @category Class
 * @description 货币交易记录实体，用于记录用户的货币交易详情。
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CurrencyTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CurrencyTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'from_user_id' => 'int',
        'user_id' => 'int',
        'transaction_type' => 'string',
        'currency_type' => 'string',
        'currency_change' => 'int',
        'currency_balance' => 'float',
        'description' => 'string',
        'status' => 'string',
        'remark' => 'string',
        'tags' => 'string',
        'create_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'from_user_id' => 'int64',
        'user_id' => 'int64',
        'transaction_type' => null,
        'currency_type' => null,
        'currency_change' => 'int64',
        'currency_balance' => 'double',
        'description' => null,
        'status' => null,
        'remark' => null,
        'tags' => null,
        'create_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'from_user_id' => false,
        'user_id' => false,
        'transaction_type' => true,
        'currency_type' => true,
        'currency_change' => false,
        'currency_balance' => false,
        'description' => true,
        'status' => true,
        'remark' => true,
        'tags' => true,
        'create_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'from_user_id' => 'fromUserID',
        'user_id' => 'userID',
        'transaction_type' => 'transactionType',
        'currency_type' => 'currencyType',
        'currency_change' => 'currencyChange',
        'currency_balance' => 'currencyBalance',
        'description' => 'description',
        'status' => 'status',
        'remark' => 'remark',
        'tags' => 'tags',
        'create_date' => 'createDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'from_user_id' => 'setFromUserId',
        'user_id' => 'setUserId',
        'transaction_type' => 'setTransactionType',
        'currency_type' => 'setCurrencyType',
        'currency_change' => 'setCurrencyChange',
        'currency_balance' => 'setCurrencyBalance',
        'description' => 'setDescription',
        'status' => 'setStatus',
        'remark' => 'setRemark',
        'tags' => 'setTags',
        'create_date' => 'setCreateDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'from_user_id' => 'getFromUserId',
        'user_id' => 'getUserId',
        'transaction_type' => 'getTransactionType',
        'currency_type' => 'getCurrencyType',
        'currency_change' => 'getCurrencyChange',
        'currency_balance' => 'getCurrencyBalance',
        'description' => 'getDescription',
        'status' => 'getStatus',
        'remark' => 'getRemark',
        'tags' => 'getTags',
        'create_date' => 'getCreateDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('from_user_id', $data ?? [], null);
        $this->setIfExists('user_id', $data ?? [], null);
        $this->setIfExists('transaction_type', $data ?? [], null);
        $this->setIfExists('currency_type', $data ?? [], null);
        $this->setIfExists('currency_change', $data ?? [], null);
        $this->setIfExists('currency_balance', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('remark', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['transaction_type']) && (mb_strlen($this->container['transaction_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'transaction_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['currency_type']) && (mb_strlen($this->container['currency_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'currency_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['status']) && (mb_strlen($this->container['status']) > 50)) {
            $invalidProperties[] = "invalid value for 'status', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['remark']) && (mb_strlen($this->container['remark']) > 255)) {
            $invalidProperties[] = "invalid value for 'remark', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) > 255)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 货币交易记录的唯一标识符。
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets from_user_id
     *
     * @return int|null
     */
    public function getFromUserId()
    {
        return $this->container['from_user_id'];
    }

    /**
     * Sets from_user_id
     *
     * @param int|null $from_user_id 发起交易的发送方用户ID，若为转账交易时必填。
     *
     * @return self
     */
    public function setFromUserId($from_user_id)
    {
        if (is_null($from_user_id)) {
            throw new \InvalidArgumentException('non-nullable from_user_id cannot be null');
        }
        $this->container['from_user_id'] = $from_user_id;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int|null
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int|null $user_id 进行货币交易的用户ID。
     *
     * @return self
     */
    public function setUserId($user_id)
    {
        if (is_null($user_id)) {
            throw new \InvalidArgumentException('non-nullable user_id cannot be null');
        }
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets transaction_type
     *
     * @return string|null
     */
    public function getTransactionType()
    {
        return $this->container['transaction_type'];
    }

    /**
     * Sets transaction_type
     *
     * @param string|null $transaction_type 货币交易的类型，例如 '消费', '奖励', '兑换', '转账' 等。
     *
     * @return self
     */
    public function setTransactionType($transaction_type)
    {
        if (is_null($transaction_type)) {
            array_push($this->openAPINullablesSetToNull, 'transaction_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('transaction_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($transaction_type) && (mb_strlen($transaction_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $transaction_type when calling CurrencyTransaction., must be smaller than or equal to 50.');
        }

        $this->container['transaction_type'] = $transaction_type;

        return $this;
    }

    /**
     * Gets currency_type
     *
     * @return string|null
     */
    public function getCurrencyType()
    {
        return $this->container['currency_type'];
    }

    /**
     * Sets currency_type
     *
     * @param string|null $currency_type 交易的货币类型，例如 'USD', 'CNY' 等。
     *
     * @return self
     */
    public function setCurrencyType($currency_type)
    {
        if (is_null($currency_type)) {
            array_push($this->openAPINullablesSetToNull, 'currency_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('currency_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($currency_type) && (mb_strlen($currency_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $currency_type when calling CurrencyTransaction., must be smaller than or equal to 50.');
        }

        $this->container['currency_type'] = $currency_type;

        return $this;
    }

    /**
     * Gets currency_change
     *
     * @return int|null
     */
    public function getCurrencyChange()
    {
        return $this->container['currency_change'];
    }

    /**
     * Sets currency_change
     *
     * @param int|null $currency_change 货币的变动数量，正数表示增加，负数表示减少。
     *
     * @return self
     */
    public function setCurrencyChange($currency_change)
    {
        if (is_null($currency_change)) {
            throw new \InvalidArgumentException('non-nullable currency_change cannot be null');
        }
        $this->container['currency_change'] = $currency_change;

        return $this;
    }

    /**
     * Gets currency_balance
     *
     * @return float|null
     */
    public function getCurrencyBalance()
    {
        return $this->container['currency_balance'];
    }

    /**
     * Sets currency_balance
     *
     * @param float|null $currency_balance 交易完成后的货币余额。
     *
     * @return self
     */
    public function setCurrencyBalance($currency_balance)
    {
        if (is_null($currency_balance)) {
            throw new \InvalidArgumentException('non-nullable currency_balance cannot be null');
        }
        $this->container['currency_balance'] = $currency_balance;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 描述货币变动的具体原因或相关交易详情。
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status 货币交易的当前状态，例如 '成功', '失败', '待审核' 等。
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($status) && (mb_strlen($status) > 50)) {
            throw new \InvalidArgumentException('invalid length for $status when calling CurrencyTransaction., must be smaller than or equal to 50.');
        }

        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets remark
     *
     * @return string|null
     */
    public function getRemark()
    {
        return $this->container['remark'];
    }

    /**
     * Sets remark
     *
     * @param string|null $remark 交易的额外信息或管理员的备注。
     *
     * @return self
     */
    public function setRemark($remark)
    {
        if (is_null($remark)) {
            array_push($this->openAPINullablesSetToNull, 'remark');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('remark', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($remark) && (mb_strlen($remark) > 255)) {
            throw new \InvalidArgumentException('invalid length for $remark when calling CurrencyTransaction., must be smaller than or equal to 255.');
        }

        $this->container['remark'] = $remark;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags 用于分类或标记交易的标签。
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tags) && (mb_strlen($tags) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling CurrencyTransaction., must be smaller than or equal to 255.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date 货币交易发生的时间，默认为当前时间。
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


