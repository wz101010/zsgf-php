<?php
/**
 * IntactChargeInfo
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * IntactChargeInfo Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class IntactChargeInfo implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'IntactChargeInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'actual_amount' => 'string',
        'bill_type' => 'string',
        'gmt_pay' => 'string',
        'is_refund' => 'bool',
        'out_biz_no' => 'string',
        'plan_amount' => 'string',
        'product_name' => 'string',
        'service_target' => 'string',
        'service_type' => 'string',
        'status' => 'string',
        'target_account_no' => 'string',
        'target_user_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'actual_amount' => null,
        'bill_type' => null,
        'gmt_pay' => null,
        'is_refund' => null,
        'out_biz_no' => null,
        'plan_amount' => null,
        'product_name' => null,
        'service_target' => null,
        'service_type' => null,
        'status' => null,
        'target_account_no' => null,
        'target_user_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'actual_amount' => true,
        'bill_type' => true,
        'gmt_pay' => true,
        'is_refund' => false,
        'out_biz_no' => true,
        'plan_amount' => true,
        'product_name' => true,
        'service_target' => true,
        'service_type' => true,
        'status' => true,
        'target_account_no' => true,
        'target_user_id' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'actual_amount' => 'actualAmount',
        'bill_type' => 'billType',
        'gmt_pay' => 'gmtPay',
        'is_refund' => 'isRefund',
        'out_biz_no' => 'outBizNo',
        'plan_amount' => 'planAmount',
        'product_name' => 'productName',
        'service_target' => 'serviceTarget',
        'service_type' => 'serviceType',
        'status' => 'status',
        'target_account_no' => 'targetAccountNo',
        'target_user_id' => 'targetUserId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'actual_amount' => 'setActualAmount',
        'bill_type' => 'setBillType',
        'gmt_pay' => 'setGmtPay',
        'is_refund' => 'setIsRefund',
        'out_biz_no' => 'setOutBizNo',
        'plan_amount' => 'setPlanAmount',
        'product_name' => 'setProductName',
        'service_target' => 'setServiceTarget',
        'service_type' => 'setServiceType',
        'status' => 'setStatus',
        'target_account_no' => 'setTargetAccountNo',
        'target_user_id' => 'setTargetUserId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'actual_amount' => 'getActualAmount',
        'bill_type' => 'getBillType',
        'gmt_pay' => 'getGmtPay',
        'is_refund' => 'getIsRefund',
        'out_biz_no' => 'getOutBizNo',
        'plan_amount' => 'getPlanAmount',
        'product_name' => 'getProductName',
        'service_target' => 'getServiceTarget',
        'service_type' => 'getServiceType',
        'status' => 'getStatus',
        'target_account_no' => 'getTargetAccountNo',
        'target_user_id' => 'getTargetUserId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('actual_amount', $data ?? [], null);
        $this->setIfExists('bill_type', $data ?? [], null);
        $this->setIfExists('gmt_pay', $data ?? [], null);
        $this->setIfExists('is_refund', $data ?? [], null);
        $this->setIfExists('out_biz_no', $data ?? [], null);
        $this->setIfExists('plan_amount', $data ?? [], null);
        $this->setIfExists('product_name', $data ?? [], null);
        $this->setIfExists('service_target', $data ?? [], null);
        $this->setIfExists('service_type', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('target_account_no', $data ?? [], null);
        $this->setIfExists('target_user_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets actual_amount
     *
     * @return string|null
     */
    public function getActualAmount()
    {
        return $this->container['actual_amount'];
    }

    /**
     * Sets actual_amount
     *
     * @param string|null $actual_amount actual_amount
     *
     * @return self
     */
    public function setActualAmount($actual_amount)
    {
        if (is_null($actual_amount)) {
            array_push($this->openAPINullablesSetToNull, 'actual_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('actual_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['actual_amount'] = $actual_amount;

        return $this;
    }

    /**
     * Gets bill_type
     *
     * @return string|null
     */
    public function getBillType()
    {
        return $this->container['bill_type'];
    }

    /**
     * Sets bill_type
     *
     * @param string|null $bill_type bill_type
     *
     * @return self
     */
    public function setBillType($bill_type)
    {
        if (is_null($bill_type)) {
            array_push($this->openAPINullablesSetToNull, 'bill_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('bill_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['bill_type'] = $bill_type;

        return $this;
    }

    /**
     * Gets gmt_pay
     *
     * @return string|null
     */
    public function getGmtPay()
    {
        return $this->container['gmt_pay'];
    }

    /**
     * Sets gmt_pay
     *
     * @param string|null $gmt_pay gmt_pay
     *
     * @return self
     */
    public function setGmtPay($gmt_pay)
    {
        if (is_null($gmt_pay)) {
            array_push($this->openAPINullablesSetToNull, 'gmt_pay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gmt_pay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gmt_pay'] = $gmt_pay;

        return $this;
    }

    /**
     * Gets is_refund
     *
     * @return bool|null
     */
    public function getIsRefund()
    {
        return $this->container['is_refund'];
    }

    /**
     * Sets is_refund
     *
     * @param bool|null $is_refund is_refund
     *
     * @return self
     */
    public function setIsRefund($is_refund)
    {
        if (is_null($is_refund)) {
            throw new \InvalidArgumentException('non-nullable is_refund cannot be null');
        }
        $this->container['is_refund'] = $is_refund;

        return $this;
    }

    /**
     * Gets out_biz_no
     *
     * @return string|null
     */
    public function getOutBizNo()
    {
        return $this->container['out_biz_no'];
    }

    /**
     * Sets out_biz_no
     *
     * @param string|null $out_biz_no out_biz_no
     *
     * @return self
     */
    public function setOutBizNo($out_biz_no)
    {
        if (is_null($out_biz_no)) {
            array_push($this->openAPINullablesSetToNull, 'out_biz_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('out_biz_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['out_biz_no'] = $out_biz_no;

        return $this;
    }

    /**
     * Gets plan_amount
     *
     * @return string|null
     */
    public function getPlanAmount()
    {
        return $this->container['plan_amount'];
    }

    /**
     * Sets plan_amount
     *
     * @param string|null $plan_amount plan_amount
     *
     * @return self
     */
    public function setPlanAmount($plan_amount)
    {
        if (is_null($plan_amount)) {
            array_push($this->openAPINullablesSetToNull, 'plan_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('plan_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['plan_amount'] = $plan_amount;

        return $this;
    }

    /**
     * Gets product_name
     *
     * @return string|null
     */
    public function getProductName()
    {
        return $this->container['product_name'];
    }

    /**
     * Sets product_name
     *
     * @param string|null $product_name product_name
     *
     * @return self
     */
    public function setProductName($product_name)
    {
        if (is_null($product_name)) {
            array_push($this->openAPINullablesSetToNull, 'product_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('product_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['product_name'] = $product_name;

        return $this;
    }

    /**
     * Gets service_target
     *
     * @return string|null
     */
    public function getServiceTarget()
    {
        return $this->container['service_target'];
    }

    /**
     * Sets service_target
     *
     * @param string|null $service_target service_target
     *
     * @return self
     */
    public function setServiceTarget($service_target)
    {
        if (is_null($service_target)) {
            array_push($this->openAPINullablesSetToNull, 'service_target');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_target', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_target'] = $service_target;

        return $this;
    }

    /**
     * Gets service_type
     *
     * @return string|null
     */
    public function getServiceType()
    {
        return $this->container['service_type'];
    }

    /**
     * Sets service_type
     *
     * @param string|null $service_type service_type
     *
     * @return self
     */
    public function setServiceType($service_type)
    {
        if (is_null($service_type)) {
            array_push($this->openAPINullablesSetToNull, 'service_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('service_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['service_type'] = $service_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            array_push($this->openAPINullablesSetToNull, 'status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets target_account_no
     *
     * @return string|null
     */
    public function getTargetAccountNo()
    {
        return $this->container['target_account_no'];
    }

    /**
     * Sets target_account_no
     *
     * @param string|null $target_account_no target_account_no
     *
     * @return self
     */
    public function setTargetAccountNo($target_account_no)
    {
        if (is_null($target_account_no)) {
            array_push($this->openAPINullablesSetToNull, 'target_account_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_account_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['target_account_no'] = $target_account_no;

        return $this;
    }

    /**
     * Gets target_user_id
     *
     * @return string|null
     */
    public function getTargetUserId()
    {
        return $this->container['target_user_id'];
    }

    /**
     * Sets target_user_id
     *
     * @param string|null $target_user_id target_user_id
     *
     * @return self
     */
    public function setTargetUserId($target_user_id)
    {
        if (is_null($target_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'target_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('target_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['target_user_id'] = $target_user_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


