<?php
/**
 * VoucherDetail
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * VoucherDetail Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoucherDetail implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoucherDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'amount' => 'string',
        'id' => 'string',
        'memo' => 'string',
        'merchant_contribute' => 'string',
        'name' => 'string',
        'other_contribute' => 'string',
        'other_contribute_detail' => '\ZSGF\Client\ZSGF\Client\Model\ContributeDetail[]',
        'purchase_ant_contribute' => 'string',
        'purchase_buyer_contribute' => 'string',
        'purchase_merchant_contribute' => 'string',
        'template_id' => 'string',
        'type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'amount' => null,
        'id' => null,
        'memo' => null,
        'merchant_contribute' => null,
        'name' => null,
        'other_contribute' => null,
        'other_contribute_detail' => null,
        'purchase_ant_contribute' => null,
        'purchase_buyer_contribute' => null,
        'purchase_merchant_contribute' => null,
        'template_id' => null,
        'type' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'amount' => true,
        'id' => true,
        'memo' => true,
        'merchant_contribute' => true,
        'name' => true,
        'other_contribute' => true,
        'other_contribute_detail' => true,
        'purchase_ant_contribute' => true,
        'purchase_buyer_contribute' => true,
        'purchase_merchant_contribute' => true,
        'template_id' => true,
        'type' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'amount' => 'amount',
        'id' => 'id',
        'memo' => 'memo',
        'merchant_contribute' => 'merchantContribute',
        'name' => 'name',
        'other_contribute' => 'otherContribute',
        'other_contribute_detail' => 'otherContributeDetail',
        'purchase_ant_contribute' => 'purchaseAntContribute',
        'purchase_buyer_contribute' => 'purchaseBuyerContribute',
        'purchase_merchant_contribute' => 'purchaseMerchantContribute',
        'template_id' => 'templateId',
        'type' => 'type'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'amount' => 'setAmount',
        'id' => 'setId',
        'memo' => 'setMemo',
        'merchant_contribute' => 'setMerchantContribute',
        'name' => 'setName',
        'other_contribute' => 'setOtherContribute',
        'other_contribute_detail' => 'setOtherContributeDetail',
        'purchase_ant_contribute' => 'setPurchaseAntContribute',
        'purchase_buyer_contribute' => 'setPurchaseBuyerContribute',
        'purchase_merchant_contribute' => 'setPurchaseMerchantContribute',
        'template_id' => 'setTemplateId',
        'type' => 'setType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'amount' => 'getAmount',
        'id' => 'getId',
        'memo' => 'getMemo',
        'merchant_contribute' => 'getMerchantContribute',
        'name' => 'getName',
        'other_contribute' => 'getOtherContribute',
        'other_contribute_detail' => 'getOtherContributeDetail',
        'purchase_ant_contribute' => 'getPurchaseAntContribute',
        'purchase_buyer_contribute' => 'getPurchaseBuyerContribute',
        'purchase_merchant_contribute' => 'getPurchaseMerchantContribute',
        'template_id' => 'getTemplateId',
        'type' => 'getType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('memo', $data ?? [], null);
        $this->setIfExists('merchant_contribute', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('other_contribute', $data ?? [], null);
        $this->setIfExists('other_contribute_detail', $data ?? [], null);
        $this->setIfExists('purchase_ant_contribute', $data ?? [], null);
        $this->setIfExists('purchase_buyer_contribute', $data ?? [], null);
        $this->setIfExists('purchase_merchant_contribute', $data ?? [], null);
        $this->setIfExists('template_id', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets amount
     *
     * @return string|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param string|null $amount amount
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            array_push($this->openAPINullablesSetToNull, 'amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            array_push($this->openAPINullablesSetToNull, 'id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets memo
     *
     * @return string|null
     */
    public function getMemo()
    {
        return $this->container['memo'];
    }

    /**
     * Sets memo
     *
     * @param string|null $memo memo
     *
     * @return self
     */
    public function setMemo($memo)
    {
        if (is_null($memo)) {
            array_push($this->openAPINullablesSetToNull, 'memo');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('memo', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['memo'] = $memo;

        return $this;
    }

    /**
     * Gets merchant_contribute
     *
     * @return string|null
     */
    public function getMerchantContribute()
    {
        return $this->container['merchant_contribute'];
    }

    /**
     * Sets merchant_contribute
     *
     * @param string|null $merchant_contribute merchant_contribute
     *
     * @return self
     */
    public function setMerchantContribute($merchant_contribute)
    {
        if (is_null($merchant_contribute)) {
            array_push($this->openAPINullablesSetToNull, 'merchant_contribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('merchant_contribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['merchant_contribute'] = $merchant_contribute;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets other_contribute
     *
     * @return string|null
     */
    public function getOtherContribute()
    {
        return $this->container['other_contribute'];
    }

    /**
     * Sets other_contribute
     *
     * @param string|null $other_contribute other_contribute
     *
     * @return self
     */
    public function setOtherContribute($other_contribute)
    {
        if (is_null($other_contribute)) {
            array_push($this->openAPINullablesSetToNull, 'other_contribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_contribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_contribute'] = $other_contribute;

        return $this;
    }

    /**
     * Gets other_contribute_detail
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\ContributeDetail[]|null
     */
    public function getOtherContributeDetail()
    {
        return $this->container['other_contribute_detail'];
    }

    /**
     * Sets other_contribute_detail
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\ContributeDetail[]|null $other_contribute_detail other_contribute_detail
     *
     * @return self
     */
    public function setOtherContributeDetail($other_contribute_detail)
    {
        if (is_null($other_contribute_detail)) {
            array_push($this->openAPINullablesSetToNull, 'other_contribute_detail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('other_contribute_detail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['other_contribute_detail'] = $other_contribute_detail;

        return $this;
    }

    /**
     * Gets purchase_ant_contribute
     *
     * @return string|null
     */
    public function getPurchaseAntContribute()
    {
        return $this->container['purchase_ant_contribute'];
    }

    /**
     * Sets purchase_ant_contribute
     *
     * @param string|null $purchase_ant_contribute purchase_ant_contribute
     *
     * @return self
     */
    public function setPurchaseAntContribute($purchase_ant_contribute)
    {
        if (is_null($purchase_ant_contribute)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_ant_contribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_ant_contribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_ant_contribute'] = $purchase_ant_contribute;

        return $this;
    }

    /**
     * Gets purchase_buyer_contribute
     *
     * @return string|null
     */
    public function getPurchaseBuyerContribute()
    {
        return $this->container['purchase_buyer_contribute'];
    }

    /**
     * Sets purchase_buyer_contribute
     *
     * @param string|null $purchase_buyer_contribute purchase_buyer_contribute
     *
     * @return self
     */
    public function setPurchaseBuyerContribute($purchase_buyer_contribute)
    {
        if (is_null($purchase_buyer_contribute)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_buyer_contribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_buyer_contribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_buyer_contribute'] = $purchase_buyer_contribute;

        return $this;
    }

    /**
     * Gets purchase_merchant_contribute
     *
     * @return string|null
     */
    public function getPurchaseMerchantContribute()
    {
        return $this->container['purchase_merchant_contribute'];
    }

    /**
     * Sets purchase_merchant_contribute
     *
     * @param string|null $purchase_merchant_contribute purchase_merchant_contribute
     *
     * @return self
     */
    public function setPurchaseMerchantContribute($purchase_merchant_contribute)
    {
        if (is_null($purchase_merchant_contribute)) {
            array_push($this->openAPINullablesSetToNull, 'purchase_merchant_contribute');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('purchase_merchant_contribute', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['purchase_merchant_contribute'] = $purchase_merchant_contribute;

        return $this;
    }

    /**
     * Gets template_id
     *
     * @return string|null
     */
    public function getTemplateId()
    {
        return $this->container['template_id'];
    }

    /**
     * Sets template_id
     *
     * @param string|null $template_id template_id
     *
     * @return self
     */
    public function setTemplateId($template_id)
    {
        if (is_null($template_id)) {
            array_push($this->openAPINullablesSetToNull, 'template_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('template_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['template_id'] = $template_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            array_push($this->openAPINullablesSetToNull, 'type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['type'] = $type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


