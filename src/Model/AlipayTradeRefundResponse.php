<?php
/**
 * AlipayTradeRefundResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * AlipayTradeRefundResponse Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayTradeRefundResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayTradeRefundResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'msg' => 'string',
        'sub_code' => 'string',
        'sub_msg' => 'string',
        'body' => 'string',
        'is_error' => 'bool',
        'buyer_logon_id' => 'string',
        'buyer_open_id' => 'string',
        'buyer_user_id' => 'string',
        'fund_change' => 'string',
        'gmt_refund_pay' => 'string',
        'has_deposit_back' => 'string',
        'open_id' => 'string',
        'out_trade_no' => 'string',
        'pre_auth_cancel_fee' => 'string',
        'present_refund_buyer_amount' => 'string',
        'present_refund_discount_amount' => 'string',
        'present_refund_mdiscount_amount' => 'string',
        'refund_charge_amount' => 'string',
        'refund_charge_info_list' => '\ZSGF\Client\ZSGF\Client\Model\RefundChargeInfo[]',
        'refund_currency' => 'string',
        'refund_detail_item_list' => '\ZSGF\Client\ZSGF\Client\Model\TradeFundBill[]',
        'refund_fee' => 'string',
        'refund_hyb_amount' => 'string',
        'refund_preset_paytool_list' => '\ZSGF\Client\ZSGF\Client\Model\PresetPayToolInfo',
        'refund_settlement_id' => 'string',
        'refund_voucher_detail_list' => '\ZSGF\Client\ZSGF\Client\Model\VoucherDetail[]',
        'send_back_fee' => 'string',
        'store_name' => 'string',
        'trade_no' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'msg' => null,
        'sub_code' => null,
        'sub_msg' => null,
        'body' => null,
        'is_error' => null,
        'buyer_logon_id' => null,
        'buyer_open_id' => null,
        'buyer_user_id' => null,
        'fund_change' => null,
        'gmt_refund_pay' => null,
        'has_deposit_back' => null,
        'open_id' => null,
        'out_trade_no' => null,
        'pre_auth_cancel_fee' => null,
        'present_refund_buyer_amount' => null,
        'present_refund_discount_amount' => null,
        'present_refund_mdiscount_amount' => null,
        'refund_charge_amount' => null,
        'refund_charge_info_list' => null,
        'refund_currency' => null,
        'refund_detail_item_list' => null,
        'refund_fee' => null,
        'refund_hyb_amount' => null,
        'refund_preset_paytool_list' => null,
        'refund_settlement_id' => null,
        'refund_voucher_detail_list' => null,
        'send_back_fee' => null,
        'store_name' => null,
        'trade_no' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => true,
        'msg' => true,
        'sub_code' => true,
        'sub_msg' => true,
        'body' => true,
        'is_error' => false,
        'buyer_logon_id' => true,
        'buyer_open_id' => true,
        'buyer_user_id' => true,
        'fund_change' => true,
        'gmt_refund_pay' => true,
        'has_deposit_back' => true,
        'open_id' => true,
        'out_trade_no' => true,
        'pre_auth_cancel_fee' => true,
        'present_refund_buyer_amount' => true,
        'present_refund_discount_amount' => true,
        'present_refund_mdiscount_amount' => true,
        'refund_charge_amount' => true,
        'refund_charge_info_list' => true,
        'refund_currency' => true,
        'refund_detail_item_list' => true,
        'refund_fee' => true,
        'refund_hyb_amount' => true,
        'refund_preset_paytool_list' => false,
        'refund_settlement_id' => true,
        'refund_voucher_detail_list' => true,
        'send_back_fee' => true,
        'store_name' => true,
        'trade_no' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'msg' => 'msg',
        'sub_code' => 'subCode',
        'sub_msg' => 'subMsg',
        'body' => 'body',
        'is_error' => 'isError',
        'buyer_logon_id' => 'buyerLogonId',
        'buyer_open_id' => 'buyerOpenId',
        'buyer_user_id' => 'buyerUserId',
        'fund_change' => 'fundChange',
        'gmt_refund_pay' => 'gmtRefundPay',
        'has_deposit_back' => 'hasDepositBack',
        'open_id' => 'openId',
        'out_trade_no' => 'outTradeNo',
        'pre_auth_cancel_fee' => 'preAuthCancelFee',
        'present_refund_buyer_amount' => 'presentRefundBuyerAmount',
        'present_refund_discount_amount' => 'presentRefundDiscountAmount',
        'present_refund_mdiscount_amount' => 'presentRefundMdiscountAmount',
        'refund_charge_amount' => 'refundChargeAmount',
        'refund_charge_info_list' => 'refundChargeInfoList',
        'refund_currency' => 'refundCurrency',
        'refund_detail_item_list' => 'refundDetailItemList',
        'refund_fee' => 'refundFee',
        'refund_hyb_amount' => 'refundHybAmount',
        'refund_preset_paytool_list' => 'refundPresetPaytoolList',
        'refund_settlement_id' => 'refundSettlementId',
        'refund_voucher_detail_list' => 'refundVoucherDetailList',
        'send_back_fee' => 'sendBackFee',
        'store_name' => 'storeName',
        'trade_no' => 'tradeNo'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'msg' => 'setMsg',
        'sub_code' => 'setSubCode',
        'sub_msg' => 'setSubMsg',
        'body' => 'setBody',
        'is_error' => 'setIsError',
        'buyer_logon_id' => 'setBuyerLogonId',
        'buyer_open_id' => 'setBuyerOpenId',
        'buyer_user_id' => 'setBuyerUserId',
        'fund_change' => 'setFundChange',
        'gmt_refund_pay' => 'setGmtRefundPay',
        'has_deposit_back' => 'setHasDepositBack',
        'open_id' => 'setOpenId',
        'out_trade_no' => 'setOutTradeNo',
        'pre_auth_cancel_fee' => 'setPreAuthCancelFee',
        'present_refund_buyer_amount' => 'setPresentRefundBuyerAmount',
        'present_refund_discount_amount' => 'setPresentRefundDiscountAmount',
        'present_refund_mdiscount_amount' => 'setPresentRefundMdiscountAmount',
        'refund_charge_amount' => 'setRefundChargeAmount',
        'refund_charge_info_list' => 'setRefundChargeInfoList',
        'refund_currency' => 'setRefundCurrency',
        'refund_detail_item_list' => 'setRefundDetailItemList',
        'refund_fee' => 'setRefundFee',
        'refund_hyb_amount' => 'setRefundHybAmount',
        'refund_preset_paytool_list' => 'setRefundPresetPaytoolList',
        'refund_settlement_id' => 'setRefundSettlementId',
        'refund_voucher_detail_list' => 'setRefundVoucherDetailList',
        'send_back_fee' => 'setSendBackFee',
        'store_name' => 'setStoreName',
        'trade_no' => 'setTradeNo'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'msg' => 'getMsg',
        'sub_code' => 'getSubCode',
        'sub_msg' => 'getSubMsg',
        'body' => 'getBody',
        'is_error' => 'getIsError',
        'buyer_logon_id' => 'getBuyerLogonId',
        'buyer_open_id' => 'getBuyerOpenId',
        'buyer_user_id' => 'getBuyerUserId',
        'fund_change' => 'getFundChange',
        'gmt_refund_pay' => 'getGmtRefundPay',
        'has_deposit_back' => 'getHasDepositBack',
        'open_id' => 'getOpenId',
        'out_trade_no' => 'getOutTradeNo',
        'pre_auth_cancel_fee' => 'getPreAuthCancelFee',
        'present_refund_buyer_amount' => 'getPresentRefundBuyerAmount',
        'present_refund_discount_amount' => 'getPresentRefundDiscountAmount',
        'present_refund_mdiscount_amount' => 'getPresentRefundMdiscountAmount',
        'refund_charge_amount' => 'getRefundChargeAmount',
        'refund_charge_info_list' => 'getRefundChargeInfoList',
        'refund_currency' => 'getRefundCurrency',
        'refund_detail_item_list' => 'getRefundDetailItemList',
        'refund_fee' => 'getRefundFee',
        'refund_hyb_amount' => 'getRefundHybAmount',
        'refund_preset_paytool_list' => 'getRefundPresetPaytoolList',
        'refund_settlement_id' => 'getRefundSettlementId',
        'refund_voucher_detail_list' => 'getRefundVoucherDetailList',
        'send_back_fee' => 'getSendBackFee',
        'store_name' => 'getStoreName',
        'trade_no' => 'getTradeNo'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('msg', $data ?? [], null);
        $this->setIfExists('sub_code', $data ?? [], null);
        $this->setIfExists('sub_msg', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('is_error', $data ?? [], null);
        $this->setIfExists('buyer_logon_id', $data ?? [], null);
        $this->setIfExists('buyer_open_id', $data ?? [], null);
        $this->setIfExists('buyer_user_id', $data ?? [], null);
        $this->setIfExists('fund_change', $data ?? [], null);
        $this->setIfExists('gmt_refund_pay', $data ?? [], null);
        $this->setIfExists('has_deposit_back', $data ?? [], null);
        $this->setIfExists('open_id', $data ?? [], null);
        $this->setIfExists('out_trade_no', $data ?? [], null);
        $this->setIfExists('pre_auth_cancel_fee', $data ?? [], null);
        $this->setIfExists('present_refund_buyer_amount', $data ?? [], null);
        $this->setIfExists('present_refund_discount_amount', $data ?? [], null);
        $this->setIfExists('present_refund_mdiscount_amount', $data ?? [], null);
        $this->setIfExists('refund_charge_amount', $data ?? [], null);
        $this->setIfExists('refund_charge_info_list', $data ?? [], null);
        $this->setIfExists('refund_currency', $data ?? [], null);
        $this->setIfExists('refund_detail_item_list', $data ?? [], null);
        $this->setIfExists('refund_fee', $data ?? [], null);
        $this->setIfExists('refund_hyb_amount', $data ?? [], null);
        $this->setIfExists('refund_preset_paytool_list', $data ?? [], null);
        $this->setIfExists('refund_settlement_id', $data ?? [], null);
        $this->setIfExists('refund_voucher_detail_list', $data ?? [], null);
        $this->setIfExists('send_back_fee', $data ?? [], null);
        $this->setIfExists('store_name', $data ?? [], null);
        $this->setIfExists('trade_no', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets msg
     *
     * @return string|null
     */
    public function getMsg()
    {
        return $this->container['msg'];
    }

    /**
     * Sets msg
     *
     * @param string|null $msg msg
     *
     * @return self
     */
    public function setMsg($msg)
    {
        if (is_null($msg)) {
            array_push($this->openAPINullablesSetToNull, 'msg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('msg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['msg'] = $msg;

        return $this;
    }

    /**
     * Gets sub_code
     *
     * @return string|null
     */
    public function getSubCode()
    {
        return $this->container['sub_code'];
    }

    /**
     * Sets sub_code
     *
     * @param string|null $sub_code sub_code
     *
     * @return self
     */
    public function setSubCode($sub_code)
    {
        if (is_null($sub_code)) {
            array_push($this->openAPINullablesSetToNull, 'sub_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sub_code'] = $sub_code;

        return $this;
    }

    /**
     * Gets sub_msg
     *
     * @return string|null
     */
    public function getSubMsg()
    {
        return $this->container['sub_msg'];
    }

    /**
     * Sets sub_msg
     *
     * @param string|null $sub_msg sub_msg
     *
     * @return self
     */
    public function setSubMsg($sub_msg)
    {
        if (is_null($sub_msg)) {
            array_push($this->openAPINullablesSetToNull, 'sub_msg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_msg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sub_msg'] = $sub_msg;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            array_push($this->openAPINullablesSetToNull, 'body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets is_error
     *
     * @return bool|null
     */
    public function getIsError()
    {
        return $this->container['is_error'];
    }

    /**
     * Sets is_error
     *
     * @param bool|null $is_error is_error
     *
     * @return self
     */
    public function setIsError($is_error)
    {
        if (is_null($is_error)) {
            throw new \InvalidArgumentException('non-nullable is_error cannot be null');
        }
        $this->container['is_error'] = $is_error;

        return $this;
    }

    /**
     * Gets buyer_logon_id
     *
     * @return string|null
     */
    public function getBuyerLogonId()
    {
        return $this->container['buyer_logon_id'];
    }

    /**
     * Sets buyer_logon_id
     *
     * @param string|null $buyer_logon_id buyer_logon_id
     *
     * @return self
     */
    public function setBuyerLogonId($buyer_logon_id)
    {
        if (is_null($buyer_logon_id)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_logon_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_logon_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_logon_id'] = $buyer_logon_id;

        return $this;
    }

    /**
     * Gets buyer_open_id
     *
     * @return string|null
     */
    public function getBuyerOpenId()
    {
        return $this->container['buyer_open_id'];
    }

    /**
     * Sets buyer_open_id
     *
     * @param string|null $buyer_open_id buyer_open_id
     *
     * @return self
     */
    public function setBuyerOpenId($buyer_open_id)
    {
        if (is_null($buyer_open_id)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_open_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_open_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_open_id'] = $buyer_open_id;

        return $this;
    }

    /**
     * Gets buyer_user_id
     *
     * @return string|null
     */
    public function getBuyerUserId()
    {
        return $this->container['buyer_user_id'];
    }

    /**
     * Sets buyer_user_id
     *
     * @param string|null $buyer_user_id buyer_user_id
     *
     * @return self
     */
    public function setBuyerUserId($buyer_user_id)
    {
        if (is_null($buyer_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_user_id'] = $buyer_user_id;

        return $this;
    }

    /**
     * Gets fund_change
     *
     * @return string|null
     */
    public function getFundChange()
    {
        return $this->container['fund_change'];
    }

    /**
     * Sets fund_change
     *
     * @param string|null $fund_change fund_change
     *
     * @return self
     */
    public function setFundChange($fund_change)
    {
        if (is_null($fund_change)) {
            array_push($this->openAPINullablesSetToNull, 'fund_change');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fund_change', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fund_change'] = $fund_change;

        return $this;
    }

    /**
     * Gets gmt_refund_pay
     *
     * @return string|null
     */
    public function getGmtRefundPay()
    {
        return $this->container['gmt_refund_pay'];
    }

    /**
     * Sets gmt_refund_pay
     *
     * @param string|null $gmt_refund_pay gmt_refund_pay
     *
     * @return self
     */
    public function setGmtRefundPay($gmt_refund_pay)
    {
        if (is_null($gmt_refund_pay)) {
            array_push($this->openAPINullablesSetToNull, 'gmt_refund_pay');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('gmt_refund_pay', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['gmt_refund_pay'] = $gmt_refund_pay;

        return $this;
    }

    /**
     * Gets has_deposit_back
     *
     * @return string|null
     */
    public function getHasDepositBack()
    {
        return $this->container['has_deposit_back'];
    }

    /**
     * Sets has_deposit_back
     *
     * @param string|null $has_deposit_back has_deposit_back
     *
     * @return self
     */
    public function setHasDepositBack($has_deposit_back)
    {
        if (is_null($has_deposit_back)) {
            array_push($this->openAPINullablesSetToNull, 'has_deposit_back');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('has_deposit_back', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['has_deposit_back'] = $has_deposit_back;

        return $this;
    }

    /**
     * Gets open_id
     *
     * @return string|null
     */
    public function getOpenId()
    {
        return $this->container['open_id'];
    }

    /**
     * Sets open_id
     *
     * @param string|null $open_id open_id
     *
     * @return self
     */
    public function setOpenId($open_id)
    {
        if (is_null($open_id)) {
            array_push($this->openAPINullablesSetToNull, 'open_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_id'] = $open_id;

        return $this;
    }

    /**
     * Gets out_trade_no
     *
     * @return string|null
     */
    public function getOutTradeNo()
    {
        return $this->container['out_trade_no'];
    }

    /**
     * Sets out_trade_no
     *
     * @param string|null $out_trade_no out_trade_no
     *
     * @return self
     */
    public function setOutTradeNo($out_trade_no)
    {
        if (is_null($out_trade_no)) {
            array_push($this->openAPINullablesSetToNull, 'out_trade_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('out_trade_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['out_trade_no'] = $out_trade_no;

        return $this;
    }

    /**
     * Gets pre_auth_cancel_fee
     *
     * @return string|null
     */
    public function getPreAuthCancelFee()
    {
        return $this->container['pre_auth_cancel_fee'];
    }

    /**
     * Sets pre_auth_cancel_fee
     *
     * @param string|null $pre_auth_cancel_fee pre_auth_cancel_fee
     *
     * @return self
     */
    public function setPreAuthCancelFee($pre_auth_cancel_fee)
    {
        if (is_null($pre_auth_cancel_fee)) {
            array_push($this->openAPINullablesSetToNull, 'pre_auth_cancel_fee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pre_auth_cancel_fee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pre_auth_cancel_fee'] = $pre_auth_cancel_fee;

        return $this;
    }

    /**
     * Gets present_refund_buyer_amount
     *
     * @return string|null
     */
    public function getPresentRefundBuyerAmount()
    {
        return $this->container['present_refund_buyer_amount'];
    }

    /**
     * Sets present_refund_buyer_amount
     *
     * @param string|null $present_refund_buyer_amount present_refund_buyer_amount
     *
     * @return self
     */
    public function setPresentRefundBuyerAmount($present_refund_buyer_amount)
    {
        if (is_null($present_refund_buyer_amount)) {
            array_push($this->openAPINullablesSetToNull, 'present_refund_buyer_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('present_refund_buyer_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['present_refund_buyer_amount'] = $present_refund_buyer_amount;

        return $this;
    }

    /**
     * Gets present_refund_discount_amount
     *
     * @return string|null
     */
    public function getPresentRefundDiscountAmount()
    {
        return $this->container['present_refund_discount_amount'];
    }

    /**
     * Sets present_refund_discount_amount
     *
     * @param string|null $present_refund_discount_amount present_refund_discount_amount
     *
     * @return self
     */
    public function setPresentRefundDiscountAmount($present_refund_discount_amount)
    {
        if (is_null($present_refund_discount_amount)) {
            array_push($this->openAPINullablesSetToNull, 'present_refund_discount_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('present_refund_discount_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['present_refund_discount_amount'] = $present_refund_discount_amount;

        return $this;
    }

    /**
     * Gets present_refund_mdiscount_amount
     *
     * @return string|null
     */
    public function getPresentRefundMdiscountAmount()
    {
        return $this->container['present_refund_mdiscount_amount'];
    }

    /**
     * Sets present_refund_mdiscount_amount
     *
     * @param string|null $present_refund_mdiscount_amount present_refund_mdiscount_amount
     *
     * @return self
     */
    public function setPresentRefundMdiscountAmount($present_refund_mdiscount_amount)
    {
        if (is_null($present_refund_mdiscount_amount)) {
            array_push($this->openAPINullablesSetToNull, 'present_refund_mdiscount_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('present_refund_mdiscount_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['present_refund_mdiscount_amount'] = $present_refund_mdiscount_amount;

        return $this;
    }

    /**
     * Gets refund_charge_amount
     *
     * @return string|null
     */
    public function getRefundChargeAmount()
    {
        return $this->container['refund_charge_amount'];
    }

    /**
     * Sets refund_charge_amount
     *
     * @param string|null $refund_charge_amount refund_charge_amount
     *
     * @return self
     */
    public function setRefundChargeAmount($refund_charge_amount)
    {
        if (is_null($refund_charge_amount)) {
            array_push($this->openAPINullablesSetToNull, 'refund_charge_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_charge_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_charge_amount'] = $refund_charge_amount;

        return $this;
    }

    /**
     * Gets refund_charge_info_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\RefundChargeInfo[]|null
     */
    public function getRefundChargeInfoList()
    {
        return $this->container['refund_charge_info_list'];
    }

    /**
     * Sets refund_charge_info_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\RefundChargeInfo[]|null $refund_charge_info_list refund_charge_info_list
     *
     * @return self
     */
    public function setRefundChargeInfoList($refund_charge_info_list)
    {
        if (is_null($refund_charge_info_list)) {
            array_push($this->openAPINullablesSetToNull, 'refund_charge_info_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_charge_info_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_charge_info_list'] = $refund_charge_info_list;

        return $this;
    }

    /**
     * Gets refund_currency
     *
     * @return string|null
     */
    public function getRefundCurrency()
    {
        return $this->container['refund_currency'];
    }

    /**
     * Sets refund_currency
     *
     * @param string|null $refund_currency refund_currency
     *
     * @return self
     */
    public function setRefundCurrency($refund_currency)
    {
        if (is_null($refund_currency)) {
            array_push($this->openAPINullablesSetToNull, 'refund_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_currency'] = $refund_currency;

        return $this;
    }

    /**
     * Gets refund_detail_item_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\TradeFundBill[]|null
     */
    public function getRefundDetailItemList()
    {
        return $this->container['refund_detail_item_list'];
    }

    /**
     * Sets refund_detail_item_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\TradeFundBill[]|null $refund_detail_item_list refund_detail_item_list
     *
     * @return self
     */
    public function setRefundDetailItemList($refund_detail_item_list)
    {
        if (is_null($refund_detail_item_list)) {
            array_push($this->openAPINullablesSetToNull, 'refund_detail_item_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_detail_item_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_detail_item_list'] = $refund_detail_item_list;

        return $this;
    }

    /**
     * Gets refund_fee
     *
     * @return string|null
     */
    public function getRefundFee()
    {
        return $this->container['refund_fee'];
    }

    /**
     * Sets refund_fee
     *
     * @param string|null $refund_fee refund_fee
     *
     * @return self
     */
    public function setRefundFee($refund_fee)
    {
        if (is_null($refund_fee)) {
            array_push($this->openAPINullablesSetToNull, 'refund_fee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_fee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_fee'] = $refund_fee;

        return $this;
    }

    /**
     * Gets refund_hyb_amount
     *
     * @return string|null
     */
    public function getRefundHybAmount()
    {
        return $this->container['refund_hyb_amount'];
    }

    /**
     * Sets refund_hyb_amount
     *
     * @param string|null $refund_hyb_amount refund_hyb_amount
     *
     * @return self
     */
    public function setRefundHybAmount($refund_hyb_amount)
    {
        if (is_null($refund_hyb_amount)) {
            array_push($this->openAPINullablesSetToNull, 'refund_hyb_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_hyb_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_hyb_amount'] = $refund_hyb_amount;

        return $this;
    }

    /**
     * Gets refund_preset_paytool_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\PresetPayToolInfo|null
     */
    public function getRefundPresetPaytoolList()
    {
        return $this->container['refund_preset_paytool_list'];
    }

    /**
     * Sets refund_preset_paytool_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\PresetPayToolInfo|null $refund_preset_paytool_list refund_preset_paytool_list
     *
     * @return self
     */
    public function setRefundPresetPaytoolList($refund_preset_paytool_list)
    {
        if (is_null($refund_preset_paytool_list)) {
            throw new \InvalidArgumentException('non-nullable refund_preset_paytool_list cannot be null');
        }
        $this->container['refund_preset_paytool_list'] = $refund_preset_paytool_list;

        return $this;
    }

    /**
     * Gets refund_settlement_id
     *
     * @return string|null
     */
    public function getRefundSettlementId()
    {
        return $this->container['refund_settlement_id'];
    }

    /**
     * Sets refund_settlement_id
     *
     * @param string|null $refund_settlement_id refund_settlement_id
     *
     * @return self
     */
    public function setRefundSettlementId($refund_settlement_id)
    {
        if (is_null($refund_settlement_id)) {
            array_push($this->openAPINullablesSetToNull, 'refund_settlement_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_settlement_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_settlement_id'] = $refund_settlement_id;

        return $this;
    }

    /**
     * Gets refund_voucher_detail_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\VoucherDetail[]|null
     */
    public function getRefundVoucherDetailList()
    {
        return $this->container['refund_voucher_detail_list'];
    }

    /**
     * Sets refund_voucher_detail_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\VoucherDetail[]|null $refund_voucher_detail_list refund_voucher_detail_list
     *
     * @return self
     */
    public function setRefundVoucherDetailList($refund_voucher_detail_list)
    {
        if (is_null($refund_voucher_detail_list)) {
            array_push($this->openAPINullablesSetToNull, 'refund_voucher_detail_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('refund_voucher_detail_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['refund_voucher_detail_list'] = $refund_voucher_detail_list;

        return $this;
    }

    /**
     * Gets send_back_fee
     *
     * @return string|null
     */
    public function getSendBackFee()
    {
        return $this->container['send_back_fee'];
    }

    /**
     * Sets send_back_fee
     *
     * @param string|null $send_back_fee send_back_fee
     *
     * @return self
     */
    public function setSendBackFee($send_back_fee)
    {
        if (is_null($send_back_fee)) {
            array_push($this->openAPINullablesSetToNull, 'send_back_fee');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_back_fee', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_back_fee'] = $send_back_fee;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string|null
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string|null $store_name store_name
     *
     * @return self
     */
    public function setStoreName($store_name)
    {
        if (is_null($store_name)) {
            array_push($this->openAPINullablesSetToNull, 'store_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets trade_no
     *
     * @return string|null
     */
    public function getTradeNo()
    {
        return $this->container['trade_no'];
    }

    /**
     * Sets trade_no
     *
     * @param string|null $trade_no trade_no
     *
     * @return self
     */
    public function setTradeNo($trade_no)
    {
        if (is_null($trade_no)) {
            array_push($this->openAPINullablesSetToNull, 'trade_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_no'] = $trade_no;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


