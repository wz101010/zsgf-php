<?php
/**
 * AlipayTradeQueryResponse
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * AlipayTradeQueryResponse Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AlipayTradeQueryResponse implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AlipayTradeQueryResponse';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'code' => 'string',
        'msg' => 'string',
        'sub_code' => 'string',
        'sub_msg' => 'string',
        'is_error' => 'bool',
        'additional_status' => 'string',
        'alipay_store_id' => 'string',
        'alipay_sub_merchant_id' => 'string',
        'async_pay_apply_status' => 'string',
        'auth_trade_pay_mode' => 'string',
        'biz_settle_mode' => 'string',
        'bkagent_resp_info' => '\ZSGF\Client\ZSGF\Client\Model\BkAgentRespInfo',
        'body' => 'string',
        'buyer_logon_id' => 'string',
        'buyer_open_id' => 'string',
        'buyer_pay_amount' => 'string',
        'buyer_user_id' => 'string',
        'buyer_user_name' => 'string',
        'buyer_user_type' => 'string',
        'cashier_type' => 'string',
        'charge_amount' => 'string',
        'charge_flags' => 'string',
        'charge_info_list' => '\ZSGF\Client\ZSGF\Client\Model\ChargeInfo[]',
        'credit_biz_order_id' => 'string',
        'credit_pay_mode' => 'string',
        'discount_amount' => 'string',
        'discount_goods_detail' => 'string',
        'enterprise_pay_info' => '\ZSGF\Client\ZSGF\Client\Model\EnterprisePayInfo',
        'ext_infos' => 'string',
        'fulfillment_detail_list' => '\ZSGF\Client\ZSGF\Client\Model\FulfillmentDetail[]',
        'fund_bill_list' => '\ZSGF\Client\ZSGF\Client\Model\TradeFundBill[]',
        'hb_fq_pay_info' => '\ZSGF\Client\ZSGF\Client\Model\HbFqPayInfo',
        'hyb_amount' => 'string',
        'industry_sepc_detail' => 'string',
        'industry_sepc_detail_acc' => 'string',
        'industry_sepc_detail_gov' => 'string',
        'intact_charge_info_list' => '\ZSGF\Client\ZSGF\Client\Model\IntactChargeInfo[]',
        'invoice_amount' => 'string',
        'mdiscount_amount' => 'string',
        'medical_insurance_info' => 'string',
        'open_id' => 'string',
        'out_trade_no' => 'string',
        'passback_params' => 'string',
        'pay_amount' => 'string',
        'pay_currency' => 'string',
        'payment_info_with_id_list' => '\ZSGF\Client\ZSGF\Client\Model\PaymentInfoWithId[]',
        'period_scene' => 'string',
        'point_amount' => 'string',
        'pre_auth_pay_amount' => 'string',
        'receipt_amount' => 'string',
        'receipt_currency_type' => 'string',
        'req_goods_detail' => '\ZSGF\Client\ZSGF\Client\Model\GoodsDetail[]',
        'send_pay_date' => 'string',
        'settle_amount' => 'string',
        'settle_currency' => 'string',
        'settle_trans_rate' => 'string',
        'settlement_id' => 'string',
        'store_id' => 'string',
        'store_name' => 'string',
        'subject' => 'string',
        'tap_pay_info' => '\ZSGF\Client\ZSGF\Client\Model\TapPayInfo',
        'terminal_id' => 'string',
        'total_amount' => 'string',
        'trade_no' => 'string',
        'trade_settle_info' => '\ZSGF\Client\ZSGF\Client\Model\TradeSettleInfo',
        'trade_status' => 'string',
        'trans_currency' => 'string',
        'trans_pay_rate' => 'string',
        'voucher_detail_list' => '\ZSGF\Client\ZSGF\Client\Model\VoucherDetail[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'code' => null,
        'msg' => null,
        'sub_code' => null,
        'sub_msg' => null,
        'is_error' => null,
        'additional_status' => null,
        'alipay_store_id' => null,
        'alipay_sub_merchant_id' => null,
        'async_pay_apply_status' => null,
        'auth_trade_pay_mode' => null,
        'biz_settle_mode' => null,
        'bkagent_resp_info' => null,
        'body' => null,
        'buyer_logon_id' => null,
        'buyer_open_id' => null,
        'buyer_pay_amount' => null,
        'buyer_user_id' => null,
        'buyer_user_name' => null,
        'buyer_user_type' => null,
        'cashier_type' => null,
        'charge_amount' => null,
        'charge_flags' => null,
        'charge_info_list' => null,
        'credit_biz_order_id' => null,
        'credit_pay_mode' => null,
        'discount_amount' => null,
        'discount_goods_detail' => null,
        'enterprise_pay_info' => null,
        'ext_infos' => null,
        'fulfillment_detail_list' => null,
        'fund_bill_list' => null,
        'hb_fq_pay_info' => null,
        'hyb_amount' => null,
        'industry_sepc_detail' => null,
        'industry_sepc_detail_acc' => null,
        'industry_sepc_detail_gov' => null,
        'intact_charge_info_list' => null,
        'invoice_amount' => null,
        'mdiscount_amount' => null,
        'medical_insurance_info' => null,
        'open_id' => null,
        'out_trade_no' => null,
        'passback_params' => null,
        'pay_amount' => null,
        'pay_currency' => null,
        'payment_info_with_id_list' => null,
        'period_scene' => null,
        'point_amount' => null,
        'pre_auth_pay_amount' => null,
        'receipt_amount' => null,
        'receipt_currency_type' => null,
        'req_goods_detail' => null,
        'send_pay_date' => null,
        'settle_amount' => null,
        'settle_currency' => null,
        'settle_trans_rate' => null,
        'settlement_id' => null,
        'store_id' => null,
        'store_name' => null,
        'subject' => null,
        'tap_pay_info' => null,
        'terminal_id' => null,
        'total_amount' => null,
        'trade_no' => null,
        'trade_settle_info' => null,
        'trade_status' => null,
        'trans_currency' => null,
        'trans_pay_rate' => null,
        'voucher_detail_list' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'code' => true,
        'msg' => true,
        'sub_code' => true,
        'sub_msg' => true,
        'is_error' => false,
        'additional_status' => true,
        'alipay_store_id' => true,
        'alipay_sub_merchant_id' => true,
        'async_pay_apply_status' => true,
        'auth_trade_pay_mode' => true,
        'biz_settle_mode' => true,
        'bkagent_resp_info' => false,
        'body' => true,
        'buyer_logon_id' => true,
        'buyer_open_id' => true,
        'buyer_pay_amount' => true,
        'buyer_user_id' => true,
        'buyer_user_name' => true,
        'buyer_user_type' => true,
        'cashier_type' => true,
        'charge_amount' => true,
        'charge_flags' => true,
        'charge_info_list' => true,
        'credit_biz_order_id' => true,
        'credit_pay_mode' => true,
        'discount_amount' => true,
        'discount_goods_detail' => true,
        'enterprise_pay_info' => false,
        'ext_infos' => true,
        'fulfillment_detail_list' => true,
        'fund_bill_list' => true,
        'hb_fq_pay_info' => false,
        'hyb_amount' => true,
        'industry_sepc_detail' => true,
        'industry_sepc_detail_acc' => true,
        'industry_sepc_detail_gov' => true,
        'intact_charge_info_list' => true,
        'invoice_amount' => true,
        'mdiscount_amount' => true,
        'medical_insurance_info' => true,
        'open_id' => true,
        'out_trade_no' => true,
        'passback_params' => true,
        'pay_amount' => true,
        'pay_currency' => true,
        'payment_info_with_id_list' => true,
        'period_scene' => true,
        'point_amount' => true,
        'pre_auth_pay_amount' => true,
        'receipt_amount' => true,
        'receipt_currency_type' => true,
        'req_goods_detail' => true,
        'send_pay_date' => true,
        'settle_amount' => true,
        'settle_currency' => true,
        'settle_trans_rate' => true,
        'settlement_id' => true,
        'store_id' => true,
        'store_name' => true,
        'subject' => true,
        'tap_pay_info' => false,
        'terminal_id' => true,
        'total_amount' => true,
        'trade_no' => true,
        'trade_settle_info' => false,
        'trade_status' => true,
        'trans_currency' => true,
        'trans_pay_rate' => true,
        'voucher_detail_list' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'code',
        'msg' => 'msg',
        'sub_code' => 'subCode',
        'sub_msg' => 'subMsg',
        'is_error' => 'isError',
        'additional_status' => 'additionalStatus',
        'alipay_store_id' => 'alipayStoreId',
        'alipay_sub_merchant_id' => 'alipaySubMerchantId',
        'async_pay_apply_status' => 'asyncPayApplyStatus',
        'auth_trade_pay_mode' => 'authTradePayMode',
        'biz_settle_mode' => 'bizSettleMode',
        'bkagent_resp_info' => 'bkagentRespInfo',
        'body' => 'body',
        'buyer_logon_id' => 'buyerLogonId',
        'buyer_open_id' => 'buyerOpenId',
        'buyer_pay_amount' => 'buyerPayAmount',
        'buyer_user_id' => 'buyerUserId',
        'buyer_user_name' => 'buyerUserName',
        'buyer_user_type' => 'buyerUserType',
        'cashier_type' => 'cashierType',
        'charge_amount' => 'chargeAmount',
        'charge_flags' => 'chargeFlags',
        'charge_info_list' => 'chargeInfoList',
        'credit_biz_order_id' => 'creditBizOrderId',
        'credit_pay_mode' => 'creditPayMode',
        'discount_amount' => 'discountAmount',
        'discount_goods_detail' => 'discountGoodsDetail',
        'enterprise_pay_info' => 'enterprisePayInfo',
        'ext_infos' => 'extInfos',
        'fulfillment_detail_list' => 'fulfillmentDetailList',
        'fund_bill_list' => 'fundBillList',
        'hb_fq_pay_info' => 'hbFqPayInfo',
        'hyb_amount' => 'hybAmount',
        'industry_sepc_detail' => 'industrySepcDetail',
        'industry_sepc_detail_acc' => 'industrySepcDetailAcc',
        'industry_sepc_detail_gov' => 'industrySepcDetailGov',
        'intact_charge_info_list' => 'intactChargeInfoList',
        'invoice_amount' => 'invoiceAmount',
        'mdiscount_amount' => 'mdiscountAmount',
        'medical_insurance_info' => 'medicalInsuranceInfo',
        'open_id' => 'openId',
        'out_trade_no' => 'outTradeNo',
        'passback_params' => 'passbackParams',
        'pay_amount' => 'payAmount',
        'pay_currency' => 'payCurrency',
        'payment_info_with_id_list' => 'paymentInfoWithIdList',
        'period_scene' => 'periodScene',
        'point_amount' => 'pointAmount',
        'pre_auth_pay_amount' => 'preAuthPayAmount',
        'receipt_amount' => 'receiptAmount',
        'receipt_currency_type' => 'receiptCurrencyType',
        'req_goods_detail' => 'reqGoodsDetail',
        'send_pay_date' => 'sendPayDate',
        'settle_amount' => 'settleAmount',
        'settle_currency' => 'settleCurrency',
        'settle_trans_rate' => 'settleTransRate',
        'settlement_id' => 'settlementId',
        'store_id' => 'storeId',
        'store_name' => 'storeName',
        'subject' => 'subject',
        'tap_pay_info' => 'tapPayInfo',
        'terminal_id' => 'terminalId',
        'total_amount' => 'totalAmount',
        'trade_no' => 'tradeNo',
        'trade_settle_info' => 'tradeSettleInfo',
        'trade_status' => 'tradeStatus',
        'trans_currency' => 'transCurrency',
        'trans_pay_rate' => 'transPayRate',
        'voucher_detail_list' => 'voucherDetailList'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'msg' => 'setMsg',
        'sub_code' => 'setSubCode',
        'sub_msg' => 'setSubMsg',
        'is_error' => 'setIsError',
        'additional_status' => 'setAdditionalStatus',
        'alipay_store_id' => 'setAlipayStoreId',
        'alipay_sub_merchant_id' => 'setAlipaySubMerchantId',
        'async_pay_apply_status' => 'setAsyncPayApplyStatus',
        'auth_trade_pay_mode' => 'setAuthTradePayMode',
        'biz_settle_mode' => 'setBizSettleMode',
        'bkagent_resp_info' => 'setBkagentRespInfo',
        'body' => 'setBody',
        'buyer_logon_id' => 'setBuyerLogonId',
        'buyer_open_id' => 'setBuyerOpenId',
        'buyer_pay_amount' => 'setBuyerPayAmount',
        'buyer_user_id' => 'setBuyerUserId',
        'buyer_user_name' => 'setBuyerUserName',
        'buyer_user_type' => 'setBuyerUserType',
        'cashier_type' => 'setCashierType',
        'charge_amount' => 'setChargeAmount',
        'charge_flags' => 'setChargeFlags',
        'charge_info_list' => 'setChargeInfoList',
        'credit_biz_order_id' => 'setCreditBizOrderId',
        'credit_pay_mode' => 'setCreditPayMode',
        'discount_amount' => 'setDiscountAmount',
        'discount_goods_detail' => 'setDiscountGoodsDetail',
        'enterprise_pay_info' => 'setEnterprisePayInfo',
        'ext_infos' => 'setExtInfos',
        'fulfillment_detail_list' => 'setFulfillmentDetailList',
        'fund_bill_list' => 'setFundBillList',
        'hb_fq_pay_info' => 'setHbFqPayInfo',
        'hyb_amount' => 'setHybAmount',
        'industry_sepc_detail' => 'setIndustrySepcDetail',
        'industry_sepc_detail_acc' => 'setIndustrySepcDetailAcc',
        'industry_sepc_detail_gov' => 'setIndustrySepcDetailGov',
        'intact_charge_info_list' => 'setIntactChargeInfoList',
        'invoice_amount' => 'setInvoiceAmount',
        'mdiscount_amount' => 'setMdiscountAmount',
        'medical_insurance_info' => 'setMedicalInsuranceInfo',
        'open_id' => 'setOpenId',
        'out_trade_no' => 'setOutTradeNo',
        'passback_params' => 'setPassbackParams',
        'pay_amount' => 'setPayAmount',
        'pay_currency' => 'setPayCurrency',
        'payment_info_with_id_list' => 'setPaymentInfoWithIdList',
        'period_scene' => 'setPeriodScene',
        'point_amount' => 'setPointAmount',
        'pre_auth_pay_amount' => 'setPreAuthPayAmount',
        'receipt_amount' => 'setReceiptAmount',
        'receipt_currency_type' => 'setReceiptCurrencyType',
        'req_goods_detail' => 'setReqGoodsDetail',
        'send_pay_date' => 'setSendPayDate',
        'settle_amount' => 'setSettleAmount',
        'settle_currency' => 'setSettleCurrency',
        'settle_trans_rate' => 'setSettleTransRate',
        'settlement_id' => 'setSettlementId',
        'store_id' => 'setStoreId',
        'store_name' => 'setStoreName',
        'subject' => 'setSubject',
        'tap_pay_info' => 'setTapPayInfo',
        'terminal_id' => 'setTerminalId',
        'total_amount' => 'setTotalAmount',
        'trade_no' => 'setTradeNo',
        'trade_settle_info' => 'setTradeSettleInfo',
        'trade_status' => 'setTradeStatus',
        'trans_currency' => 'setTransCurrency',
        'trans_pay_rate' => 'setTransPayRate',
        'voucher_detail_list' => 'setVoucherDetailList'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'msg' => 'getMsg',
        'sub_code' => 'getSubCode',
        'sub_msg' => 'getSubMsg',
        'is_error' => 'getIsError',
        'additional_status' => 'getAdditionalStatus',
        'alipay_store_id' => 'getAlipayStoreId',
        'alipay_sub_merchant_id' => 'getAlipaySubMerchantId',
        'async_pay_apply_status' => 'getAsyncPayApplyStatus',
        'auth_trade_pay_mode' => 'getAuthTradePayMode',
        'biz_settle_mode' => 'getBizSettleMode',
        'bkagent_resp_info' => 'getBkagentRespInfo',
        'body' => 'getBody',
        'buyer_logon_id' => 'getBuyerLogonId',
        'buyer_open_id' => 'getBuyerOpenId',
        'buyer_pay_amount' => 'getBuyerPayAmount',
        'buyer_user_id' => 'getBuyerUserId',
        'buyer_user_name' => 'getBuyerUserName',
        'buyer_user_type' => 'getBuyerUserType',
        'cashier_type' => 'getCashierType',
        'charge_amount' => 'getChargeAmount',
        'charge_flags' => 'getChargeFlags',
        'charge_info_list' => 'getChargeInfoList',
        'credit_biz_order_id' => 'getCreditBizOrderId',
        'credit_pay_mode' => 'getCreditPayMode',
        'discount_amount' => 'getDiscountAmount',
        'discount_goods_detail' => 'getDiscountGoodsDetail',
        'enterprise_pay_info' => 'getEnterprisePayInfo',
        'ext_infos' => 'getExtInfos',
        'fulfillment_detail_list' => 'getFulfillmentDetailList',
        'fund_bill_list' => 'getFundBillList',
        'hb_fq_pay_info' => 'getHbFqPayInfo',
        'hyb_amount' => 'getHybAmount',
        'industry_sepc_detail' => 'getIndustrySepcDetail',
        'industry_sepc_detail_acc' => 'getIndustrySepcDetailAcc',
        'industry_sepc_detail_gov' => 'getIndustrySepcDetailGov',
        'intact_charge_info_list' => 'getIntactChargeInfoList',
        'invoice_amount' => 'getInvoiceAmount',
        'mdiscount_amount' => 'getMdiscountAmount',
        'medical_insurance_info' => 'getMedicalInsuranceInfo',
        'open_id' => 'getOpenId',
        'out_trade_no' => 'getOutTradeNo',
        'passback_params' => 'getPassbackParams',
        'pay_amount' => 'getPayAmount',
        'pay_currency' => 'getPayCurrency',
        'payment_info_with_id_list' => 'getPaymentInfoWithIdList',
        'period_scene' => 'getPeriodScene',
        'point_amount' => 'getPointAmount',
        'pre_auth_pay_amount' => 'getPreAuthPayAmount',
        'receipt_amount' => 'getReceiptAmount',
        'receipt_currency_type' => 'getReceiptCurrencyType',
        'req_goods_detail' => 'getReqGoodsDetail',
        'send_pay_date' => 'getSendPayDate',
        'settle_amount' => 'getSettleAmount',
        'settle_currency' => 'getSettleCurrency',
        'settle_trans_rate' => 'getSettleTransRate',
        'settlement_id' => 'getSettlementId',
        'store_id' => 'getStoreId',
        'store_name' => 'getStoreName',
        'subject' => 'getSubject',
        'tap_pay_info' => 'getTapPayInfo',
        'terminal_id' => 'getTerminalId',
        'total_amount' => 'getTotalAmount',
        'trade_no' => 'getTradeNo',
        'trade_settle_info' => 'getTradeSettleInfo',
        'trade_status' => 'getTradeStatus',
        'trans_currency' => 'getTransCurrency',
        'trans_pay_rate' => 'getTransPayRate',
        'voucher_detail_list' => 'getVoucherDetailList'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('msg', $data ?? [], null);
        $this->setIfExists('sub_code', $data ?? [], null);
        $this->setIfExists('sub_msg', $data ?? [], null);
        $this->setIfExists('is_error', $data ?? [], null);
        $this->setIfExists('additional_status', $data ?? [], null);
        $this->setIfExists('alipay_store_id', $data ?? [], null);
        $this->setIfExists('alipay_sub_merchant_id', $data ?? [], null);
        $this->setIfExists('async_pay_apply_status', $data ?? [], null);
        $this->setIfExists('auth_trade_pay_mode', $data ?? [], null);
        $this->setIfExists('biz_settle_mode', $data ?? [], null);
        $this->setIfExists('bkagent_resp_info', $data ?? [], null);
        $this->setIfExists('body', $data ?? [], null);
        $this->setIfExists('buyer_logon_id', $data ?? [], null);
        $this->setIfExists('buyer_open_id', $data ?? [], null);
        $this->setIfExists('buyer_pay_amount', $data ?? [], null);
        $this->setIfExists('buyer_user_id', $data ?? [], null);
        $this->setIfExists('buyer_user_name', $data ?? [], null);
        $this->setIfExists('buyer_user_type', $data ?? [], null);
        $this->setIfExists('cashier_type', $data ?? [], null);
        $this->setIfExists('charge_amount', $data ?? [], null);
        $this->setIfExists('charge_flags', $data ?? [], null);
        $this->setIfExists('charge_info_list', $data ?? [], null);
        $this->setIfExists('credit_biz_order_id', $data ?? [], null);
        $this->setIfExists('credit_pay_mode', $data ?? [], null);
        $this->setIfExists('discount_amount', $data ?? [], null);
        $this->setIfExists('discount_goods_detail', $data ?? [], null);
        $this->setIfExists('enterprise_pay_info', $data ?? [], null);
        $this->setIfExists('ext_infos', $data ?? [], null);
        $this->setIfExists('fulfillment_detail_list', $data ?? [], null);
        $this->setIfExists('fund_bill_list', $data ?? [], null);
        $this->setIfExists('hb_fq_pay_info', $data ?? [], null);
        $this->setIfExists('hyb_amount', $data ?? [], null);
        $this->setIfExists('industry_sepc_detail', $data ?? [], null);
        $this->setIfExists('industry_sepc_detail_acc', $data ?? [], null);
        $this->setIfExists('industry_sepc_detail_gov', $data ?? [], null);
        $this->setIfExists('intact_charge_info_list', $data ?? [], null);
        $this->setIfExists('invoice_amount', $data ?? [], null);
        $this->setIfExists('mdiscount_amount', $data ?? [], null);
        $this->setIfExists('medical_insurance_info', $data ?? [], null);
        $this->setIfExists('open_id', $data ?? [], null);
        $this->setIfExists('out_trade_no', $data ?? [], null);
        $this->setIfExists('passback_params', $data ?? [], null);
        $this->setIfExists('pay_amount', $data ?? [], null);
        $this->setIfExists('pay_currency', $data ?? [], null);
        $this->setIfExists('payment_info_with_id_list', $data ?? [], null);
        $this->setIfExists('period_scene', $data ?? [], null);
        $this->setIfExists('point_amount', $data ?? [], null);
        $this->setIfExists('pre_auth_pay_amount', $data ?? [], null);
        $this->setIfExists('receipt_amount', $data ?? [], null);
        $this->setIfExists('receipt_currency_type', $data ?? [], null);
        $this->setIfExists('req_goods_detail', $data ?? [], null);
        $this->setIfExists('send_pay_date', $data ?? [], null);
        $this->setIfExists('settle_amount', $data ?? [], null);
        $this->setIfExists('settle_currency', $data ?? [], null);
        $this->setIfExists('settle_trans_rate', $data ?? [], null);
        $this->setIfExists('settlement_id', $data ?? [], null);
        $this->setIfExists('store_id', $data ?? [], null);
        $this->setIfExists('store_name', $data ?? [], null);
        $this->setIfExists('subject', $data ?? [], null);
        $this->setIfExists('tap_pay_info', $data ?? [], null);
        $this->setIfExists('terminal_id', $data ?? [], null);
        $this->setIfExists('total_amount', $data ?? [], null);
        $this->setIfExists('trade_no', $data ?? [], null);
        $this->setIfExists('trade_settle_info', $data ?? [], null);
        $this->setIfExists('trade_status', $data ?? [], null);
        $this->setIfExists('trans_currency', $data ?? [], null);
        $this->setIfExists('trans_pay_rate', $data ?? [], null);
        $this->setIfExists('voucher_detail_list', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code code
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets msg
     *
     * @return string|null
     */
    public function getMsg()
    {
        return $this->container['msg'];
    }

    /**
     * Sets msg
     *
     * @param string|null $msg msg
     *
     * @return self
     */
    public function setMsg($msg)
    {
        if (is_null($msg)) {
            array_push($this->openAPINullablesSetToNull, 'msg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('msg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['msg'] = $msg;

        return $this;
    }

    /**
     * Gets sub_code
     *
     * @return string|null
     */
    public function getSubCode()
    {
        return $this->container['sub_code'];
    }

    /**
     * Sets sub_code
     *
     * @param string|null $sub_code sub_code
     *
     * @return self
     */
    public function setSubCode($sub_code)
    {
        if (is_null($sub_code)) {
            array_push($this->openAPINullablesSetToNull, 'sub_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sub_code'] = $sub_code;

        return $this;
    }

    /**
     * Gets sub_msg
     *
     * @return string|null
     */
    public function getSubMsg()
    {
        return $this->container['sub_msg'];
    }

    /**
     * Sets sub_msg
     *
     * @param string|null $sub_msg sub_msg
     *
     * @return self
     */
    public function setSubMsg($sub_msg)
    {
        if (is_null($sub_msg)) {
            array_push($this->openAPINullablesSetToNull, 'sub_msg');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('sub_msg', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['sub_msg'] = $sub_msg;

        return $this;
    }

    /**
     * Gets is_error
     *
     * @return bool|null
     */
    public function getIsError()
    {
        return $this->container['is_error'];
    }

    /**
     * Sets is_error
     *
     * @param bool|null $is_error is_error
     *
     * @return self
     */
    public function setIsError($is_error)
    {
        if (is_null($is_error)) {
            throw new \InvalidArgumentException('non-nullable is_error cannot be null');
        }
        $this->container['is_error'] = $is_error;

        return $this;
    }

    /**
     * Gets additional_status
     *
     * @return string|null
     */
    public function getAdditionalStatus()
    {
        return $this->container['additional_status'];
    }

    /**
     * Sets additional_status
     *
     * @param string|null $additional_status additional_status
     *
     * @return self
     */
    public function setAdditionalStatus($additional_status)
    {
        if (is_null($additional_status)) {
            array_push($this->openAPINullablesSetToNull, 'additional_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('additional_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['additional_status'] = $additional_status;

        return $this;
    }

    /**
     * Gets alipay_store_id
     *
     * @return string|null
     */
    public function getAlipayStoreId()
    {
        return $this->container['alipay_store_id'];
    }

    /**
     * Sets alipay_store_id
     *
     * @param string|null $alipay_store_id alipay_store_id
     *
     * @return self
     */
    public function setAlipayStoreId($alipay_store_id)
    {
        if (is_null($alipay_store_id)) {
            array_push($this->openAPINullablesSetToNull, 'alipay_store_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alipay_store_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alipay_store_id'] = $alipay_store_id;

        return $this;
    }

    /**
     * Gets alipay_sub_merchant_id
     *
     * @return string|null
     */
    public function getAlipaySubMerchantId()
    {
        return $this->container['alipay_sub_merchant_id'];
    }

    /**
     * Sets alipay_sub_merchant_id
     *
     * @param string|null $alipay_sub_merchant_id alipay_sub_merchant_id
     *
     * @return self
     */
    public function setAlipaySubMerchantId($alipay_sub_merchant_id)
    {
        if (is_null($alipay_sub_merchant_id)) {
            array_push($this->openAPINullablesSetToNull, 'alipay_sub_merchant_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('alipay_sub_merchant_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['alipay_sub_merchant_id'] = $alipay_sub_merchant_id;

        return $this;
    }

    /**
     * Gets async_pay_apply_status
     *
     * @return string|null
     */
    public function getAsyncPayApplyStatus()
    {
        return $this->container['async_pay_apply_status'];
    }

    /**
     * Sets async_pay_apply_status
     *
     * @param string|null $async_pay_apply_status async_pay_apply_status
     *
     * @return self
     */
    public function setAsyncPayApplyStatus($async_pay_apply_status)
    {
        if (is_null($async_pay_apply_status)) {
            array_push($this->openAPINullablesSetToNull, 'async_pay_apply_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('async_pay_apply_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['async_pay_apply_status'] = $async_pay_apply_status;

        return $this;
    }

    /**
     * Gets auth_trade_pay_mode
     *
     * @return string|null
     */
    public function getAuthTradePayMode()
    {
        return $this->container['auth_trade_pay_mode'];
    }

    /**
     * Sets auth_trade_pay_mode
     *
     * @param string|null $auth_trade_pay_mode auth_trade_pay_mode
     *
     * @return self
     */
    public function setAuthTradePayMode($auth_trade_pay_mode)
    {
        if (is_null($auth_trade_pay_mode)) {
            array_push($this->openAPINullablesSetToNull, 'auth_trade_pay_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('auth_trade_pay_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['auth_trade_pay_mode'] = $auth_trade_pay_mode;

        return $this;
    }

    /**
     * Gets biz_settle_mode
     *
     * @return string|null
     */
    public function getBizSettleMode()
    {
        return $this->container['biz_settle_mode'];
    }

    /**
     * Sets biz_settle_mode
     *
     * @param string|null $biz_settle_mode biz_settle_mode
     *
     * @return self
     */
    public function setBizSettleMode($biz_settle_mode)
    {
        if (is_null($biz_settle_mode)) {
            array_push($this->openAPINullablesSetToNull, 'biz_settle_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('biz_settle_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['biz_settle_mode'] = $biz_settle_mode;

        return $this;
    }

    /**
     * Gets bkagent_resp_info
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\BkAgentRespInfo|null
     */
    public function getBkagentRespInfo()
    {
        return $this->container['bkagent_resp_info'];
    }

    /**
     * Sets bkagent_resp_info
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\BkAgentRespInfo|null $bkagent_resp_info bkagent_resp_info
     *
     * @return self
     */
    public function setBkagentRespInfo($bkagent_resp_info)
    {
        if (is_null($bkagent_resp_info)) {
            throw new \InvalidArgumentException('non-nullable bkagent_resp_info cannot be null');
        }
        $this->container['bkagent_resp_info'] = $bkagent_resp_info;

        return $this;
    }

    /**
     * Gets body
     *
     * @return string|null
     */
    public function getBody()
    {
        return $this->container['body'];
    }

    /**
     * Sets body
     *
     * @param string|null $body body
     *
     * @return self
     */
    public function setBody($body)
    {
        if (is_null($body)) {
            array_push($this->openAPINullablesSetToNull, 'body');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('body', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['body'] = $body;

        return $this;
    }

    /**
     * Gets buyer_logon_id
     *
     * @return string|null
     */
    public function getBuyerLogonId()
    {
        return $this->container['buyer_logon_id'];
    }

    /**
     * Sets buyer_logon_id
     *
     * @param string|null $buyer_logon_id buyer_logon_id
     *
     * @return self
     */
    public function setBuyerLogonId($buyer_logon_id)
    {
        if (is_null($buyer_logon_id)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_logon_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_logon_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_logon_id'] = $buyer_logon_id;

        return $this;
    }

    /**
     * Gets buyer_open_id
     *
     * @return string|null
     */
    public function getBuyerOpenId()
    {
        return $this->container['buyer_open_id'];
    }

    /**
     * Sets buyer_open_id
     *
     * @param string|null $buyer_open_id buyer_open_id
     *
     * @return self
     */
    public function setBuyerOpenId($buyer_open_id)
    {
        if (is_null($buyer_open_id)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_open_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_open_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_open_id'] = $buyer_open_id;

        return $this;
    }

    /**
     * Gets buyer_pay_amount
     *
     * @return string|null
     */
    public function getBuyerPayAmount()
    {
        return $this->container['buyer_pay_amount'];
    }

    /**
     * Sets buyer_pay_amount
     *
     * @param string|null $buyer_pay_amount buyer_pay_amount
     *
     * @return self
     */
    public function setBuyerPayAmount($buyer_pay_amount)
    {
        if (is_null($buyer_pay_amount)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_pay_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_pay_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_pay_amount'] = $buyer_pay_amount;

        return $this;
    }

    /**
     * Gets buyer_user_id
     *
     * @return string|null
     */
    public function getBuyerUserId()
    {
        return $this->container['buyer_user_id'];
    }

    /**
     * Sets buyer_user_id
     *
     * @param string|null $buyer_user_id buyer_user_id
     *
     * @return self
     */
    public function setBuyerUserId($buyer_user_id)
    {
        if (is_null($buyer_user_id)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_user_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_user_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_user_id'] = $buyer_user_id;

        return $this;
    }

    /**
     * Gets buyer_user_name
     *
     * @return string|null
     */
    public function getBuyerUserName()
    {
        return $this->container['buyer_user_name'];
    }

    /**
     * Sets buyer_user_name
     *
     * @param string|null $buyer_user_name buyer_user_name
     *
     * @return self
     */
    public function setBuyerUserName($buyer_user_name)
    {
        if (is_null($buyer_user_name)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_user_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_user_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_user_name'] = $buyer_user_name;

        return $this;
    }

    /**
     * Gets buyer_user_type
     *
     * @return string|null
     */
    public function getBuyerUserType()
    {
        return $this->container['buyer_user_type'];
    }

    /**
     * Sets buyer_user_type
     *
     * @param string|null $buyer_user_type buyer_user_type
     *
     * @return self
     */
    public function setBuyerUserType($buyer_user_type)
    {
        if (is_null($buyer_user_type)) {
            array_push($this->openAPINullablesSetToNull, 'buyer_user_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('buyer_user_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['buyer_user_type'] = $buyer_user_type;

        return $this;
    }

    /**
     * Gets cashier_type
     *
     * @return string|null
     */
    public function getCashierType()
    {
        return $this->container['cashier_type'];
    }

    /**
     * Sets cashier_type
     *
     * @param string|null $cashier_type cashier_type
     *
     * @return self
     */
    public function setCashierType($cashier_type)
    {
        if (is_null($cashier_type)) {
            array_push($this->openAPINullablesSetToNull, 'cashier_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('cashier_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['cashier_type'] = $cashier_type;

        return $this;
    }

    /**
     * Gets charge_amount
     *
     * @return string|null
     */
    public function getChargeAmount()
    {
        return $this->container['charge_amount'];
    }

    /**
     * Sets charge_amount
     *
     * @param string|null $charge_amount charge_amount
     *
     * @return self
     */
    public function setChargeAmount($charge_amount)
    {
        if (is_null($charge_amount)) {
            array_push($this->openAPINullablesSetToNull, 'charge_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('charge_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['charge_amount'] = $charge_amount;

        return $this;
    }

    /**
     * Gets charge_flags
     *
     * @return string|null
     */
    public function getChargeFlags()
    {
        return $this->container['charge_flags'];
    }

    /**
     * Sets charge_flags
     *
     * @param string|null $charge_flags charge_flags
     *
     * @return self
     */
    public function setChargeFlags($charge_flags)
    {
        if (is_null($charge_flags)) {
            array_push($this->openAPINullablesSetToNull, 'charge_flags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('charge_flags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['charge_flags'] = $charge_flags;

        return $this;
    }

    /**
     * Gets charge_info_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\ChargeInfo[]|null
     */
    public function getChargeInfoList()
    {
        return $this->container['charge_info_list'];
    }

    /**
     * Sets charge_info_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\ChargeInfo[]|null $charge_info_list charge_info_list
     *
     * @return self
     */
    public function setChargeInfoList($charge_info_list)
    {
        if (is_null($charge_info_list)) {
            array_push($this->openAPINullablesSetToNull, 'charge_info_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('charge_info_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['charge_info_list'] = $charge_info_list;

        return $this;
    }

    /**
     * Gets credit_biz_order_id
     *
     * @return string|null
     */
    public function getCreditBizOrderId()
    {
        return $this->container['credit_biz_order_id'];
    }

    /**
     * Sets credit_biz_order_id
     *
     * @param string|null $credit_biz_order_id credit_biz_order_id
     *
     * @return self
     */
    public function setCreditBizOrderId($credit_biz_order_id)
    {
        if (is_null($credit_biz_order_id)) {
            array_push($this->openAPINullablesSetToNull, 'credit_biz_order_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_biz_order_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credit_biz_order_id'] = $credit_biz_order_id;

        return $this;
    }

    /**
     * Gets credit_pay_mode
     *
     * @return string|null
     */
    public function getCreditPayMode()
    {
        return $this->container['credit_pay_mode'];
    }

    /**
     * Sets credit_pay_mode
     *
     * @param string|null $credit_pay_mode credit_pay_mode
     *
     * @return self
     */
    public function setCreditPayMode($credit_pay_mode)
    {
        if (is_null($credit_pay_mode)) {
            array_push($this->openAPINullablesSetToNull, 'credit_pay_mode');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('credit_pay_mode', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['credit_pay_mode'] = $credit_pay_mode;

        return $this;
    }

    /**
     * Gets discount_amount
     *
     * @return string|null
     */
    public function getDiscountAmount()
    {
        return $this->container['discount_amount'];
    }

    /**
     * Sets discount_amount
     *
     * @param string|null $discount_amount discount_amount
     *
     * @return self
     */
    public function setDiscountAmount($discount_amount)
    {
        if (is_null($discount_amount)) {
            array_push($this->openAPINullablesSetToNull, 'discount_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_amount'] = $discount_amount;

        return $this;
    }

    /**
     * Gets discount_goods_detail
     *
     * @return string|null
     */
    public function getDiscountGoodsDetail()
    {
        return $this->container['discount_goods_detail'];
    }

    /**
     * Sets discount_goods_detail
     *
     * @param string|null $discount_goods_detail discount_goods_detail
     *
     * @return self
     */
    public function setDiscountGoodsDetail($discount_goods_detail)
    {
        if (is_null($discount_goods_detail)) {
            array_push($this->openAPINullablesSetToNull, 'discount_goods_detail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('discount_goods_detail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['discount_goods_detail'] = $discount_goods_detail;

        return $this;
    }

    /**
     * Gets enterprise_pay_info
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\EnterprisePayInfo|null
     */
    public function getEnterprisePayInfo()
    {
        return $this->container['enterprise_pay_info'];
    }

    /**
     * Sets enterprise_pay_info
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\EnterprisePayInfo|null $enterprise_pay_info enterprise_pay_info
     *
     * @return self
     */
    public function setEnterprisePayInfo($enterprise_pay_info)
    {
        if (is_null($enterprise_pay_info)) {
            throw new \InvalidArgumentException('non-nullable enterprise_pay_info cannot be null');
        }
        $this->container['enterprise_pay_info'] = $enterprise_pay_info;

        return $this;
    }

    /**
     * Gets ext_infos
     *
     * @return string|null
     */
    public function getExtInfos()
    {
        return $this->container['ext_infos'];
    }

    /**
     * Sets ext_infos
     *
     * @param string|null $ext_infos ext_infos
     *
     * @return self
     */
    public function setExtInfos($ext_infos)
    {
        if (is_null($ext_infos)) {
            array_push($this->openAPINullablesSetToNull, 'ext_infos');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('ext_infos', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['ext_infos'] = $ext_infos;

        return $this;
    }

    /**
     * Gets fulfillment_detail_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\FulfillmentDetail[]|null
     */
    public function getFulfillmentDetailList()
    {
        return $this->container['fulfillment_detail_list'];
    }

    /**
     * Sets fulfillment_detail_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\FulfillmentDetail[]|null $fulfillment_detail_list fulfillment_detail_list
     *
     * @return self
     */
    public function setFulfillmentDetailList($fulfillment_detail_list)
    {
        if (is_null($fulfillment_detail_list)) {
            array_push($this->openAPINullablesSetToNull, 'fulfillment_detail_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fulfillment_detail_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fulfillment_detail_list'] = $fulfillment_detail_list;

        return $this;
    }

    /**
     * Gets fund_bill_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\TradeFundBill[]|null
     */
    public function getFundBillList()
    {
        return $this->container['fund_bill_list'];
    }

    /**
     * Sets fund_bill_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\TradeFundBill[]|null $fund_bill_list fund_bill_list
     *
     * @return self
     */
    public function setFundBillList($fund_bill_list)
    {
        if (is_null($fund_bill_list)) {
            array_push($this->openAPINullablesSetToNull, 'fund_bill_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('fund_bill_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['fund_bill_list'] = $fund_bill_list;

        return $this;
    }

    /**
     * Gets hb_fq_pay_info
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\HbFqPayInfo|null
     */
    public function getHbFqPayInfo()
    {
        return $this->container['hb_fq_pay_info'];
    }

    /**
     * Sets hb_fq_pay_info
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\HbFqPayInfo|null $hb_fq_pay_info hb_fq_pay_info
     *
     * @return self
     */
    public function setHbFqPayInfo($hb_fq_pay_info)
    {
        if (is_null($hb_fq_pay_info)) {
            throw new \InvalidArgumentException('non-nullable hb_fq_pay_info cannot be null');
        }
        $this->container['hb_fq_pay_info'] = $hb_fq_pay_info;

        return $this;
    }

    /**
     * Gets hyb_amount
     *
     * @return string|null
     */
    public function getHybAmount()
    {
        return $this->container['hyb_amount'];
    }

    /**
     * Sets hyb_amount
     *
     * @param string|null $hyb_amount hyb_amount
     *
     * @return self
     */
    public function setHybAmount($hyb_amount)
    {
        if (is_null($hyb_amount)) {
            array_push($this->openAPINullablesSetToNull, 'hyb_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('hyb_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['hyb_amount'] = $hyb_amount;

        return $this;
    }

    /**
     * Gets industry_sepc_detail
     *
     * @return string|null
     */
    public function getIndustrySepcDetail()
    {
        return $this->container['industry_sepc_detail'];
    }

    /**
     * Sets industry_sepc_detail
     *
     * @param string|null $industry_sepc_detail industry_sepc_detail
     *
     * @return self
     */
    public function setIndustrySepcDetail($industry_sepc_detail)
    {
        if (is_null($industry_sepc_detail)) {
            array_push($this->openAPINullablesSetToNull, 'industry_sepc_detail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_sepc_detail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_sepc_detail'] = $industry_sepc_detail;

        return $this;
    }

    /**
     * Gets industry_sepc_detail_acc
     *
     * @return string|null
     */
    public function getIndustrySepcDetailAcc()
    {
        return $this->container['industry_sepc_detail_acc'];
    }

    /**
     * Sets industry_sepc_detail_acc
     *
     * @param string|null $industry_sepc_detail_acc industry_sepc_detail_acc
     *
     * @return self
     */
    public function setIndustrySepcDetailAcc($industry_sepc_detail_acc)
    {
        if (is_null($industry_sepc_detail_acc)) {
            array_push($this->openAPINullablesSetToNull, 'industry_sepc_detail_acc');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_sepc_detail_acc', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_sepc_detail_acc'] = $industry_sepc_detail_acc;

        return $this;
    }

    /**
     * Gets industry_sepc_detail_gov
     *
     * @return string|null
     */
    public function getIndustrySepcDetailGov()
    {
        return $this->container['industry_sepc_detail_gov'];
    }

    /**
     * Sets industry_sepc_detail_gov
     *
     * @param string|null $industry_sepc_detail_gov industry_sepc_detail_gov
     *
     * @return self
     */
    public function setIndustrySepcDetailGov($industry_sepc_detail_gov)
    {
        if (is_null($industry_sepc_detail_gov)) {
            array_push($this->openAPINullablesSetToNull, 'industry_sepc_detail_gov');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('industry_sepc_detail_gov', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['industry_sepc_detail_gov'] = $industry_sepc_detail_gov;

        return $this;
    }

    /**
     * Gets intact_charge_info_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\IntactChargeInfo[]|null
     */
    public function getIntactChargeInfoList()
    {
        return $this->container['intact_charge_info_list'];
    }

    /**
     * Sets intact_charge_info_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\IntactChargeInfo[]|null $intact_charge_info_list intact_charge_info_list
     *
     * @return self
     */
    public function setIntactChargeInfoList($intact_charge_info_list)
    {
        if (is_null($intact_charge_info_list)) {
            array_push($this->openAPINullablesSetToNull, 'intact_charge_info_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('intact_charge_info_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['intact_charge_info_list'] = $intact_charge_info_list;

        return $this;
    }

    /**
     * Gets invoice_amount
     *
     * @return string|null
     */
    public function getInvoiceAmount()
    {
        return $this->container['invoice_amount'];
    }

    /**
     * Sets invoice_amount
     *
     * @param string|null $invoice_amount invoice_amount
     *
     * @return self
     */
    public function setInvoiceAmount($invoice_amount)
    {
        if (is_null($invoice_amount)) {
            array_push($this->openAPINullablesSetToNull, 'invoice_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('invoice_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['invoice_amount'] = $invoice_amount;

        return $this;
    }

    /**
     * Gets mdiscount_amount
     *
     * @return string|null
     */
    public function getMdiscountAmount()
    {
        return $this->container['mdiscount_amount'];
    }

    /**
     * Sets mdiscount_amount
     *
     * @param string|null $mdiscount_amount mdiscount_amount
     *
     * @return self
     */
    public function setMdiscountAmount($mdiscount_amount)
    {
        if (is_null($mdiscount_amount)) {
            array_push($this->openAPINullablesSetToNull, 'mdiscount_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('mdiscount_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['mdiscount_amount'] = $mdiscount_amount;

        return $this;
    }

    /**
     * Gets medical_insurance_info
     *
     * @return string|null
     */
    public function getMedicalInsuranceInfo()
    {
        return $this->container['medical_insurance_info'];
    }

    /**
     * Sets medical_insurance_info
     *
     * @param string|null $medical_insurance_info medical_insurance_info
     *
     * @return self
     */
    public function setMedicalInsuranceInfo($medical_insurance_info)
    {
        if (is_null($medical_insurance_info)) {
            array_push($this->openAPINullablesSetToNull, 'medical_insurance_info');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('medical_insurance_info', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['medical_insurance_info'] = $medical_insurance_info;

        return $this;
    }

    /**
     * Gets open_id
     *
     * @return string|null
     */
    public function getOpenId()
    {
        return $this->container['open_id'];
    }

    /**
     * Sets open_id
     *
     * @param string|null $open_id open_id
     *
     * @return self
     */
    public function setOpenId($open_id)
    {
        if (is_null($open_id)) {
            array_push($this->openAPINullablesSetToNull, 'open_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('open_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['open_id'] = $open_id;

        return $this;
    }

    /**
     * Gets out_trade_no
     *
     * @return string|null
     */
    public function getOutTradeNo()
    {
        return $this->container['out_trade_no'];
    }

    /**
     * Sets out_trade_no
     *
     * @param string|null $out_trade_no out_trade_no
     *
     * @return self
     */
    public function setOutTradeNo($out_trade_no)
    {
        if (is_null($out_trade_no)) {
            array_push($this->openAPINullablesSetToNull, 'out_trade_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('out_trade_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['out_trade_no'] = $out_trade_no;

        return $this;
    }

    /**
     * Gets passback_params
     *
     * @return string|null
     */
    public function getPassbackParams()
    {
        return $this->container['passback_params'];
    }

    /**
     * Sets passback_params
     *
     * @param string|null $passback_params passback_params
     *
     * @return self
     */
    public function setPassbackParams($passback_params)
    {
        if (is_null($passback_params)) {
            array_push($this->openAPINullablesSetToNull, 'passback_params');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('passback_params', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['passback_params'] = $passback_params;

        return $this;
    }

    /**
     * Gets pay_amount
     *
     * @return string|null
     */
    public function getPayAmount()
    {
        return $this->container['pay_amount'];
    }

    /**
     * Sets pay_amount
     *
     * @param string|null $pay_amount pay_amount
     *
     * @return self
     */
    public function setPayAmount($pay_amount)
    {
        if (is_null($pay_amount)) {
            array_push($this->openAPINullablesSetToNull, 'pay_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_amount'] = $pay_amount;

        return $this;
    }

    /**
     * Gets pay_currency
     *
     * @return string|null
     */
    public function getPayCurrency()
    {
        return $this->container['pay_currency'];
    }

    /**
     * Sets pay_currency
     *
     * @param string|null $pay_currency pay_currency
     *
     * @return self
     */
    public function setPayCurrency($pay_currency)
    {
        if (is_null($pay_currency)) {
            array_push($this->openAPINullablesSetToNull, 'pay_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pay_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pay_currency'] = $pay_currency;

        return $this;
    }

    /**
     * Gets payment_info_with_id_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\PaymentInfoWithId[]|null
     */
    public function getPaymentInfoWithIdList()
    {
        return $this->container['payment_info_with_id_list'];
    }

    /**
     * Sets payment_info_with_id_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\PaymentInfoWithId[]|null $payment_info_with_id_list payment_info_with_id_list
     *
     * @return self
     */
    public function setPaymentInfoWithIdList($payment_info_with_id_list)
    {
        if (is_null($payment_info_with_id_list)) {
            array_push($this->openAPINullablesSetToNull, 'payment_info_with_id_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('payment_info_with_id_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['payment_info_with_id_list'] = $payment_info_with_id_list;

        return $this;
    }

    /**
     * Gets period_scene
     *
     * @return string|null
     */
    public function getPeriodScene()
    {
        return $this->container['period_scene'];
    }

    /**
     * Sets period_scene
     *
     * @param string|null $period_scene period_scene
     *
     * @return self
     */
    public function setPeriodScene($period_scene)
    {
        if (is_null($period_scene)) {
            array_push($this->openAPINullablesSetToNull, 'period_scene');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('period_scene', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['period_scene'] = $period_scene;

        return $this;
    }

    /**
     * Gets point_amount
     *
     * @return string|null
     */
    public function getPointAmount()
    {
        return $this->container['point_amount'];
    }

    /**
     * Sets point_amount
     *
     * @param string|null $point_amount point_amount
     *
     * @return self
     */
    public function setPointAmount($point_amount)
    {
        if (is_null($point_amount)) {
            array_push($this->openAPINullablesSetToNull, 'point_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('point_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['point_amount'] = $point_amount;

        return $this;
    }

    /**
     * Gets pre_auth_pay_amount
     *
     * @return string|null
     */
    public function getPreAuthPayAmount()
    {
        return $this->container['pre_auth_pay_amount'];
    }

    /**
     * Sets pre_auth_pay_amount
     *
     * @param string|null $pre_auth_pay_amount pre_auth_pay_amount
     *
     * @return self
     */
    public function setPreAuthPayAmount($pre_auth_pay_amount)
    {
        if (is_null($pre_auth_pay_amount)) {
            array_push($this->openAPINullablesSetToNull, 'pre_auth_pay_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('pre_auth_pay_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['pre_auth_pay_amount'] = $pre_auth_pay_amount;

        return $this;
    }

    /**
     * Gets receipt_amount
     *
     * @return string|null
     */
    public function getReceiptAmount()
    {
        return $this->container['receipt_amount'];
    }

    /**
     * Sets receipt_amount
     *
     * @param string|null $receipt_amount receipt_amount
     *
     * @return self
     */
    public function setReceiptAmount($receipt_amount)
    {
        if (is_null($receipt_amount)) {
            array_push($this->openAPINullablesSetToNull, 'receipt_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receipt_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receipt_amount'] = $receipt_amount;

        return $this;
    }

    /**
     * Gets receipt_currency_type
     *
     * @return string|null
     */
    public function getReceiptCurrencyType()
    {
        return $this->container['receipt_currency_type'];
    }

    /**
     * Sets receipt_currency_type
     *
     * @param string|null $receipt_currency_type receipt_currency_type
     *
     * @return self
     */
    public function setReceiptCurrencyType($receipt_currency_type)
    {
        if (is_null($receipt_currency_type)) {
            array_push($this->openAPINullablesSetToNull, 'receipt_currency_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('receipt_currency_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['receipt_currency_type'] = $receipt_currency_type;

        return $this;
    }

    /**
     * Gets req_goods_detail
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\GoodsDetail[]|null
     */
    public function getReqGoodsDetail()
    {
        return $this->container['req_goods_detail'];
    }

    /**
     * Sets req_goods_detail
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\GoodsDetail[]|null $req_goods_detail req_goods_detail
     *
     * @return self
     */
    public function setReqGoodsDetail($req_goods_detail)
    {
        if (is_null($req_goods_detail)) {
            array_push($this->openAPINullablesSetToNull, 'req_goods_detail');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('req_goods_detail', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['req_goods_detail'] = $req_goods_detail;

        return $this;
    }

    /**
     * Gets send_pay_date
     *
     * @return string|null
     */
    public function getSendPayDate()
    {
        return $this->container['send_pay_date'];
    }

    /**
     * Sets send_pay_date
     *
     * @param string|null $send_pay_date send_pay_date
     *
     * @return self
     */
    public function setSendPayDate($send_pay_date)
    {
        if (is_null($send_pay_date)) {
            array_push($this->openAPINullablesSetToNull, 'send_pay_date');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('send_pay_date', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['send_pay_date'] = $send_pay_date;

        return $this;
    }

    /**
     * Gets settle_amount
     *
     * @return string|null
     */
    public function getSettleAmount()
    {
        return $this->container['settle_amount'];
    }

    /**
     * Sets settle_amount
     *
     * @param string|null $settle_amount settle_amount
     *
     * @return self
     */
    public function setSettleAmount($settle_amount)
    {
        if (is_null($settle_amount)) {
            array_push($this->openAPINullablesSetToNull, 'settle_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settle_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settle_amount'] = $settle_amount;

        return $this;
    }

    /**
     * Gets settle_currency
     *
     * @return string|null
     */
    public function getSettleCurrency()
    {
        return $this->container['settle_currency'];
    }

    /**
     * Sets settle_currency
     *
     * @param string|null $settle_currency settle_currency
     *
     * @return self
     */
    public function setSettleCurrency($settle_currency)
    {
        if (is_null($settle_currency)) {
            array_push($this->openAPINullablesSetToNull, 'settle_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settle_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settle_currency'] = $settle_currency;

        return $this;
    }

    /**
     * Gets settle_trans_rate
     *
     * @return string|null
     */
    public function getSettleTransRate()
    {
        return $this->container['settle_trans_rate'];
    }

    /**
     * Sets settle_trans_rate
     *
     * @param string|null $settle_trans_rate settle_trans_rate
     *
     * @return self
     */
    public function setSettleTransRate($settle_trans_rate)
    {
        if (is_null($settle_trans_rate)) {
            array_push($this->openAPINullablesSetToNull, 'settle_trans_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settle_trans_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settle_trans_rate'] = $settle_trans_rate;

        return $this;
    }

    /**
     * Gets settlement_id
     *
     * @return string|null
     */
    public function getSettlementId()
    {
        return $this->container['settlement_id'];
    }

    /**
     * Sets settlement_id
     *
     * @param string|null $settlement_id settlement_id
     *
     * @return self
     */
    public function setSettlementId($settlement_id)
    {
        if (is_null($settlement_id)) {
            array_push($this->openAPINullablesSetToNull, 'settlement_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('settlement_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['settlement_id'] = $settlement_id;

        return $this;
    }

    /**
     * Gets store_id
     *
     * @return string|null
     */
    public function getStoreId()
    {
        return $this->container['store_id'];
    }

    /**
     * Sets store_id
     *
     * @param string|null $store_id store_id
     *
     * @return self
     */
    public function setStoreId($store_id)
    {
        if (is_null($store_id)) {
            array_push($this->openAPINullablesSetToNull, 'store_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_id'] = $store_id;

        return $this;
    }

    /**
     * Gets store_name
     *
     * @return string|null
     */
    public function getStoreName()
    {
        return $this->container['store_name'];
    }

    /**
     * Sets store_name
     *
     * @param string|null $store_name store_name
     *
     * @return self
     */
    public function setStoreName($store_name)
    {
        if (is_null($store_name)) {
            array_push($this->openAPINullablesSetToNull, 'store_name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('store_name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['store_name'] = $store_name;

        return $this;
    }

    /**
     * Gets subject
     *
     * @return string|null
     */
    public function getSubject()
    {
        return $this->container['subject'];
    }

    /**
     * Sets subject
     *
     * @param string|null $subject subject
     *
     * @return self
     */
    public function setSubject($subject)
    {
        if (is_null($subject)) {
            array_push($this->openAPINullablesSetToNull, 'subject');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('subject', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['subject'] = $subject;

        return $this;
    }

    /**
     * Gets tap_pay_info
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\TapPayInfo|null
     */
    public function getTapPayInfo()
    {
        return $this->container['tap_pay_info'];
    }

    /**
     * Sets tap_pay_info
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\TapPayInfo|null $tap_pay_info tap_pay_info
     *
     * @return self
     */
    public function setTapPayInfo($tap_pay_info)
    {
        if (is_null($tap_pay_info)) {
            throw new \InvalidArgumentException('non-nullable tap_pay_info cannot be null');
        }
        $this->container['tap_pay_info'] = $tap_pay_info;

        return $this;
    }

    /**
     * Gets terminal_id
     *
     * @return string|null
     */
    public function getTerminalId()
    {
        return $this->container['terminal_id'];
    }

    /**
     * Sets terminal_id
     *
     * @param string|null $terminal_id terminal_id
     *
     * @return self
     */
    public function setTerminalId($terminal_id)
    {
        if (is_null($terminal_id)) {
            array_push($this->openAPINullablesSetToNull, 'terminal_id');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('terminal_id', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['terminal_id'] = $terminal_id;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return string|null
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param string|null $total_amount total_amount
     *
     * @return self
     */
    public function setTotalAmount($total_amount)
    {
        if (is_null($total_amount)) {
            array_push($this->openAPINullablesSetToNull, 'total_amount');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('total_amount', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets trade_no
     *
     * @return string|null
     */
    public function getTradeNo()
    {
        return $this->container['trade_no'];
    }

    /**
     * Sets trade_no
     *
     * @param string|null $trade_no trade_no
     *
     * @return self
     */
    public function setTradeNo($trade_no)
    {
        if (is_null($trade_no)) {
            array_push($this->openAPINullablesSetToNull, 'trade_no');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_no', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_no'] = $trade_no;

        return $this;
    }

    /**
     * Gets trade_settle_info
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\TradeSettleInfo|null
     */
    public function getTradeSettleInfo()
    {
        return $this->container['trade_settle_info'];
    }

    /**
     * Sets trade_settle_info
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\TradeSettleInfo|null $trade_settle_info trade_settle_info
     *
     * @return self
     */
    public function setTradeSettleInfo($trade_settle_info)
    {
        if (is_null($trade_settle_info)) {
            throw new \InvalidArgumentException('non-nullable trade_settle_info cannot be null');
        }
        $this->container['trade_settle_info'] = $trade_settle_info;

        return $this;
    }

    /**
     * Gets trade_status
     *
     * @return string|null
     */
    public function getTradeStatus()
    {
        return $this->container['trade_status'];
    }

    /**
     * Sets trade_status
     *
     * @param string|null $trade_status trade_status
     *
     * @return self
     */
    public function setTradeStatus($trade_status)
    {
        if (is_null($trade_status)) {
            array_push($this->openAPINullablesSetToNull, 'trade_status');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trade_status', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trade_status'] = $trade_status;

        return $this;
    }

    /**
     * Gets trans_currency
     *
     * @return string|null
     */
    public function getTransCurrency()
    {
        return $this->container['trans_currency'];
    }

    /**
     * Sets trans_currency
     *
     * @param string|null $trans_currency trans_currency
     *
     * @return self
     */
    public function setTransCurrency($trans_currency)
    {
        if (is_null($trans_currency)) {
            array_push($this->openAPINullablesSetToNull, 'trans_currency');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trans_currency', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trans_currency'] = $trans_currency;

        return $this;
    }

    /**
     * Gets trans_pay_rate
     *
     * @return string|null
     */
    public function getTransPayRate()
    {
        return $this->container['trans_pay_rate'];
    }

    /**
     * Sets trans_pay_rate
     *
     * @param string|null $trans_pay_rate trans_pay_rate
     *
     * @return self
     */
    public function setTransPayRate($trans_pay_rate)
    {
        if (is_null($trans_pay_rate)) {
            array_push($this->openAPINullablesSetToNull, 'trans_pay_rate');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('trans_pay_rate', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['trans_pay_rate'] = $trans_pay_rate;

        return $this;
    }

    /**
     * Gets voucher_detail_list
     *
     * @return \ZSGF\Client\ZSGF\Client\Model\VoucherDetail[]|null
     */
    public function getVoucherDetailList()
    {
        return $this->container['voucher_detail_list'];
    }

    /**
     * Sets voucher_detail_list
     *
     * @param \ZSGF\Client\ZSGF\Client\Model\VoucherDetail[]|null $voucher_detail_list voucher_detail_list
     *
     * @return self
     */
    public function setVoucherDetailList($voucher_detail_list)
    {
        if (is_null($voucher_detail_list)) {
            array_push($this->openAPINullablesSetToNull, 'voucher_detail_list');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('voucher_detail_list', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['voucher_detail_list'] = $voucher_detail_list;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


