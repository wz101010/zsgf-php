<?php
/**
 * ServiceItem
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 全部  API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * ServiceItem Class Doc Comment
 *
 * @category Class
 * @description 服务配置项实体，用于定义和管理服务相关的配置信息。
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ServiceItem implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ServiceItem';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'biz_code' => 'string',
        'provider_code' => 'string',
        'group_code' => 'string',
        'name' => 'string',
        'code' => 'string',
        'value_type' => 'string',
        'icon' => 'string',
        'value_defaults' => 'string',
        'description' => 'string',
        'tags' => 'string',
        'is_system' => 'bool',
        'show' => 'bool',
        'show_index' => 'int',
        'create_date' => '\DateTime',
        'last_update' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'biz_code' => null,
        'provider_code' => null,
        'group_code' => null,
        'name' => null,
        'code' => null,
        'value_type' => null,
        'icon' => null,
        'value_defaults' => null,
        'description' => null,
        'tags' => null,
        'is_system' => null,
        'show' => null,
        'show_index' => 'int32',
        'create_date' => 'date-time',
        'last_update' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'biz_code' => true,
        'provider_code' => true,
        'group_code' => true,
        'name' => true,
        'code' => true,
        'value_type' => true,
        'icon' => true,
        'value_defaults' => true,
        'description' => true,
        'tags' => true,
        'is_system' => false,
        'show' => false,
        'show_index' => false,
        'create_date' => false,
        'last_update' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'biz_code' => 'bizCode',
        'provider_code' => 'providerCode',
        'group_code' => 'groupCode',
        'name' => 'name',
        'code' => 'code',
        'value_type' => 'valueType',
        'icon' => 'icon',
        'value_defaults' => 'valueDefaults',
        'description' => 'description',
        'tags' => 'tags',
        'is_system' => 'isSystem',
        'show' => 'show',
        'show_index' => 'showIndex',
        'create_date' => 'createDate',
        'last_update' => 'lastUpdate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'biz_code' => 'setBizCode',
        'provider_code' => 'setProviderCode',
        'group_code' => 'setGroupCode',
        'name' => 'setName',
        'code' => 'setCode',
        'value_type' => 'setValueType',
        'icon' => 'setIcon',
        'value_defaults' => 'setValueDefaults',
        'description' => 'setDescription',
        'tags' => 'setTags',
        'is_system' => 'setIsSystem',
        'show' => 'setShow',
        'show_index' => 'setShowIndex',
        'create_date' => 'setCreateDate',
        'last_update' => 'setLastUpdate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'biz_code' => 'getBizCode',
        'provider_code' => 'getProviderCode',
        'group_code' => 'getGroupCode',
        'name' => 'getName',
        'code' => 'getCode',
        'value_type' => 'getValueType',
        'icon' => 'getIcon',
        'value_defaults' => 'getValueDefaults',
        'description' => 'getDescription',
        'tags' => 'getTags',
        'is_system' => 'getIsSystem',
        'show' => 'getShow',
        'show_index' => 'getShowIndex',
        'create_date' => 'getCreateDate',
        'last_update' => 'getLastUpdate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('biz_code', $data ?? [], null);
        $this->setIfExists('provider_code', $data ?? [], null);
        $this->setIfExists('group_code', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('code', $data ?? [], null);
        $this->setIfExists('value_type', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('value_defaults', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('tags', $data ?? [], null);
        $this->setIfExists('is_system', $data ?? [], null);
        $this->setIfExists('show', $data ?? [], null);
        $this->setIfExists('show_index', $data ?? [], null);
        $this->setIfExists('create_date', $data ?? [], null);
        $this->setIfExists('last_update', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['biz_code']) && (mb_strlen($this->container['biz_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'biz_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['provider_code']) && (mb_strlen($this->container['provider_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'provider_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['group_code']) && (mb_strlen($this->container['group_code']) > 50)) {
            $invalidProperties[] = "invalid value for 'group_code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 100)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 100.";
        }

        if (!is_null($this->container['code']) && (mb_strlen($this->container['code']) > 50)) {
            $invalidProperties[] = "invalid value for 'code', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['value_type']) && (mb_strlen($this->container['value_type']) > 50)) {
            $invalidProperties[] = "invalid value for 'value_type', the character length must be smaller than or equal to 50.";
        }

        if (!is_null($this->container['icon']) && (mb_strlen($this->container['icon']) > 255)) {
            $invalidProperties[] = "invalid value for 'icon', the character length must be smaller than or equal to 255.";
        }

        if (!is_null($this->container['tags']) && (mb_strlen($this->container['tags']) > 255)) {
            $invalidProperties[] = "invalid value for 'tags', the character length must be smaller than or equal to 255.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id 服务配置项的唯一标识符。
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets biz_code
     *
     * @return string|null
     */
    public function getBizCode()
    {
        return $this->container['biz_code'];
    }

    /**
     * Sets biz_code
     *
     * @param string|null $biz_code 服务配置项所属的业务代码，用于分类管理。
     *
     * @return self
     */
    public function setBizCode($biz_code)
    {
        if (is_null($biz_code)) {
            array_push($this->openAPINullablesSetToNull, 'biz_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('biz_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($biz_code) && (mb_strlen($biz_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $biz_code when calling ServiceItem., must be smaller than or equal to 50.');
        }

        $this->container['biz_code'] = $biz_code;

        return $this;
    }

    /**
     * Gets provider_code
     *
     * @return string|null
     */
    public function getProviderCode()
    {
        return $this->container['provider_code'];
    }

    /**
     * Sets provider_code
     *
     * @param string|null $provider_code 关联的服务商代码，用于标识提供该配置项的服务商。
     *
     * @return self
     */
    public function setProviderCode($provider_code)
    {
        if (is_null($provider_code)) {
            array_push($this->openAPINullablesSetToNull, 'provider_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('provider_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($provider_code) && (mb_strlen($provider_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $provider_code when calling ServiceItem., must be smaller than or equal to 50.');
        }

        $this->container['provider_code'] = $provider_code;

        return $this;
    }

    /**
     * Gets group_code
     *
     * @return string|null
     */
    public function getGroupCode()
    {
        return $this->container['group_code'];
    }

    /**
     * Sets group_code
     *
     * @param string|null $group_code 服务配置项所属的功能分组代码，用于组织和管理相关配置项。
     *
     * @return self
     */
    public function setGroupCode($group_code)
    {
        if (is_null($group_code)) {
            array_push($this->openAPINullablesSetToNull, 'group_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('group_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($group_code) && (mb_strlen($group_code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $group_code when calling ServiceItem., must be smaller than or equal to 50.');
        }

        $this->container['group_code'] = $group_code;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name 服务配置项的名称，用于描述其功能或用途。
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            array_push($this->openAPINullablesSetToNull, 'name');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('name', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($name) && (mb_strlen($name) > 100)) {
            throw new \InvalidArgumentException('invalid length for $name when calling ServiceItem., must be smaller than or equal to 100.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets code
     *
     * @return string|null
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string|null $code 服务配置项的唯一代码，用于系统内部标识。
     *
     * @return self
     */
    public function setCode($code)
    {
        if (is_null($code)) {
            array_push($this->openAPINullablesSetToNull, 'code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($code) && (mb_strlen($code) > 50)) {
            throw new \InvalidArgumentException('invalid length for $code when calling ServiceItem., must be smaller than or equal to 50.');
        }

        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets value_type
     *
     * @return string|null
     */
    public function getValueType()
    {
        return $this->container['value_type'];
    }

    /**
     * Sets value_type
     *
     * @param string|null $value_type 服务配置项的值类型，例如 'text', 'number', 'boolean' 等。默认为 'text'。
     *
     * @return self
     */
    public function setValueType($value_type)
    {
        if (is_null($value_type)) {
            array_push($this->openAPINullablesSetToNull, 'value_type');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_type', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($value_type) && (mb_strlen($value_type) > 50)) {
            throw new \InvalidArgumentException('invalid length for $value_type when calling ServiceItem., must be smaller than or equal to 50.');
        }

        $this->container['value_type'] = $value_type;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon 服务配置项的图标URL或路径，用于在界面上显示。
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            array_push($this->openAPINullablesSetToNull, 'icon');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('icon', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($icon) && (mb_strlen($icon) > 255)) {
            throw new \InvalidArgumentException('invalid length for $icon when calling ServiceItem., must be smaller than or equal to 255.');
        }

        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets value_defaults
     *
     * @return string|null
     */
    public function getValueDefaults()
    {
        return $this->container['value_defaults'];
    }

    /**
     * Sets value_defaults
     *
     * @param string|null $value_defaults 服务配置项的默认值，当未设置具体值时使用。
     *
     * @return self
     */
    public function setValueDefaults($value_defaults)
    {
        if (is_null($value_defaults)) {
            array_push($this->openAPINullablesSetToNull, 'value_defaults');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('value_defaults', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['value_defaults'] = $value_defaults;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description 服务配置项的详细描述信息，用于说明其用途和配置方法。
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            array_push($this->openAPINullablesSetToNull, 'description');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('description', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string|null
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string|null $tags 用于分类或标记服务配置项的标签。
     *
     * @return self
     */
    public function setTags($tags)
    {
        if (is_null($tags)) {
            array_push($this->openAPINullablesSetToNull, 'tags');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('tags', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($tags) && (mb_strlen($tags) > 255)) {
            throw new \InvalidArgumentException('invalid length for $tags when calling ServiceItem., must be smaller than or equal to 255.');
        }

        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets is_system
     *
     * @return bool|null
     */
    public function getIsSystem()
    {
        return $this->container['is_system'];
    }

    /**
     * Sets is_system
     *
     * @param bool|null $is_system 指示该配置项是否为系统级别的配置项，默认为 false。
     *
     * @return self
     */
    public function setIsSystem($is_system)
    {
        if (is_null($is_system)) {
            throw new \InvalidArgumentException('non-nullable is_system cannot be null');
        }
        $this->container['is_system'] = $is_system;

        return $this;
    }

    /**
     * Gets show
     *
     * @return bool|null
     */
    public function getShow()
    {
        return $this->container['show'];
    }

    /**
     * Sets show
     *
     * @param bool|null $show 指示服务配置项是否在界面上显示，默认为 true。
     *
     * @return self
     */
    public function setShow($show)
    {
        if (is_null($show)) {
            throw new \InvalidArgumentException('non-nullable show cannot be null');
        }
        $this->container['show'] = $show;

        return $this;
    }

    /**
     * Gets show_index
     *
     * @return int|null
     */
    public function getShowIndex()
    {
        return $this->container['show_index'];
    }

    /**
     * Sets show_index
     *
     * @param int|null $show_index 服务配置项在界面上的显示顺序。
     *
     * @return self
     */
    public function setShowIndex($show_index)
    {
        if (is_null($show_index)) {
            throw new \InvalidArgumentException('non-nullable show_index cannot be null');
        }
        $this->container['show_index'] = $show_index;

        return $this;
    }

    /**
     * Gets create_date
     *
     * @return \DateTime|null
     */
    public function getCreateDate()
    {
        return $this->container['create_date'];
    }

    /**
     * Sets create_date
     *
     * @param \DateTime|null $create_date 服务配置项的创建日期，默认为当前时间。
     *
     * @return self
     */
    public function setCreateDate($create_date)
    {
        if (is_null($create_date)) {
            throw new \InvalidArgumentException('non-nullable create_date cannot be null');
        }
        $this->container['create_date'] = $create_date;

        return $this;
    }

    /**
     * Gets last_update
     *
     * @return \DateTime|null
     */
    public function getLastUpdate()
    {
        return $this->container['last_update'];
    }

    /**
     * Sets last_update
     *
     * @param \DateTime|null $last_update 服务配置项的最后更新日期，默认为当前时间。
     *
     * @return self
     */
    public function setLastUpdate($last_update)
    {
        if (is_null($last_update)) {
            throw new \InvalidArgumentException('non-nullable last_update cannot be null');
        }
        $this->container['last_update'] = $last_update;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


