<?php
/**
 * SignInRequest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * 用户全部 API 文档
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.13.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace ZSGF\Client\ZSGF\Client\Model;

use \ArrayAccess;
use \ZSGF\Client\ObjectSerializer;

/**
 * SignInRequest Class Doc Comment
 *
 * @category Class
 * @package  ZSGF\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SignInRequest implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'SignInRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user_name' => 'string',
        'pwd' => 'string',
        'two_factor_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user_name' => null,
        'pwd' => null,
        'two_factor_code' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user_name' => false,
        'pwd' => false,
        'two_factor_code' => true
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user_name' => 'userName',
        'pwd' => 'pwd',
        'two_factor_code' => 'twoFactorCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user_name' => 'setUserName',
        'pwd' => 'setPwd',
        'two_factor_code' => 'setTwoFactorCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user_name' => 'getUserName',
        'pwd' => 'getPwd',
        'two_factor_code' => 'getTwoFactorCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('user_name', $data ?? [], null);
        $this->setIfExists('pwd', $data ?? [], null);
        $this->setIfExists('two_factor_code', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['user_name'] === null) {
            $invalidProperties[] = "'user_name' can't be null";
        }
        if ((mb_strlen($this->container['user_name']) > 32)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['user_name']) < 6)) {
            $invalidProperties[] = "invalid value for 'user_name', the character length must be bigger than or equal to 6.";
        }

        if ($this->container['pwd'] === null) {
            $invalidProperties[] = "'pwd' can't be null";
        }
        if ((mb_strlen($this->container['pwd']) > 32)) {
            $invalidProperties[] = "invalid value for 'pwd', the character length must be smaller than or equal to 32.";
        }

        if ((mb_strlen($this->container['pwd']) < 6)) {
            $invalidProperties[] = "invalid value for 'pwd', the character length must be bigger than or equal to 6.";
        }

        if (!preg_match("/^[a-zA-Z0-9_\\-!@#$%^&*()]*$/", $this->container['pwd'])) {
            $invalidProperties[] = "invalid value for 'pwd', must be conform to the pattern /^[a-zA-Z0-9_\\-!@#$%^&*()]*$/.";
        }

        if (!is_null($this->container['two_factor_code']) && (mb_strlen($this->container['two_factor_code']) > 6)) {
            $invalidProperties[] = "invalid value for 'two_factor_code', the character length must be smaller than or equal to 6.";
        }

        if (!is_null($this->container['two_factor_code']) && (mb_strlen($this->container['two_factor_code']) < 6)) {
            $invalidProperties[] = "invalid value for 'two_factor_code', the character length must be bigger than or equal to 6.";
        }

        if (!is_null($this->container['two_factor_code']) && !preg_match("/^[0-9]*$/", $this->container['two_factor_code'])) {
            $invalidProperties[] = "invalid value for 'two_factor_code', must be conform to the pattern /^[0-9]*$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user_name
     *
     * @return string
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string $user_name 用户名，长度必须在6到32个字符之间，只能包含字母、数字、下划线和连字符
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        if ((mb_strlen($user_name) > 32)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling SignInRequest., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($user_name) < 6)) {
            throw new \InvalidArgumentException('invalid length for $user_name when calling SignInRequest., must be bigger than or equal to 6.');
        }

        $this->container['user_name'] = $user_name;

        return $this;
    }

    /**
     * Gets pwd
     *
     * @return string
     */
    public function getPwd()
    {
        return $this->container['pwd'];
    }

    /**
     * Sets pwd
     *
     * @param string $pwd 用户密码，长度必须在6到50个字符之间，可以包含数字、大小写字母、下划线、连字符和特殊符号
     *
     * @return self
     */
    public function setPwd($pwd)
    {
        if (is_null($pwd)) {
            throw new \InvalidArgumentException('non-nullable pwd cannot be null');
        }
        if ((mb_strlen($pwd) > 32)) {
            throw new \InvalidArgumentException('invalid length for $pwd when calling SignInRequest., must be smaller than or equal to 32.');
        }
        if ((mb_strlen($pwd) < 6)) {
            throw new \InvalidArgumentException('invalid length for $pwd when calling SignInRequest., must be bigger than or equal to 6.');
        }
        if ((!preg_match("/^[a-zA-Z0-9_\\-!@#$%^&*()]*$/", ObjectSerializer::toString($pwd)))) {
            throw new \InvalidArgumentException("invalid value for \$pwd when calling SignInRequest., must conform to the pattern /^[a-zA-Z0-9_\\-!@#$%^&*()]*$/.");
        }

        $this->container['pwd'] = $pwd;

        return $this;
    }

    /**
     * Gets two_factor_code
     *
     * @return string|null
     */
    public function getTwoFactorCode()
    {
        return $this->container['two_factor_code'];
    }

    /**
     * Sets two_factor_code
     *
     * @param string|null $two_factor_code 双因素认证代码，如果启用双因素认证登录，则必填，长度必须为6个字符，只能包含数字
     *
     * @return self
     */
    public function setTwoFactorCode($two_factor_code)
    {
        if (is_null($two_factor_code)) {
            array_push($this->openAPINullablesSetToNull, 'two_factor_code');
        } else {
            $nullablesSetToNull = $this->getOpenAPINullablesSetToNull();
            $index = array_search('two_factor_code', $nullablesSetToNull);
            if ($index !== FALSE) {
                unset($nullablesSetToNull[$index]);
                $this->setOpenAPINullablesSetToNull($nullablesSetToNull);
            }
        }
        if (!is_null($two_factor_code) && (mb_strlen($two_factor_code) > 6)) {
            throw new \InvalidArgumentException('invalid length for $two_factor_code when calling SignInRequest., must be smaller than or equal to 6.');
        }
        if (!is_null($two_factor_code) && (mb_strlen($two_factor_code) < 6)) {
            throw new \InvalidArgumentException('invalid length for $two_factor_code when calling SignInRequest., must be bigger than or equal to 6.');
        }
        if (!is_null($two_factor_code) && (!preg_match("/^[0-9]*$/", ObjectSerializer::toString($two_factor_code)))) {
            throw new \InvalidArgumentException("invalid value for \$two_factor_code when calling SignInRequest., must conform to the pattern /^[0-9]*$/.");
        }

        $this->container['two_factor_code'] = $two_factor_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


